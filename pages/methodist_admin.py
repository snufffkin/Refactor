# pages/methodist_admin.py

import streamlit as st
import pandas as pd
import plotly.express as px
import numpy as np
import os
import hashlib
from sqlalchemy import text

import core
import auth
from components.utils import create_hierarchical_header

def page_methodist_admin(df: pd.DataFrame, engine):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –º–µ—Ç–æ–¥–∏—Å—Ç–æ–≤"""
    st.title("üë®‚Äçüè´ –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –º–µ—Ç–æ–¥–∏—Å—Ç–æ–≤")
    
    # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
    tabs = st.tabs([
        "üìã –ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏", 
        "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", 
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
    ])
    
    # –í–∫–ª–∞–¥–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
    with tabs[0]:
        st.header("–ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        assignments = auth.get_assigned_cards(engine)
        
        if assignments.empty:
            st.info("–ù–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫")
        else:
            # –§–∏–ª—å—Ç—Ä—ã
            col1, col2 = st.columns(2)
            
            with col1:
                # –§–∏–ª—å—Ç—Ä –ø–æ –º–µ—Ç–æ–¥–∏—Å—Ç—É
                methodists = assignments["username"].unique()
                selected_methodist = st.multiselect(
                    "–§–∏–ª—å—Ç—Ä –ø–æ –º–µ—Ç–æ–¥–∏—Å—Ç—É",
                    options=methodists,
                    default=None
                )
            
            with col2:
                # –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
                statuses = assignments["status"].unique()
                status_labels = {
                    "not_started": "–ù–µ –Ω–∞—á–∞—Ç–æ",
                    "in_progress": "–í —Ä–∞–±–æ—Ç–µ",
                    "review": "–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ",
                    "completed": "–ó–∞–≤–µ—Ä—à–µ–Ω–æ",
                    "wont_fix": "–ù–µ –±—É–¥–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ"
                }
                
                selected_status = st.multiselect(
                    "–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É",
                    options=statuses,
                    default=None,
                    format_func=lambda x: status_labels.get(x, x)
                )
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            filtered_assignments = assignments
            
            if selected_methodist:
                filtered_assignments = filtered_assignments[filtered_assignments["username"].isin(selected_methodist)]
            
            if selected_status:
                filtered_assignments = filtered_assignments[filtered_assignments["status"].isin(selected_status)]
            
            # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            display_df = pd.DataFrame()
            display_df["ID –∫–∞—Ä—Ç–æ—á–∫–∏"] = filtered_assignments["card_id"]
            display_df["–ü—Ä–æ–≥—Ä–∞–º–º–∞"] = filtered_assignments["program"]
            display_df["–ú–æ–¥—É–ª—å"] = filtered_assignments["module"]
            display_df["–£—Ä–æ–∫"] = filtered_assignments["lesson"]
            display_df["–ì—Ä—É–ø–ø–∞ –∑–∞–¥–∞–Ω–∏–π"] = filtered_assignments["gz"]
            display_df["–¢–∏–ø –∫–∞—Ä—Ç–æ—á–∫–∏"] = filtered_assignments["card_type"]
            display_df["–ú–µ—Ç–æ–¥–∏—Å—Ç"] = filtered_assignments["username"]
            display_df["–°—Ç–∞—Ç—É—Å"] = filtered_assignments["status"].map(status_labels)
            display_df["–û–±–Ω–æ–≤–ª–µ–Ω–æ"] = filtered_assignments["updated_at"]
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞—Ä—Ç–æ—á–∫–∏
            display_df["–î–µ–π—Å—Ç–≤–∏—è"] = filtered_assignments.apply(
                lambda row: f"[–ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞—Ä—Ç–æ—á–∫–µ](?page=cards&card_id={int(row['card_id'])})", 
                axis=1
            )
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –±–µ–∑ –∫–æ–ª–æ–Ω–∫–∏ '–î–µ–π—Å—Ç–≤–∏—è'
            st.dataframe(display_df.drop(columns=["–î–µ–π—Å—Ç–≤–∏—è"]), use_container_width=True)
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∫–∞—Ä—Ç–æ—á–∫–∞–º
            for _, row in filtered_assignments.iterrows():
                card_id = int(row['card_id'])
                if st.button(f"–ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞—Ä—Ç–æ—á–∫–µ {card_id}", key=f"methodist_admin_nav_{card_id}"):
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã URL –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                    st.query_params = {"page": "cards", "card_id": str(card_id)}
                    st.rerun()
            
            # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º")
            
            status_counts = filtered_assignments["status"].value_counts().reset_index()
            status_counts.columns = ["–°—Ç–∞—Ç—É—Å", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]
            status_counts["–°—Ç–∞—Ç—É—Å"] = status_counts["–°—Ç–∞—Ç—É—Å"].map(status_labels)
            
            fig = px.pie(
                status_counts, 
                values="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", 
                names="–°—Ç–∞—Ç—É—Å",
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º",
                color="–°—Ç–∞—Ç—É—Å",
                color_discrete_sequence=px.colors.qualitative.Set2
            )
            
            st.plotly_chart(fig, use_container_width=True)
    
    # –í–∫–ª–∞–¥–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    with tabs[1]:
        st.header("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        with engine.connect() as conn:
            users = pd.read_sql(text("""
                SELECT user_id, username, email, full_name, role, is_active, created_at
                FROM users
                ORDER BY username
            """), conn)
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        st.subheader("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        display_users = pd.DataFrame()
        display_users["ID"] = users["user_id"]
        display_users["–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"] = users["username"]
        display_users["–ü–æ–ª–Ω–æ–µ –∏–º—è"] = users["full_name"]
        display_users["Email"] = users["email"]
        display_users["–†–æ–ª—å"] = users["role"]
        display_users["–ê–∫—Ç–∏–≤–µ–Ω"] = users["is_active"]
        display_users["–°–æ–∑–¥–∞–Ω"] = users["created_at"]
        
        st.dataframe(display_users, use_container_width=True)
        
        # –§–æ—Ä–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        st.subheader("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        with st.form(key="create_user_form"):
            col1, col2 = st.columns(2)
            
            with col1:
                username = st.text_input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
                role = st.selectbox("–†–æ–ª—å", options=["methodist", "admin", "viewer"])
            
            with col2:
                full_name = st.text_input("–ü–æ–ª–Ω–æ–µ –∏–º—è")
                email = st.text_input("Email")
                is_active = st.checkbox("–ê–∫—Ç–∏–≤–µ–Ω", value=True)
            
            submit_button = st.form_submit_button(label="–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", type="primary")
            
            if submit_button:
                if not username or not password:
                    st.error("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã")
                else:
                    # –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
                    password_hash = hashlib.sha256(password.encode()).hexdigest()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
                    with engine.connect() as conn:
                        user_exists = conn.execute(text("""
                            SELECT 1 FROM users WHERE username = :username
                        """), {"username": username}).fetchone()
                        
                        if user_exists:
                            st.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏–º–µ–Ω–µ–º '{username}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                        else:
                            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            with engine.begin() as conn:
                                conn.execute(text("""
                                    INSERT INTO users (username, password_hash, email, full_name, role, is_active)
                                    VALUES (:username, :password_hash, :email, :full_name, :role, :is_active)
                                """), {
                                    "username": username,
                                    "password_hash": password_hash,
                                    "email": email,
                                    "full_name": full_name,
                                    "role": role,
                                    "is_active": is_active
                                })
                            
                            st.success(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
                            st.rerun()
        
        # –§–æ—Ä–º–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        st.subheader("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        with st.form(key="edit_user_form"):
            # –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            user_options = {row["user_id"]: f"{row['username']} ({row['full_name']})" for _, row in users.iterrows()}
            selected_user_id = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                options=list(user_options.keys()),
                format_func=lambda x: user_options[x]
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            selected_user = users[users["user_id"] == selected_user_id].iloc[0]
            
            col1, col2 = st.columns(2)
            
            with col1:
                new_password = st.text_input("–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å)", type="password")
                new_role = st.selectbox("–†–æ–ª—å", options=["methodist", "admin", "viewer"], index=["methodist", "admin", "viewer"].index(selected_user["role"]))
            
            with col2:
                new_full_name = st.text_input("–ü–æ–ª–Ω–æ–µ –∏–º—è", value=selected_user["full_name"])
                new_email = st.text_input("Email", value=selected_user["email"])
                new_is_active = st.checkbox("–ê–∫—Ç–∏–≤–µ–Ω", value=selected_user["is_active"])
            
            submit_button = st.form_submit_button(label="–û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", type="primary")
            
            if submit_button:
                # –°–æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                query = "UPDATE users SET full_name = :full_name, email = :email, role = :role, is_active = :is_active"
                params = {
                    "user_id": selected_user_id,
                    "full_name": new_full_name,
                    "email": new_email,
                    "role": new_role,
                    "is_active": new_is_active
                }
                
                # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
                if new_password:
                    password_hash = hashlib.sha256(new_password.encode()).hexdigest()
                    query += ", password_hash = :password_hash"
                    params["password_hash"] = password_hash
                
                query += " WHERE user_id = :user_id"
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                with engine.begin() as conn:
                    conn.execute(text(query), params)
                
                st.success(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
                st.rerun()
    
    # –í–∫–ª–∞–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    with tabs[2]:
        st.header("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∞—Ö
        assignments = auth.get_assigned_cards(engine)
        
        if assignments.empty:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        else:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Ç–æ–¥–∏—Å—Ç–∞–º
            st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Ç–æ–¥–∏—Å—Ç–∞–º")
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –º–µ—Ç–æ–¥–∏—Å—Ç–∞–º –∏ —Å—Ç–∞—Ç—É—Å–∞–º
            methodist_stats = assignments.groupby(["username", "status"]).size().reset_index(name="count")
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
            fig = px.bar(
                methodist_stats,
                x="username",
                y="count",
                color="status",
                title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ –º–µ—Ç–æ–¥–∏—Å—Ç–∞–º –∏ —Å—Ç–∞—Ç—É—Å–∞–º",
                barmode="group",
                color_discrete_map={
                    "not_started": "gray",
                    "in_progress": "blue",
                    "review": "orange",
                    "completed": "green",
                    "wont_fix": "red"
                }
            )
            
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è –ª–µ–≥–µ–Ω–¥—ã
            status_labels = {
                "not_started": "–ù–µ –Ω–∞—á–∞—Ç–æ",
                "in_progress": "–í —Ä–∞–±–æ—Ç–µ",
                "review": "–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ",
                "completed": "–ó–∞–≤–µ—Ä—à–µ–Ω–æ",
                "wont_fix": "–ù–µ –±—É–¥–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ"
            }
            
            fig.for_each_trace(lambda t: t.update(name = status_labels.get(t.name, t.name)))
            
            st.plotly_chart(fig, use_container_width=True)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º
            st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º")
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º –∏ —Å—Ç–∞—Ç—É—Å–∞–º
            program_stats = assignments.groupby(["program", "status"]).size().reset_index(name="count")
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
            fig = px.bar(
                program_stats,
                x="program",
                y="count",
                color="status",
                title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º –∏ —Å—Ç–∞—Ç—É—Å–∞–º",
                barmode="group",
                color_discrete_map={
                    "not_started": "gray",
                    "in_progress": "blue",
                    "review": "orange",
                    "completed": "green",
                    "wont_fix": "red"
                }
            )
            
            fig.for_each_trace(lambda t: t.update(name = status_labels.get(t.name, t.name)))
            
            st.plotly_chart(fig, use_container_width=True)