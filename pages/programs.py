# pages/programs.py
"""
–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã (–û–±–∑–æ—Ä + –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–æ–¥—É–ª—è–º)
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import numpy as np

import core
from components.utils import create_hierarchical_header, display_clickable_items
from components.metrics import display_metrics_row, display_status_chart, display_risk_distribution
from components.charts import display_risk_bar_chart, display_metrics_comparison, display_success_complaints_chart

def page_programs(df: pd.DataFrame):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π –ø–æ –º–æ–¥—É–ª—è–º"""
    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ
    df_prog = core.apply_filters(df, ["program"])
    prog_name = st.session_state.get('filter_program')
    
    # –°–æ–∑–¥–∞–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    create_hierarchical_header(
        levels=["program"],
        values=[prog_name]
    )
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    if df_prog.empty:
        st.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã '{prog_name}'")
        return
    
    # 1. –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã
    st.subheader("üìà –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
    display_metrics_row(df_prog, compare_with=df)
    
    # 2. –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞ –∏ —Å—Ç–∞—Ç—É—Å—ã
    col1, col2 = st.columns(2)
    
    with col1:
        display_risk_distribution(df_prog, "module")
    
    with col2:
        display_status_chart(df_prog, "module")
    
    # 3. –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –≤ –≤–∏–¥–µ —Å—Ç–æ–ª–±—á–∞—Ç–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
    st.subheader("üìä –ú–æ–¥—É–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
    
    # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –º–æ–¥—É–ª—è–º
    agg = df_prog.groupby("module").agg(
        risk=("risk", "mean"),
        success=("success_rate", "mean"),
        complaints=("complaint_rate", "mean"),
        discrimination=("discrimination_avg", "mean"),
        cards=("card_id", "nunique")
    ).reset_index()
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–∫–∞—è –∫–æ–ª–æ–Ω–∫–∞
    if "module_order" in df_prog.columns:
        module_order = df_prog.groupby("module")["module_order"].first().reset_index()
        agg = agg.merge(module_order, on="module", how="left")
        agg = agg.sort_values("module_order")
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç–æ–ª–±—á–∞—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É —Ä–∏—Å–∫–∞ –ø–æ –º–æ–¥—É–ª—è–º
    fig = px.bar(
        agg,
        x="module",
        y="risk",
        color="risk",
        color_continuous_scale="RdYlGn_r",
        labels={"module": "–ú–æ–¥—É–ª—å", "risk": "–†–∏—Å–∫"},
        title="–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ –ø–æ –º–æ–¥—É–ª—è–º"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –¥–ª—è –≥—Ä–∞–Ω–∏—Ü –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∏—Å–∫–∞
    fig.add_hline(y=0.3, line_dash="dash", line_color="green", 
                  annotation_text="–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫", annotation_position="left")
    fig.add_hline(y=0.5, line_dash="dash", line_color="gold", 
                  annotation_text="–°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫", annotation_position="left")
    fig.add_hline(y=0.7, line_dash="dash", line_color="red", 
                  annotation_text="–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫", annotation_position="left")
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏
    fig.update_traces(
        hovertemplate="<b>%{x}</b><br>" +
                      "–†–∏—Å–∫: %{y:.2f}<br>" +
                      "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: %{customdata[0]:.1%}<br>" +
                      "–ñ–∞–ª–æ–±—ã: %{customdata[1]:.1%}<br>" +
                      "–ö–∞—Ä—Ç–æ—á–µ–∫: %{customdata[4]}"
    )
    
    fig.update_layout(
        xaxis_title="–ú–æ–¥—É–ª—å",
        yaxis_title="–†–∏—Å–∫",
        xaxis_tickangle=-45 if len(agg) > 8 else 0
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    # 4. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –º–æ–¥—É–ª–µ–π
    st.subheader("üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø–æ –º–æ–¥—É–ª—è–º")
    
    tab1, tab2 = st.tabs(["–£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∏ –∂–∞–ª–æ–±—ã", "–ú–µ—Ç—Ä–∏–∫–∏ –º–æ–¥—É–ª–µ–π"])
    
    with tab1:
        # –ì—Ä–∞—Ñ–∏–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∏ –∂–∞–ª–æ–±
        display_success_complaints_chart(df_prog, "module")
    
    with tab2:
        # –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–µ—Ç—Ä–∏–∫
        display_metrics_comparison(
            df_prog,
            "module",
            ["success_rate", "complaint_rate", "discrimination_avg", "risk"],
            limit=10
        )
    
    # 5. –¢–∞–±–ª–∏—Ü–∞ —Å –º–æ–¥—É–ª—è–º–∏
    st.subheader("üìã –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –º–æ–¥—É–ª—è–º")
    
    # –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å –º–æ–¥—É–ª—è–º–∏
    detailed_df = agg[["module", "risk", "success", "complaints", "discrimination", "cards"]]
    
    st.dataframe(
        detailed_df.style.format({
            "risk": "{:.2f}",
            "success": "{:.1%}",
            "complaints": "{:.1%}",
            "discrimination": "{:.2f}"
        }).background_gradient(
            subset=["risk"],
            cmap="RdYlGn_r"
        ),
        use_container_width=True
    )
    
    # 6. –°–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
    st.subheader("üìö –°–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π")
    display_clickable_items(df_prog, "module", "module", metrics=["cards", "risk", "success"])
    
    # 7. –ï—Å–ª–∏ –º–æ–¥—É–ª—å –≤—ã–±—Ä–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —É—Ä–æ–∫–æ–≤
    if st.session_state.get("filter_module"):
        from .lessons import _page_lessons_inline
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        st.markdown("---")
        _page_lessons_inline(df)