# pages/my_tasks.py

import streamlit as st
import pandas as pd
import plotly.express as px
import numpy as np
from sqlalchemy import text

import core
import auth

def page_my_tasks(df: pd.DataFrame, engine):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–¥–∞—á –º–µ—Ç–æ–¥–∏—Å—Ç–∞"""
    st.title("üìù –ú–æ–∏ –∑–∞–¥–∞—á–∏")
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏, –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    user_id = st.session_state.user_id
    assignments = auth.get_assigned_cards(engine, user_id)
    
    if assignments.empty:
        st.info("–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫")
    else:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        status_counts = assignments["status"].value_counts().reset_index()
        status_counts.columns = ["–°—Ç–∞—Ç—É—Å", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]
        
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        status_labels = {
            "not_started": "–ù–µ –Ω–∞—á–∞—Ç–æ",
            "in_progress": "–í —Ä–∞–±–æ—Ç–µ",
            "review": "–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ",
            "completed": "–ó–∞–≤–µ—Ä—à–µ–Ω–æ",
            "wont_fix": "–ù–µ –±—É–¥–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ"
        }
        
        status_counts["–ù–∞–∑–≤–∞–Ω–∏–µ"] = status_counts["–°—Ç–∞—Ç—É—Å"].map(status_labels)
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤ —Å—Ç—Ä–æ–∫—É
        cols = st.columns(len(status_counts))
        
        for i, (_, row) in enumerate(status_counts.iterrows()):
            with cols[i]:
                st.metric(
                    row["–ù–∞–∑–≤–∞–Ω–∏–µ"],
                    row["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"],
                    delta=None
                )
        
        # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        fig = px.pie(
            status_counts,
            values="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
            names="–ù–∞–∑–≤–∞–Ω–∏–µ",
            title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º",
            color="–ù–∞–∑–≤–∞–Ω–∏–µ",
            color_discrete_sequence=px.colors.qualitative.Set2
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        # –§–∏–ª—å—Ç—Ä—ã
        st.subheader("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")
        
        # –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
        selected_status = st.multiselect(
            "–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É",
            options=list(status_labels.keys()),
            default=None,
            format_func=lambda x: status_labels.get(x, x)
        )
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä
        filtered_assignments = assignments
        
        if selected_status:
            filtered_assignments = filtered_assignments[filtered_assignments["status"].isin(selected_status)]
        
        # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        display_df = pd.DataFrame()
        display_df["ID –∫–∞—Ä—Ç–æ—á–∫–∏"] = filtered_assignments["card_id"]
        display_df["–ü—Ä–æ–≥—Ä–∞–º–º–∞"] = filtered_assignments["program"]
        display_df["–ú–æ–¥—É–ª—å"] = filtered_assignments["module"]
        display_df["–£—Ä–æ–∫"] = filtered_assignments["lesson"]
        display_df["–ì—Ä—É–ø–ø–∞ –∑–∞–¥–∞–Ω–∏–π"] = filtered_assignments["gz"]
        display_df["–¢–∏–ø –∫–∞—Ä—Ç–æ—á–∫–∏"] = filtered_assignments["card_type"]
        display_df["–°—Ç–∞—Ç—É—Å"] = filtered_assignments["status"].map(status_labels)
        display_df["–û–±–Ω–æ–≤–ª–µ–Ω–æ"] = filtered_assignments["updated_at"]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞—Ä—Ç–æ—á–∫–∏
        display_df["–î–µ–π—Å—Ç–≤–∏—è"] = filtered_assignments.apply(
            lambda row: f"[–ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞—Ä—Ç–æ—á–∫–µ](?page=cards&card_id={int(row['card_id'])})", 
            axis=1
        )
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –±–µ–∑ –∫–æ–ª–æ–Ω–∫–∏ '–î–µ–π—Å—Ç–≤–∏—è'
        st.dataframe(display_df.drop(columns=["–î–µ–π—Å—Ç–≤–∏—è"]), use_container_width=True)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∫–∞—Ä—Ç–æ—á–∫–∞–º
        for _, row in assignments.iterrows():
            card_id = int(row['card_id'])
            if st.button(f"–ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞—Ä—Ç–æ—á–∫–µ {card_id}", key=f"my_tasks_nav_{card_id}"):
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã URL –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                st.query_params = {"page": "cards", "card_id": str(card_id)}
                st.rerun()