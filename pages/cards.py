# pages/cards.py
"""
–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ –æ–¥–Ω–æ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import numpy as np
from datetime import datetime, timedelta

import core
from components.utils import create_hierarchical_header, add_gz_links
from components.metrics import display_metrics_row, display_status_chart, display_risk_distribution

def page_cards(df: pd.DataFrame, eng):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏"""
    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º
    df_filtered = core.apply_filters(df)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    program_filter = st.session_state.get("filter_program")
    module_filter = st.session_state.get("filter_module")
    lesson_filter = st.session_state.get("filter_lesson")
    gz_filter = st.session_state.get("filter_gz")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞
    card_filter = st.session_state.get("filter_card_id")
    
    # –ï—Å–ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
    if not card_filter:
        # –°–æ–∑–¥–∞–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        create_hierarchical_header(
            levels=["program", "module", "lesson", "gz", "card"],
            values=[program_filter, module_filter, lesson_filter, gz_filter, "–í—ã–±–æ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏"]
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        if df_filtered.empty:
            hdr = " / ".join(filter(None, [st.session_state.get(f"filter_{c}") for c in core.FILTERS]))
            st.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤: {hdr}")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±–æ—Ä–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        st.info("üìå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫
        card_options = df_filtered.sort_values("risk", ascending=False)
        
        # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–µ –æ–ø—Ü–∏–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–∏—Å–∫–µ
        card_display_options = {}
        for _, card in card_options.iterrows():
            card_id = int(card['card_id'])
            risk_icon = "üî¥" if card['risk'] > 0.7 else ("üü†" if card['risk'] > 0.5 else ("üü°" if card['risk'] > 0.3 else "üü¢"))
            card_type = card['card_type'] if 'card_type' in card.index else "–ö–∞—Ä—Ç–æ—á–∫–∞"
            card_display_options[card_id] = f"{risk_icon} ID: {card_id} - {card_type} (–†–∏—Å–∫: {card['risk']:.2f})"
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—ã–±–æ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏
        selected_card_id = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
            options=list(card_display_options.keys()),
            format_func=lambda x: card_display_options[x],
            index=0 if card_options.shape[0] > 0 else None
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∞–Ω–∞–ª–∏–∑—É
        if st.button("üìä –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É", type="primary"):
            st.session_state["filter_card_id"] = selected_card_id
            st.rerun()
            
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å–æ –≤—Å–µ–º–∏ –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏
        st.subheader("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏")
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        cards_df = df_filtered[["card_id", "card_type", "status", "success_rate", 
                              "first_try_success_rate", "complaint_rate", 
                              "discrimination_avg", "total_attempts", "risk"]]
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∏—Å–∫—É –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        cards_df = cards_df.sort_values("risk", ascending=False)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∏, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã URL
        if "card_url" in df_filtered.columns:
            cards_df_display = cards_df.copy()
            cards_df_display["–ö–∞—Ä—Ç–æ—á–∫–∞"] = df_filtered.apply(
                lambda row: f"[ID:{int(row['card_id'])}]({row['card_url']})" if pd.notna(row['card_url']) else f"ID:{int(row['card_id'])}", 
                axis=1
            )
            
            # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–æ–ª–æ–Ω–æ–∫
            formatted_df = pd.DataFrame({
                "–ö–∞—Ä—Ç–æ—á–∫–∞": cards_df_display["–ö–∞—Ä—Ç–æ—á–∫–∞"],
                "–¢–∏–ø": cards_df_display["card_type"],
                "–°—Ç–∞—Ç—É—Å": cards_df_display["status"],
                "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å": cards_df_display["success_rate"].apply(lambda x: f"{x:.1%}"),
                "–£—Å–ø–µ—Ö 1-–π": cards_df_display["first_try_success_rate"].apply(lambda x: f"{x:.1%}"),
                "–ñ–∞–ª–æ–±—ã": cards_df_display["complaint_rate"].apply(lambda x: f"{x:.1%}"),
                "–î–∏—Å–∫—Ä.": cards_df_display["discrimination_avg"].apply(lambda x: f"{x:.2f}"),
                "–ü–æ–ø—ã—Ç–∫–∏": cards_df_display["total_attempts"].apply(lambda x: f"{int(x)}"),
                "–†–∏—Å–∫": cards_df_display["risk"].apply(lambda x: f"{x:.2f}")
            })
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
            st.dataframe(formatted_df, hide_index=True, use_container_width=True)
        else:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É
            formatted_cards = cards_df.style.format({
                "success_rate": "{:.1%}",
                "first_try_success_rate": "{:.1%}",
                "complaint_rate": "{:.1%}",
                "discrimination_avg": "{:.2f}",
                "risk": "{:.2f}"
            }).background_gradient(
                subset=["risk"],
                cmap="RdYlGn_r"
            )
            
            st.dataframe(formatted_cards, use_container_width=True)
        
        return
    
    # –ï—Å–ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∞ –≤—ã–±—Ä–∞–Ω–∞, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –µ—ë –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
    card_data = df_filtered[df_filtered["card_id"] == card_filter]
    
    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    if card_data.empty:
        st.error(f"–ö–∞—Ä—Ç–æ—á–∫–∞ —Å ID {card_filter} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–∞—Ö.")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–±—Ä–æ—Å–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
        if st.button("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ä—Ç–æ—á–∫–∏"):
            st.session_state["filter_card_id"] = None
            st.rerun()
        
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—Ä—Ç–æ—á–∫–µ
    card = card_data.iloc[0]
    
    # –°–æ–∑–¥–∞–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    create_hierarchical_header(
        levels=["program", "module", "lesson", "gz", "card"],
        values=[program_filter, module_filter, lesson_filter, gz_filter, f"ID: {int(card_filter)}"]
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ì–ó
    add_gz_links(card_data, gz_filter)
    
    # –°–æ–∑–¥–∞–µ–º —à–∞–ø–∫—É —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞—Ä—Ç–æ—á–∫–µ
    col1, col2, col3 = st.columns([2, 2, 1])
    
    with col1:
        st.subheader(f"üìù –ö–∞—Ä—Ç–æ—á–∫–∞ ID: {int(card_filter)}")
        st.markdown(f"**–¢–∏–ø –∫–∞—Ä—Ç–æ—á–∫–∏:** {card['card_type']}")
        st.markdown(f"**–°—Ç–∞—Ç—É—Å:** {card['status']}")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å URL –∫–∞—Ä—Ç–æ—á–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
        if "card_url" in card and pd.notna(card["card_url"]):
            st.markdown(f"**[üîó –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ]({card['card_url']})**")
    
    with col2:
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä–∏—Å–∫–∞
        risk_value = card['risk']
        risk_color = "red" if risk_value > 0.7 else ("orange" if risk_value > 0.5 else ("gold" if risk_value > 0.3 else "green"))
        risk_text = "–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π" if risk_value > 0.7 else ("–í—ã—Å–æ–∫–∏–π" if risk_value > 0.5 else ("–°—Ä–µ–¥–Ω–∏–π" if risk_value > 0.3 else "–ù–∏–∑–∫–∏–π"))
        
        st.markdown(f"### –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {risk_text}")
        
        # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä–∏—Å–∫–∞
        st.progress(risk_value, text=f"{risk_value:.2f}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∏—Å–∫–∞
        if risk_value > 0.7:
            st.error("‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞! –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")
        elif risk_value > 0.5:
            st.warning("‚ö†Ô∏è –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞! –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")
        elif risk_value > 0.3:
            st.info("‚ÑπÔ∏è –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞. –í–æ–∑–º–æ–∂–Ω—ã —É–ª—É—á—à–µ–Ω–∏—è.")
        else:
            st.success("‚úÖ –ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞. –ö–∞—Ä—Ç–æ—á–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ.")
    
    with col3:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        if st.button("üîô –ö —Å–ø–∏—Å–∫—É –∫–∞—Ä—Ç–æ—á–µ–∫"):
            st.session_state["filter_card_id"] = None
            st.rerun()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        current_status = card["status"]
        status_options = ["new", "in_work", "ready_for_qc", "done", "wont_fix"]
        
        new_status = st.selectbox(
            "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å:",
            options=status_options,
            index=status_options.index(current_status) if current_status in status_options else 0,
            key="change_status"
        )
        
        if new_status != current_status:
            if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", type="primary"):
                # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
                original_df = pd.DataFrame([card])
                edited_df = original_df.copy()
                edited_df.loc[0, "status"] = new_status
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                core.save_status_changes(original_df, edited_df, eng)
                st.success(f"–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_status}")
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
                st.rerun()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    st.markdown("---")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –≤–∏–¥–µ –±–æ–ª—å—à–∏—Ö –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    st.subheader("üìä –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏")
    
    # –°–æ–∑–¥–∞–µ–º 4 –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
    metrics_cols = st.columns(4)
    
    with metrics_cols[0]:
        success_rate = card["success_rate"]
        success_color = "normal" if success_rate >= 0.5 else "off"
        
        st.metric(
            "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ä–µ—à–µ–Ω–∏—è",
            f"{success_rate:.1%}",
            help="–ü—Ä–æ—Ü–µ–Ω—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, —É—Å–ø–µ—à–Ω–æ —Ä–µ—à–∏–≤—à–∏—Ö –∫–∞—Ä—Ç–æ—á–∫—É –æ—Ç —á–∏—Å–ª–∞ –ø—ã—Ç–∞–≤—à–∏—Ö—Å—è"
        )
        
        # –í–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        st.progress(success_rate, text=f"{success_rate:.1%}")
    
    with metrics_cols[1]:
        first_try_rate = card["first_try_success_rate"]
        
        st.metric(
            "–£—Å–ø–µ—Ö —Å 1-–π –ø–æ–ø—ã—Ç–∫–∏",
            f"{first_try_rate:.1%}",
            help="–ü—Ä–æ—Ü–µ–Ω—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, —Ä–µ—à–∏–≤—à–∏—Ö –∫–∞—Ä—Ç–æ—á–∫—É —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏"
        )
        
        # –í–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        st.progress(first_try_rate, text=f"{first_try_rate:.1%}")
    
    with metrics_cols[2]:
        complaint_rate = card["complaint_rate"]
        # –î–ª—è –∂–∞–ª–æ–± –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —à–∫–∞–ª—É (–º–µ–Ω—å—à–µ - –ª—É—á—à–µ)
        complaint_delta = None
        complaint_color = "inverse"
        
        st.metric(
            "–ü—Ä–æ—Ü–µ–Ω—Ç –∂–∞–ª–æ–±",
            f"{complaint_rate:.1%}",
            delta=complaint_delta,
            delta_color=complaint_color,
            help="–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–ø—ã—Ç–æ–∫, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Å—Ç—É–ø–∏–ª–∏ –∂–∞–ª–æ–±—ã"
        )
        
        # –í–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä (–∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
        st.progress(1 - complaint_rate, text=f"{complaint_rate:.1%}")
    
    with metrics_cols[3]:
        discrimination = card["discrimination_avg"]
        # –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ - 0.5
        discrimination_delta = f"{discrimination - 0.5:+.2f} –æ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ" if abs(discrimination - 0.5) > 0.1 else None
        discrimination_color = "normal" if 0.4 <= discrimination <= 0.6 else "off"
        
        st.metric(
            "–î–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç—å",
            f"{discrimination:.2f}",
            delta=discrimination_delta,
            delta_color=discrimination_color,
            help="–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∑–∞–¥–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–∞—Ç—å –∑–Ω–∞—é—â–∏—Ö –æ—Ç –Ω–µ–∑–Ω–∞—é—â–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ: 0.5)"
        )
        
        # –í–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫ 0.5)
        discrimination_norm = 1 - abs(discrimination - 0.5) * 2 # 0.5 -> 1.0, 0.0 –∏–ª–∏ 1.0 -> 0.0
        discrimination_norm = max(0, min(1, discrimination_norm)) # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç 0 –¥–æ 1
        st.progress(discrimination_norm, text=f"{discrimination:.2f}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä—É—é —Å—Ç—Ä–æ–∫—É –º–µ—Ç—Ä–∏–∫
    metrics_cols2 = st.columns(4)
    
    with metrics_cols2[0]:
        attempts = int(card["total_attempts"])
        
        st.metric(
            "–í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫",
            f"{attempts:,}",
            help="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ —Ä–µ—à–µ–Ω–∏—è —ç—Ç–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏"
        )
    
    with metrics_cols2[1]:
        attempted_share = card["attempted_share"]
        
        st.metric(
            "–î–æ–ª—è –ø—ã—Ç–∞–≤—à–∏—Ö—Å—è",
            f"{attempted_share:.1%}",
            help="–ü—Ä–æ—Ü–µ–Ω—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ø—ã—Ç–∞–ª–∏—Å—å —Ä–µ—à–∏—Ç—å —ç—Ç—É –∫–∞—Ä—Ç–æ—á–∫—É"
        )
        
        # –í–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        st.progress(attempted_share, text=f"{attempted_share:.1%}")
    
    with metrics_cols2[2]:
        if "complaints_total" in card:
            complaints_total = int(card["complaints_total"])
        else:
            complaints_total = int(card["complaint_rate"] * card["total_attempts"])
        
        st.metric(
            "–í—Å–µ–≥–æ –∂–∞–ª–æ–±",
            f"{complaints_total:,}",
            help="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∞–ª–æ–± –Ω–∞ —ç—Ç—É –∫–∞—Ä—Ç–æ—á–∫—É"
        )
    
    with metrics_cols2[3]:
        success_attempts_rate = card.get("success_attempts_rate", card["success_rate"])
        
        st.metric(
            "–£—Å–ø–µ—à–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫",
            f"{success_attempts_rate:.1%}",
            help="–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞ –ø–æ–ø—ã—Ç–æ–∫"
        )
        
        # –í–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        st.progress(success_attempts_rate, text=f"{success_attempts_rate:.1%}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    st.markdown("---")
    
    # –£–≥–ª—É–±–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ä–∏—Å–∫–∞
    st.subheader("üîç –£–≥–ª—É–±–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ä–∏—Å–∫–∞")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö —Ä–∏—Å–∫–∞
    df_risk_components = core.get_risk_components(card_data)
    risk_component = df_risk_components.iloc[0]
    
    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ä–º—É–ª–µ —Ä–∏—Å–∫–∞
    with st.expander("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–æ—Ä–º—É–ª–µ —Ä–∏—Å–∫–∞", expanded=False):
        st.markdown("""
        ### –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–∞

        –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é —Ñ–æ—Ä–º—É–ª—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–∞, —É—á–∏—Ç—ã–≤–∞—é—â—É—é –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:

        **–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∏—Å–∫–∞ –∏ –∏—Ö –≤–µ—Å–∞:**
        - **–û–±—â–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å (25%)**: –ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Ä–∏—Å–∫
        - **–£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏ (15%)**: –ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞ —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏–ª–∏ –Ω–µ—è—Å–Ω–æ—Å—Ç—å –∑–∞–¥–∞–Ω–∏—è
        - **–ñ–∞–ª–æ–±—ã (30%)**: –í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –∂–∞–ª–æ–± - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –ø—Ä–æ–±–ª–µ–º —Å –∑–∞–¥–∞–Ω–∏–µ–º
        - **–î–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç—å (20%)**: –ù–∏–∑–∫–∞—è –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –ø–ª–æ—Ö–æ —Ä–∞–∑–ª–∏—á–∞–µ—Ç –∑–Ω–∞—é—â–∏—Ö –æ—Ç –Ω–µ–∑–Ω–∞—é—â–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        - **–î–æ–ª—è –ø—ã—Ç–∞–≤—à–∏—Ö—Å—è (10%)**: –ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –ø—ã—Ç–∞–≤—à–∏—Ö—Å—è —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ, –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã

        **–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫—É—é –∑–Ω–∞—á–∏–º–æ—Å—Ç—å:**
        - –î–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ —Å –º–∞–ª—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–ø—ã—Ç–æ–∫ (<100) —Ä–∏—Å–∫ —Å–º–µ—â–∞–µ—Ç—Å—è –∫ 0.5 (–Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ—Å—Ç—å)
        - –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å –ª–æ–∂–Ω—ã—Ö –≤—ã–≤–æ–¥–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        
        **–§–æ—Ä–º—É–ª–∞:**
        ```
        raw_risk = 0.25*(1-success_rate) + 0.15*(1-first_try_success_rate) + 0.30*min(complaint_rate*3, 1) + 0.20*(1-discrimination_avg) + 0.10*(1-attempted_share)
        
        confidence_factor = min(total_attempts/100, 1.0)
        
        adjusted_risk = raw_risk * confidence_factor + 0.5 * (1-confidence_factor)
        ```
        
        **–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–∏—Å–∫–∞:**
        - **< 0.3**: –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫ - —Ö–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞—é—â–∏–µ –∑–∞–¥–∞–Ω–∏—è
        - **0.3 - 0.5**: –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫ - –≤–æ–∑–º–æ–∂–Ω—ã –Ω–µ–±–æ–ª—å—à–∏–µ —É–ª—É—á—à–µ–Ω–∏—è
        - **0.5 - 0.7**: –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ
        - **> 0.7**: –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ - —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å—Ä–æ—á–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞
        """)
    
    # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ä–∏—Å–∫–∞
    # 1. –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –≤–∫–ª–∞–¥–∞ –∫–∞–∂–¥–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –≤ —Ä–∏—Å–∫
    col1, col2 = st.columns([2, 3])
    
    with col1:
        # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
        risk_components_df = pd.DataFrame({
            "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç": [
                "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å", 
                "–£—Å–ø–µ—Ö —Å 1-–π –ø–æ–ø—ã—Ç–∫–∏", 
                "–ñ–∞–ª–æ–±—ã", 
                "–î–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç—å", 
                "–î–æ–ª—è –ø—ã—Ç–∞–≤—à–∏—Ö—Å—è"
            ],
            "–í–∫–ª–∞–¥": [
                risk_component["contrib_success"],
                risk_component["contrib_first_try"],
                risk_component["contrib_complaints"],
                risk_component["contrib_discrimination"],
                risk_component["contrib_attempted"]
            ],
            "–í–µ—Å": [0.25, 0.15, 0.30, 0.20, 0.10],
            "–ó–Ω–∞—á–µ–Ω–∏–µ": [
                risk_component["risk_success"],
                risk_component["risk_first_try"],
                risk_component["risk_complaints"],
                risk_component["risk_discrimination"],
                risk_component["risk_attempted"]
            ]
        })
        
        # –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
        fig = px.pie(
            risk_components_df,
            values="–í–∫–ª–∞–¥",
            names="–ö–æ–º–ø–æ–Ω–µ–Ω—Ç",
            title="–í–∫–ª–∞–¥ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ —Ä–∏—Å–∫",
            color="–ö–æ–º–ø–æ–Ω–µ–Ω—Ç",
            color_discrete_sequence=["#ff9040", "#ffbf80", "#ff6666", "#9370db", "#66c2a5"],
            hover_data=["–í–µ—Å", "–ó–Ω–∞—á–µ–Ω–∏–µ"]
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
        fig.update_traces(
            textposition='inside',
            textinfo='percent',
            hovertemplate="<b>%{label}</b><br>–í–∫–ª–∞–¥: %{value:.3f}<br>–í–µ—Å: %{customdata[0]:.2f}<br>–ó–Ω–∞—á–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: %{customdata[1]:.2f}"
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–æ–ª–±—á–∞—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ä–∏—Å–∫–∞
        fig = px.bar(
            risk_components_df,
            x="–ö–æ–º–ø–æ–Ω–µ–Ω—Ç",
            y="–ó–Ω–∞—á–µ–Ω–∏–µ",
            color="–ö–æ–º–ø–æ–Ω–µ–Ω—Ç",
            color_discrete_sequence=["#ff9040", "#ffbf80", "#ff6666", "#9370db", "#66c2a5"],
            title="–ó–Ω–∞—á–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ä–∏—Å–∫–∞",
            hover_data=["–í–µ—Å", "–í–∫–ª–∞–¥"]
        )
        
        # –£–ª—É—á—à–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏
        fig.update_traces(
            hovertemplate="<b>%{x}</b><br>–ó–Ω–∞—á–µ–Ω–∏–µ: %{y:.2f}<br>–í–µ—Å: %{customdata[0]:.2f}<br>–í–∫–ª–∞–¥ –≤ —Ä–∏—Å–∫: %{customdata[1]:.3f}"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è 0.5 (–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ)
        fig.add_hline(y=0.5, line_dash="dash", line_color="gray", 
                    annotation_text="–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å", annotation_position="left")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—Ö–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É (1.0)
        fig.add_hline(y=1.0, line_dash="dot", line_color="red")
        
        st.plotly_chart(fig, use_container_width=True)
    
    # –û–±—ä—è—Å–Ω—è–µ–º –≤–∫–ª–∞–¥ –∫–∞–∂–¥–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –≤ —Ä–∏—Å–∫
    st.subheader("–ê–Ω–∞–ª–∏–∑ –≤–∫–ª–∞–¥–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ —Ä–∏—Å–∫")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º
    risk_analysis = []
    
    # –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
    success_risk = risk_component["risk_success"]
    success_contrib = risk_component["contrib_success"]
    success_weight = risk_component["weight_success"]
    
    success_text = ""
    if success_risk > 0.7:
        success_text = "–û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ä–µ—à–µ–Ω–∏—è - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞!"
    elif success_risk > 0.5:
        success_text = "–ù–∏–∑–∫–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ä–µ—à–µ–Ω–∏—è - —Å–µ—Ä—å–µ–∑–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞"
    elif success_risk > 0.3:
        success_text = "–£–º–µ—Ä–µ–Ω–Ω–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ä–µ—à–µ–Ω–∏—è - –≤–æ–∑–º–æ–∂–Ω—ã —É–ª—É—á—à–µ–Ω–∏—è"
    else:
        success_text = "–•–æ—Ä–æ—à–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ä–µ—à–µ–Ω–∏—è - –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤ –Ω–æ—Ä–º–µ"
    
    success_raw_percent = (1 - card["success_rate"]) * 100
    risk_analysis.append({
        "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç": "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å",
        "–§–æ—Ä–º—É–ª–∞": f"1 - {card['success_rate']:.2%} = {success_risk:.2f}",
        "–í–µ—Å": f"{success_weight:.2f}",
        "–í–∫–ª–∞–¥": f"{success_contrib:.3f}",
        "–î–æ–ª—è –≤ —Ä–∏—Å–∫–µ": f"{100 * success_contrib / risk_component['raw_risk']:.1f}%",
        "–ê–Ω–∞–ª–∏–∑": f"{success_text} (–Ω–µ—É—Å–ø–µ—à–Ω–æ —Ä–µ—à–∞—é—Ç {success_raw_percent:.1f}% —Å—Ç—É–¥–µ–Ω—Ç–æ–≤)"
    })
    
    # –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—Ö–∞ —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏
    first_try_risk = risk_component["risk_first_try"]
    first_try_contrib = risk_component["contrib_first_try"]
    first_try_weight = risk_component["weight_first_try"]
    
    first_try_text = ""
    if first_try_risk > 0.7:
        first_try_text = "–û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π —É—Å–ø–µ—Ö —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏ - –∑–∞–¥–∞–Ω–∏–µ –Ω–µ–∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ"
    elif first_try_risk > 0.5:
        first_try_text = "–ù–∏–∑–∫–∏–π —É—Å–ø–µ—Ö —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏ - –≤–æ–∑–º–æ–∂–Ω–æ, –∑–∞–¥–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–Ω—è—Ç–Ω–æ"
    elif first_try_risk > 0.3:
        first_try_text = "–£–º–µ—Ä–µ–Ω–Ω—ã–π —É—Å–ø–µ—Ö —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏ - –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω—ã–º"
    else:
        first_try_text = "–•–æ—Ä–æ—à–∏–π —É—Å–ø–µ—Ö —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏ - –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤ –Ω–æ—Ä–º–µ"
    
    first_try_raw_percent = (1 - card["first_try_success_rate"]) * 100
    risk_analysis.append({
        "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç": "–£—Å–ø–µ—Ö —Å 1-–π –ø–æ–ø—ã—Ç–∫–∏",
        "–§–æ—Ä–º—É–ª–∞": f"1 - {card['first_try_success_rate']:.2%} = {first_try_risk:.2f}",
        "–í–µ—Å": f"{first_try_weight:.2f}",
        "–í–∫–ª–∞–¥": f"{first_try_contrib:.3f}",
        "–î–æ–ª—è –≤ —Ä–∏—Å–∫–µ": f"{100 * first_try_contrib / risk_component['raw_risk']:.1f}%",
        "–ê–Ω–∞–ª–∏–∑": f"{first_try_text} (–Ω–µ —Ä–µ—à–∞—é—Ç —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏ {first_try_raw_percent:.1f}% —Å—Ç—É–¥–µ–Ω—Ç–æ–≤)"
    })
    
    # –ê–Ω–∞–ª–∏–∑ –∂–∞–ª–æ–±
    complaints_risk = risk_component["risk_complaints"]
    complaints_contrib = risk_component["contrib_complaints"]
    complaints_weight = risk_component["weight_complaints"]
    
    complaints_text = ""
    if complaints_risk > 0.7:
        complaints_text = "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∂–∞–ª–æ–± - —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ!"
    elif complaints_risk > 0.5:
        complaints_text = "–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∂–∞–ª–æ–± - —Å–µ—Ä—å–µ–∑–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞"
    elif complaints_risk > 0.3:
        complaints_text = "–ü–æ–≤—ã—à–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∂–∞–ª–æ–± - —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ"
    else:
        complaints_text = "–ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∂–∞–ª–æ–± - –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤ –Ω–æ—Ä–º–µ"
    
    complaints_raw_percent = card["complaint_rate"] * 100
    risk_analysis.append({
        "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç": "–ñ–∞–ª–æ–±—ã",
        "–§–æ—Ä–º—É–ª–∞": f"min({card['complaint_rate']:.2%} * 3, 1) = {complaints_risk:.2f}",
        "–í–µ—Å": f"{complaints_weight:.2f}",
        "–í–∫–ª–∞–¥": f"{complaints_contrib:.3f}",
        "–î–æ–ª—è –≤ —Ä–∏—Å–∫–µ": f"{100 * complaints_contrib / risk_component['raw_risk']:.1f}%",
        "–ê–Ω–∞–ª–∏–∑": f"{complaints_text} (–∂–∞–ª–æ–±—ã –Ω–∞ {complaints_raw_percent:.1f}% –ø–æ–ø—ã—Ç–æ–∫)"
    })
    
    # –ê–Ω–∞–ª–∏–∑ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
    discrimination_risk = risk_component["risk_discrimination"]
    discrimination_contrib = risk_component["contrib_discrimination"]
    discrimination_weight = risk_component["weight_discrimination"]
    
    discrimination_text = ""
    if abs(card["discrimination_avg"] - 0.5) > 0.3:
        discrimination_text = "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç—å—é - –∑–∞–¥–∞–Ω–∏–µ –Ω–µ —Ä–∞–∑–ª–∏—á–∞–µ—Ç –∑–Ω–∞—é—â–∏—Ö –æ—Ç –Ω–µ–∑–Ω–∞—é—â–∏—Ö"
    elif abs(card["discrimination_avg"] - 0.5) > 0.2:
        discrimination_text = "–°–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç—å—é - –∑–∞–¥–∞–Ω–∏–µ –ø–ª–æ—Ö–æ —Ä–∞–∑–ª–∏—á–∞–µ—Ç –∑–Ω–∞—é—â–∏—Ö –æ—Ç –Ω–µ–∑–Ω–∞—é—â–∏—Ö"
    elif abs(card["discrimination_avg"] - 0.5) > 0.1:
        discrimination_text = "–£–º–µ—Ä–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç—å—é - –∑–∞–¥–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ö–æ—Ä–æ—à–æ —Ä–∞–∑–ª–∏—á–∞–µ—Ç –∑–Ω–∞—é—â–∏—Ö –æ—Ç –Ω–µ–∑–Ω–∞—é—â–∏—Ö"
    else:
        discrimination_text = "–•–æ—Ä–æ—à–∞—è –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç—å - –∑–∞–¥–∞–Ω–∏–µ —Ö–æ—Ä–æ—à–æ —Ä–∞–∑–ª–∏—á–∞–µ—Ç –∑–Ω–∞—é—â–∏—Ö –æ—Ç –Ω–µ–∑–Ω–∞—é—â–∏—Ö"
    
    risk_analysis.append({
        "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç": "–î–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç—å",
        "–§–æ—Ä–º—É–ª–∞": f"1 - {card['discrimination_avg']:.2f} = {discrimination_risk:.2f}",
        "–í–µ—Å": f"{discrimination_weight:.2f}",
        "–í–∫–ª–∞–¥": f"{discrimination_contrib:.3f}",
        "–î–æ–ª—è –≤ —Ä–∏—Å–∫–µ": f"{100 * discrimination_contrib / risk_component['raw_risk']:.1f}%",
        "–ê–Ω–∞–ª–∏–∑": f"{discrimination_text} (–∑–Ω–∞—á–µ–Ω–∏–µ: {card['discrimination_avg']:.2f}, –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ: 0.5)"
    })
    
    # –ê–Ω–∞–ª–∏–∑ –¥–æ–ª–∏ –ø—ã—Ç–∞–≤—à–∏—Ö—Å—è
    attempted_risk = risk_component["risk_attempted"]
    attempted_contrib = risk_component["contrib_attempted"]
    attempted_weight = risk_component["weight_attempted"]
    
    attempted_text = ""
    if attempted_risk > 0.7:
        attempted_text = "–û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è –¥–æ–ª—è –ø—ã—Ç–∞–≤—à–∏—Ö—Å—è - –º–Ω–æ–≥–∏–µ –ø—Ä–æ–ø—É—Å–∫–∞—é—Ç –∑–∞–¥–∞–Ω–∏–µ"
    elif attempted_risk > 0.5:
        attempted_text = "–ù–∏–∑–∫–∞—è –¥–æ–ª—è –ø—ã—Ç–∞–≤—à–∏—Ö—Å—è - –∑–∞–¥–∞–Ω–∏–µ —á–∞—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞—é—Ç"
    elif attempted_risk > 0.3:
        attempted_text = "–£–º–µ—Ä–µ–Ω–Ω–∞—è –¥–æ–ª—è –ø—ã—Ç–∞–≤—à–∏—Ö—Å—è - –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å—Ç—É–¥–µ–Ω—Ç—ã –ø—Ä–æ–ø—É—Å–∫–∞—é—Ç –∑–∞–¥–∞–Ω–∏–µ"
    else:
        attempted_text = "–•–æ—Ä–æ—à–∞—è –¥–æ–ª—è –ø—ã—Ç–∞–≤—à–∏—Ö—Å—è - –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤ –Ω–æ—Ä–º–µ"
    
    attempted_raw_percent = card["attempted_share"] * 100
    risk_analysis.append({
        "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç": "–î–æ–ª—è –ø—ã—Ç–∞–≤—à–∏—Ö—Å—è",
        "–§–æ—Ä–º—É–ª–∞": f"1 - {card['attempted_share']:.2%} = {attempted_risk:.2f}",
        "–í–µ—Å": f"{attempted_weight:.2f}",
        "–í–∫–ª–∞–¥": f"{attempted_contrib:.3f}",
        "–î–æ–ª—è –≤ —Ä–∏—Å–∫–µ": f"{100 * attempted_contrib / risk_component['raw_risk']:.1f}%",
        "–ê–Ω–∞–ª–∏–∑": f"{attempted_text} (–ø—ã—Ç–∞—é—Ç—Å—è —Ä–µ—à–∏—Ç—å {attempted_raw_percent:.1f}% —Å—Ç—É–¥–µ–Ω—Ç–æ–≤)"
    })
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–∏—Å–∫ —Å —É—á–µ—Ç–æ–º —Ñ–∞–∫—Ç–æ—Ä–∞ –¥–æ–≤–µ—Ä–∏—è
    confidence_factor = risk_component["confidence_factor"]
    raw_risk = risk_component["raw_risk"]
    adjusted_risk = risk_component["adjusted_risk"]
    
    confidence_text = ""
    if confidence_factor < 0.3:
        confidence_text = "–û—á–µ–Ω—å –Ω–∏–∑–∫–æ–µ –¥–æ–≤–µ—Ä–∏–µ –∫ –º–µ—Ç—Ä–∏–∫–∞–º –∏–∑-–∑–∞ –º–∞–ª–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫"
    elif confidence_factor < 0.6:
        confidence_text = "–ù–∏–∑–∫–æ–µ –¥–æ–≤–µ—Ä–∏–µ –∫ –º–µ—Ç—Ä–∏–∫–∞–º –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫"
    elif confidence_factor < 0.9:
        confidence_text = "–£–º–µ—Ä–µ–Ω–Ω–æ–µ –¥–æ–≤–µ—Ä–∏–µ –∫ –º–µ—Ç—Ä–∏–∫–∞–º"
    else:
        confidence_text = "–í—ã—Å–æ–∫–æ–µ –¥–æ–≤–µ—Ä–∏–µ –∫ –º–µ—Ç—Ä–∏–∫–∞–º"
    
    risk_analysis.append({
        "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç": "–ò—Ç–æ–≥–æ–≤—ã–π —Ä–∏—Å–∫",
        "–§–æ—Ä–º—É–ª–∞": f"{raw_risk:.2f} * {confidence_factor:.2f} + 0.5 * (1 - {confidence_factor:.2f}) = {adjusted_risk:.2f}",
        "–í–µ—Å": "1.00",
        "–í–∫–ª–∞–¥": f"{adjusted_risk:.3f}",
        "–î–æ–ª—è –≤ —Ä–∏—Å–∫–µ": "100.0%",
        "–ê–Ω–∞–ª–∏–∑": f"{confidence_text} (–ø–æ–ø—ã—Ç–æ–∫: {int(card['total_attempts'])}, —Ñ–∞–∫—Ç–æ—Ä –¥–æ–≤–µ—Ä–∏—è: {confidence_factor:.2f})"
    })
    
    # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –∞–Ω–∞–ª–∏–∑–∞
    risk_analysis_df = pd.DataFrame(risk_analysis)
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    st.dataframe(risk_analysis_df, use_container_width=True, hide_index=True)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —Ä–∏—Å–∫–∞ –Ω–∞ —Ñ–∞–∫—Ç–æ—Ä –¥–æ–≤–µ—Ä–∏—è
    col1, col2 = st.columns(2)
    
    with col1:
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∏–π –∏—Ç–æ–≥–æ–≤–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞
        fig = go.Figure()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—ã—Ä–æ–π —Ä–∏—Å–∫
        fig.add_trace(go.Bar(
            x=["–°—ã—Ä–æ–π —Ä–∏—Å–∫"],
            y=[raw_risk],
            name="–°—ã—Ä–æ–π —Ä–∏—Å–∫",
            marker_color="#ff7f7f"
        ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É (—Å–º–µ—â–µ–Ω–∏–µ –∫ 0.5)
        correction = adjusted_risk - raw_risk
        fig.add_trace(go.Bar(
            x=["–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞"],
            y=[abs(correction)],
            name="–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞",
            marker_color="#ffe090" if correction > 0 else "#90d2ff"
        ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–∏—Å–∫ –∫–∞–∫ –ª–∏–Ω–∏—é
        fig.add_trace(go.Scatter(
            x=["–°—ã—Ä–æ–π —Ä–∏—Å–∫", "–ò—Ç–æ–≥–æ–≤—ã–π —Ä–∏—Å–∫"],
            y=[raw_risk, adjusted_risk],
            mode="lines+markers",
            name="–ò—Ç–æ–≥–æ–≤—ã–π —Ä–∏—Å–∫",
            line=dict(color="black", width=2)
        ))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–∫–µ—Ç–∞
        fig.update_layout(
            title="–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ä–∏—Å–∫–∞ —Å —É—á–µ—Ç–æ–º —Ñ–∞–∫—Ç–æ—Ä–∞ –¥–æ–≤–µ—Ä–∏—è",
            yaxis_title="–ó–Ω–∞—á–µ–Ω–∏–µ —Ä–∏—Å–∫–∞",
            barmode='stack' if correction > 0 else 'group'
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É –¥–æ–≤–µ—Ä–∏—è –∫ –º–µ—Ç—Ä–∏–∫–∞–º
        fig = go.Figure(go.Indicator(
            mode="gauge+number",
            value=confidence_factor,
            title={'text': "–§–∞–∫—Ç–æ—Ä –¥–æ–≤–µ—Ä–∏—è –∫ –º–µ—Ç—Ä–∏–∫–∞–º"},
            gauge={
                'axis': {'range': [0, 1]},
                'steps': [
                    {'range': [0, 0.3], 'color': "#ff7f7f"},
                    {'range': [0.3, 0.6], 'color': "#ffbf7f"},
                    {'range': [0.6, 0.9], 'color': "#ffff7f"},
                    {'range': [0.9, 1], 'color': "#7fff7f"}
                ],
                'threshold': {
                    'line': {'color': "black", 'width': 2},
                    'thickness': 0.8,
                    'value': confidence_factor
                }
            }
        ))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–∫–µ—Ç–∞
        fig.update_layout(
            title="–î–æ–≤–µ—Ä–∏–µ –∫ –º–µ—Ç—Ä–∏–∫–∞–º (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç —á–∏—Å–ª–∞ –ø–æ–ø—ã—Ç–æ–∫)"
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    st.markdown("---")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
    st.subheader("üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∏–±–æ–ª—å—à—É—é –ø—Ä–æ–±–ª–µ–º—É
    max_contrib_component = max(risk_analysis[:-1], key=lambda x: float(x["–í–∫–ª–∞–¥"].replace(',', '.')))
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recommendations = []
    
    # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞
    if adjusted_risk > 0.7:
        st.error("‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞! –ö–∞—Ä—Ç–æ—á–∫–∞ —Ç—Ä–µ–±—É–µ—Ç —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –¥–æ—Ä–∞–±–æ—Ç–∫–∏.")
    elif adjusted_risk > 0.5:
        st.warning("‚ö†Ô∏è –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞! –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏.")
    elif adjusted_risk > 0.3:
        st.info("‚ÑπÔ∏è –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞. –í–æ–∑–º–æ–∂–Ω—ã —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏.")
    else:
        st.success("‚úÖ –ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞. –ö–∞—Ä—Ç–æ—á–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ.")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
    # –ü—Ä–æ–±–ª–µ–º—ã —Å —É—Å–ø–µ—à–Ω–æ—Å—Ç—å—é
    if success_risk > 0.5:
        recommendations.append({
            "–ü—Ä–æ–±–ª–µ–º–∞": "–ù–∏–∑–∫–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ä–µ—à–µ–Ω–∏—è",
            "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è": "–£–ø—Ä–æ—Å—Ç–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É –Ω–∞ —è—Å–Ω–æ—Å—Ç—å.",
            "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç": "–í—ã—Å–æ–∫–∏–π" if success_contrib > 0.1 else "–°—Ä–µ–¥–Ω–∏–π"
        })
    
    # –ü—Ä–æ–±–ª–µ–º—ã —Å —É—Å–ø–µ—Ö–æ–º —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏
    if first_try_risk > 0.5:
        recommendations.append({
            "–ü—Ä–æ–±–ª–µ–º–∞": "–ù–∏–∑–∫–∏–π —É—Å–ø–µ—Ö —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏",
            "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è": "–£–ª—É—á—à–∏—Ç—å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É –∑–∞–¥–∞–Ω–∏—è. –í–æ–∑–º–æ–∂–Ω–æ, –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É –∏–ª–∏ –ø—Ä–∏–º–µ—Ä —Ä–µ—à–µ–Ω–∏—è.",
            "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç": "–í—ã—Å–æ–∫–∏–π" if first_try_contrib > 0.1 else "–°—Ä–µ–¥–Ω–∏–π"
        })
    
    # –ü—Ä–æ–±–ª–µ–º—ã —Å –∂–∞–ª–æ–±–∞–º–∏
    if complaints_risk > 0.3:
        recommendations.append({
            "–ü—Ä–æ–±–ª–µ–º–∞": "–ü–æ–≤—ã—à–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∂–∞–ª–æ–±",
            "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏—á–∏–Ω—ã –∂–∞–ª–æ–±. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤, —É–ª—É—á—à–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –≤–≤–æ–¥–∞.",
            "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç": "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π" if complaints_risk > 0.7 else ("–í—ã—Å–æ–∫–∏–π" if complaints_risk > 0.5 else "–°—Ä–µ–¥–Ω–∏–π")
        })
    
    # –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç—å—é
    if abs(card["discrimination_avg"] - 0.5) > 0.2:
        if card["discrimination_avg"] < 0.3:
            recommendations.append({
                "–ü—Ä–æ–±–ª–µ–º–∞": "–ù–∏–∑–∫–∞—è –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç—å",
                "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è": "–ó–∞–¥–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω–æ–µ –∏–ª–∏ –∑–∞–ø—É—Ç–∞–Ω–Ω–æ–µ. –£–ø—Ä–æ—Å—Ç–∏—Ç—å –∏–ª–∏ –±–æ–ª–µ–µ —á–µ—Ç–∫–æ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å.",
                "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç": "–í—ã—Å–æ–∫–∏–π" if discrimination_contrib > 0.1 else "–°—Ä–µ–¥–Ω–∏–π"
            })
        elif card["discrimination_avg"] > 0.7:
            recommendations.append({
                "–ü—Ä–æ–±–ª–µ–º–∞": "–°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç—å",
                "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è": "–ó–∞–¥–∞–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç—ã–º –∏–ª–∏ –æ—á–µ–≤–∏–¥–Ω—ã–º. –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É—Å–ª–æ–∂–Ω–µ–Ω–∏—è.",
                "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç": "–°—Ä–µ–¥–Ω–∏–π"
            })
    
    # –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ–ª–µ–π –ø—ã—Ç–∞–≤—à–∏—Ö—Å—è
    if attempted_risk > 0.5:
        recommendations.append({
            "–ü—Ä–æ–±–ª–µ–º–∞": "–ù–∏–∑–∫–∞—è –¥–æ–ª—è –ø—ã—Ç–∞–≤—à–∏—Ö—Å—è —Ä–µ—à–∏—Ç—å",
            "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è": "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –≤ —É—Ä–æ–∫–µ. –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç—É–¥–µ–Ω—Ç—ã –ø—Ä–æ–ø—É—Å–∫–∞—é—Ç –µ–≥–æ –∏–ª–∏ –æ–Ω–æ –Ω–µ –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç –≤–Ω–∏–º–∞–Ω–∏–µ.",
            "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç": "–í—ã—Å–æ–∫–∏–π" if attempted_contrib > 0.05 else "–°—Ä–µ–¥–Ω–∏–π"
        })
    
    # –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ–≤–µ—Ä–∏–µ–º –∫ –º–µ—Ç—Ä–∏–∫–∞–º
    if confidence_factor < 0.5:
        recommendations.append({
            "–ü—Ä–æ–±–ª–µ–º–∞": "–ù–∏–∑–∫–æ–µ –¥–æ–≤–µ—Ä–∏–µ –∫ –º–µ—Ç—Ä–∏–∫–∞–º",
            "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ –Ω–∞–±–æ—Ä–∞ –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫.",
            "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π"
        })
    
    # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π, –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤
    if not recommendations:
        st.success("üëç –ö–∞—Ä—Ç–æ—á–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ, –æ—Å–æ–±—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–µ—Ç!")
    else:
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations_df = pd.DataFrame(recommendations)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        priority_order = {
            "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π": 0,
            "–í—ã—Å–æ–∫–∏–π": 1,
            "–°—Ä–µ–¥–Ω–∏–π": 2,
            "–ù–∏–∑–∫–∏–π": 3,
            "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π": 4
        }
        
        recommendations_df["–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞"] = recommendations_df["–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç"].map(priority_order)
        recommendations_df = recommendations_df.sort_values("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞").drop("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞", axis=1)
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        st.dataframe(recommendations_df, use_container_width=True, hide_index=True)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    st.markdown("---")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ä—Ç–æ—á–µ–∫", key="bottom_back"):
            st.session_state["filter_card_id"] = None
            st.rerun()
    
    with col2:
        if "card_url" in card and pd.notna(card["card_url"]):
            st.markdown(f"[üîó –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ]({card['card_url']})")
    
    with col3:
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –¥—Ä—É–≥–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ –≥—Ä—É–ø–ø—ã –∑–∞–¥–∞–Ω–∏–π
        next_card = df_filtered[df_filtered['card_id'] != card_filter].sample(1)['card_id'].iloc[0] if len(df_filtered) > 1 else None
        
        if next_card:
            if st.button(f"üîÑ –ü–µ—Ä–µ–π—Ç–∏ –∫ –¥—Ä—É–≥–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ (ID: {int(next_card)})", key="next_card"):
                st.session_state["filter_card_id"] = next_card
                st.rerun()