# pages/cards.py
"""
–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import numpy as np
from sqlalchemy import text

import core
from components.utils import create_hierarchical_header, add_gz_links, add_card_links
from components.metrics import display_metrics_row, display_status_chart, display_risk_distribution
from components.charts import display_risk_bar_chart, display_metrics_comparison, display_success_complaints_chart

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—Ä—Ç–æ—á–∫–µ
def display_card_details(card_data):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–æ—á–∫–µ
    
    Args:
        card_data: Series —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
    """
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    col1, col2 = st.columns([3, 2])
    
    with col1:
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ä—Ç–æ—á–∫–µ
        st.markdown("### –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ª–æ—Å—Ç–∏
        trickiness_level = card_data.get("trickiness_level", 0)
        trickiness_text = "–ù–µ—Ç"
        trickiness_color = "gray"
        
        if trickiness_level == 1:
            trickiness_text = "–ù–∏–∑–∫–∏–π"
            trickiness_color = "yellow"
        elif trickiness_level == 2:
            trickiness_text = "–°—Ä–µ–¥–Ω–∏–π"
            trickiness_color = "orange"
        elif trickiness_level == 3:
            trickiness_text = "–í—ã—Å–æ–∫–∏–π"
            trickiness_color = "red"
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—Ä—Ç–æ—á–∫–µ
        card_info = {
            "ID –∫–∞—Ä—Ç–æ—á–∫–∏": int(card_data["card_id"]),
            "–¢–∏–ø –∫–∞—Ä—Ç–æ—á–∫–∏": card_data["card_type"] if "card_type" in card_data else "–ù–µ —É–∫–∞–∑–∞–Ω",
            "–ü—Ä–æ–≥—Ä–∞–º–º–∞": card_data["program"],
            "–ú–æ–¥—É–ª—å": card_data["module"],
            "–£—Ä–æ–∫": card_data["lesson"],
            "–ì—Ä—É–ø–ø–∞ –∑–∞–¥–∞–Ω–∏–π": card_data["gz"],
            "–°—Ç–∞—Ç—É—Å": card_data["status"],
            "–¢–µ–∫—É—â–∏–π —Ä–∏—Å–∫": f"{card_data['risk']:.3f}"
        }
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        for key, value in card_info.items():
            st.markdown(f"**{key}:** {value}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å
        if "card_url" in card_data and pd.notna(card_data["card_url"]):
            st.markdown(f"[üîó –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ]({card_data['card_url']})")
    
    with col2:
        # –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
        st.markdown("### –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Å –ø–æ–¥—Ö–æ–¥—è—â–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        metrics = {
            "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å": f"{card_data['success_rate']:.1%}",
            "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏": f"{card_data['first_try_success_rate']:.1%}",
            "–†–∞–∑–Ω–∏—Ü–∞": f"{card_data['success_rate'] - card_data['first_try_success_rate']:.1%}",
            "–£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ª–æ—Å—Ç–∏": f"<span style='color:{trickiness_color};font-weight:bold;'>{trickiness_text}</span>",
            "–î–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç—å": f"{card_data['discrimination_avg']:.3f}",
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∞–ª–æ–±": f"{card_data.get('complaints_total', card_data['complaint_rate'] * card_data['total_attempts']):.0f}",
            "–î–æ–ª—è –∂–∞–ª–æ–±": f"{card_data['complaint_rate']:.1%}",
            "–î–æ–ª—è –ø—ã—Ç–∞–≤—à–∏—Ö—Å—è": f"{card_data['attempted_share']:.1%}",
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫": f"{card_data['total_attempts']:.0f}"
        }
        
        for key, value in metrics.items():
            if key == "–£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ª–æ—Å—Ç–∏":
                st.markdown(f"**{key}:** {value}", unsafe_allow_html=True)
            else:
                st.markdown(f"**{key}:** {value}")

def display_course_links(card_id, engine, card_df):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–∏–≤—è–∑–∫—É –∫–∞—Ä—Ç–æ—á–∫–∏ –∫ –∫—É—Ä—Å–∞–º, —É—Ä–æ–∫–∞–º –∏ –≥—Ä—É–ø–ø–∞–º –∑–∞–¥–∞–Ω–∏–π
    
    Args:
        card_id: ID –∫–∞—Ä—Ç–æ—á–∫–∏
        engine: SQLAlchemy engine –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
        card_df: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–∞—Ä—Ç–æ—á–µ–∫
    """
    st.markdown("## –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –∫—É—Ä—Å–∞–º")
    
    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è URL-–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
    def create_query_params(params_dict):
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–æ–∫—É URL-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ —Å–ª–æ–≤–∞—Ä—è"""
        import urllib.parse
        return urllib.parse.urlencode(params_dict)
    
    try:
        # –ó–∞–ø—Ä–æ—Å –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã card_assignments
        schema_query = text("""
            SELECT column_name 
            FROM information_schema.columns 
            WHERE table_name = 'card_assignments'
        """)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        with engine.connect() as conn:
            schema_result = conn.execute(schema_query)
            columns = [row[0] for row in schema_result]
            
            st.write("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ card_assignments:", columns)
            
            # –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–∏–≤—è–∑–∫–µ –∫–∞—Ä—Ç–æ—á–∫–∏
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º DISTINCT –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–≤—è–∑–æ–∫
            query = text("""
                SELECT DISTINCT card_id, status, user_id, assigned_at, updated_at
                FROM card_assignments 
                WHERE card_id = :card_id
            """)
            
            result = conn.execute(query, {"card_id": card_id})
            assignments = [row._asdict() for row in result]
            
            if assignments:
                st.markdown("### –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è—Ö")
                for assignment in assignments:
                    st.markdown(f"- **–°—Ç–∞—Ç—É—Å**: {assignment['status']}")
                    st.markdown(f"  **–î–∞—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è**: {assignment['assigned_at']}")
                    st.markdown(f"  **–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ**: {assignment['updated_at']}")
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ —Ç–∞–±–ª–∏—Ü–µ card_assignments: {str(e)}")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏–≤—è–∑–æ–∫
    try:
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å –¥–∞–Ω–Ω—ã–º card_id
        matching_cards = card_df[card_df["card_id"] == int(card_id)]
        
        if matching_cards.empty:
            st.info("–í DataFrame –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–∏–≤—è–∑–∫–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∫ –∫—É—Ä—Å–∞–º.")
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ, –º–æ–¥—É–ª—é, —É—Ä–æ–∫—É
        key_columns = ['program', 'module', 'lesson']
        if all(col in matching_cards.columns for col in key_columns):
            grouped = matching_cards.groupby(key_columns)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            st.markdown("### –ü—Ä–∏–≤—è–∑–∫–∞ –∫ —É—Ä–æ–∫–∞–º")
            for (program, module, lesson), group in grouped:
                with st.expander(f"üìö {program} / {module} / {lesson}", expanded=False):
                    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
                    for _, row in group.iterrows():
                        gz = row.get('gz', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                        card_type = row.get('card_type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                        
                        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ì–ó
                        gz_url_params = {
                            "program": program,
                            "module": module,
                            "lesson": lesson,
                            "gz": gz
                        }
                        gz_url = f"/?{create_query_params(gz_url_params)}"
                        
                        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å —Å—Å—ã–ª–∫–æ–π
                        st.markdown(f"- **–ì–ó**: [{gz}]({gz_url}) - **–¢–∏–ø –∫–∞—Ä—Ç–æ—á–∫–∏**: {card_type}")
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–∏–≤—è–∑–∫–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—è
            st.info("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ–ª—è program/module/lesson –≤ DataFrame.")
            for _, row in matching_cards.iterrows():
                st.markdown("### –î–æ—Å—Ç—É–ø–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ä—Ç–æ—á–∫–µ")
                for col in matching_cards.columns:
                    if col != 'card_id' and not pd.isna(row[col]):
                        st.markdown(f"**{col}**: {row[col]}")
    
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ DataFrame: {str(e)}")
        # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        st.markdown("### –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        st.markdown(f"–¢–∏–ø card_df: {type(card_df)}")
        st.markdown(f"–§–æ—Ä–º–∞ card_df: {card_df.shape if hasattr(card_df, 'shape') else '–ù–µ—Ç —Ñ–æ—Ä–º—ã'}")
        st.markdown(f"–ö–æ–ª–æ–Ω–∫–∏ card_df: {list(card_df.columns) if hasattr(card_df, 'columns') else '–ù–µ—Ç –∫–æ–ª–æ–Ω–æ–∫'}")

def display_risk_components(card_data):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∏—Å–∫–∞ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
    
    Args:
        card_data: Series —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
    """
    st.markdown("## –ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ä–∏—Å–∫–∞")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = core.get_config()
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∏—Å–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
    card_dict = card_data.to_dict()
    risk_discr = core.discrimination_risk_score(card_data["discrimination_avg"])
    risk_success = core.success_rate_risk_score(card_data["success_rate"])
    risk_trickiness = core.trickiness_risk_score(card_dict)
    risk_complaints = core.complaint_risk_score(card_dict)
    risk_attempted = core.attempted_share_risk_score(card_data["attempted_share"])
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫
    max_risk = max(risk_discr, risk_success, risk_trickiness, risk_complaints, risk_attempted)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    WEIGHT_DISCRIMINATION = config["weights"]["discrimination"]
    WEIGHT_SUCCESS_RATE = config["weights"]["success_rate"]
    WEIGHT_TRICKINESS = config["weights"].get("trickiness", 0.15)
    WEIGHT_COMPLAINT_RATE = config["weights"]["complaint_rate"]
    WEIGHT_ATTEMPTED = config["weights"]["attempted"]
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–∑–≤–µ—à–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ
    weighted_avg_risk = (
        WEIGHT_DISCRIMINATION * risk_discr +
        WEIGHT_SUCCESS_RATE * risk_success +
        WEIGHT_TRICKINESS * risk_trickiness +
        WEIGHT_COMPLAINT_RATE * risk_complaints +
        WEIGHT_ATTEMPTED * risk_attempted
    )
    
    col1, col2 = st.columns([2, 3])
    
    with col1:
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞
        st.markdown("### –†–∏—Å–∫ –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º")
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∏—Å–∫–∞ –∏ —Ü–≤–µ—Ç–æ–≤
        def risk_category(risk):
            if risk > 0.75:
                return "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π", "red"
            elif risk > 0.5:
                return "–í—ã—Å–æ–∫–∏–π", "orange"
            elif risk > 0.25:
                return "–£–º–µ—Ä–µ–Ω–Ω—ã–π", "gold"
            else:
                return "–ù–∏–∑–∫–∏–π", "green"
        
        # –°–ª–æ–≤–∞—Ä—å —Å —Ä–∏—Å–∫–∞–º–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        risks = {
            "–î–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç—å": risk_discr,
            "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å": risk_success,
            "–ü–æ–¥–ª–æ—Å—Ç—å": risk_trickiness,
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∞–ª–æ–±": risk_complaints,
            "–î–æ–ª—è –ø—ã—Ç–∞–≤—à–∏—Ö—Å—è": risk_attempted
        }
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–∏—Å–∫–∏ –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        for metric, risk in risks.items():
            category, color = risk_category(risk)
            st.markdown(f"**{metric}**: {risk:.3f} - <span style='color:{color};'>{category}</span>", unsafe_allow_html=True)
        
        st.markdown("---")
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞
        st.markdown("### –§–æ—Ä–º—É–ª–∞ —Ä–∞—Å—á–µ—Ç–∞")
        st.markdown(f"**–í–∑–≤–µ—à–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ**: {weighted_avg_risk:.3f}")
        st.markdown(f"**–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫**: {max_risk:.3f}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —Ä–∏—Å–∫–∞
        min_threshold = 0
        if max_risk > config["risk_thresholds"]["critical"]:
            min_threshold = config["risk_thresholds"]["min_for_critical"]
        elif max_risk > config["risk_thresholds"]["high"]:
            min_threshold = config["risk_thresholds"]["min_for_high"]
        
        st.markdown(f"**–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥**: {min_threshold:.3f}")
        
        # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∏—Å–∫
        alpha = config["risk_thresholds"]["alpha_weight_avg"]
        combined_risk = alpha * weighted_avg_risk + (1 - alpha) * max_risk
        st.markdown(f"**–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∏—Å–∫**: {combined_risk:.3f}")
        
        # –°—ã—Ä–æ–π —Ä–∏—Å–∫ (–±–µ–∑ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏)
        raw_risk = max(weighted_avg_risk, combined_risk, min_threshold)
        st.markdown(f"**–°—ã—Ä–æ–π —Ä–∏—Å–∫**: {raw_risk:.3f}")
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫—É—é –∑–Ω–∞—á–∏–º–æ—Å—Ç—å
        significance_threshold = config["stats"]["significance_threshold"]
        neutral_risk_value = config["stats"]["neutral_risk_value"]
        confidence_factor = min(card_data["total_attempts"] / significance_threshold, 1.0)
        
        st.markdown(f"**–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–æ–≤–µ—Ä–∏—è**: {confidence_factor:.2f}")
        
        # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–∏—Å–∫
        final_risk = raw_risk * confidence_factor + neutral_risk_value * (1 - confidence_factor)
        st.markdown(f"**–ò—Ç–æ–≥–æ–≤—ã–π —Ä–∏—Å–∫**: {final_risk:.3f}")
    
    with col2:
        # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        risks_df = pd.DataFrame({
            "–ú–µ—Ç—Ä–∏–∫–∞": list(risks.keys()),
            "–†–∏—Å–∫": list(risks.values()),
            "–í–µ—Å": [WEIGHT_DISCRIMINATION, WEIGHT_SUCCESS_RATE, WEIGHT_TRICKINESS, WEIGHT_COMPLAINT_RATE, WEIGHT_ATTEMPTED],
            "–í–∑–≤–µ—à–µ–Ω–Ω—ã–π —Ä–∏—Å–∫": [
                WEIGHT_DISCRIMINATION * risk_discr,
                WEIGHT_SUCCESS_RATE * risk_success,
                WEIGHT_TRICKINESS * risk_trickiness,
                WEIGHT_COMPLAINT_RATE * risk_complaints,
                WEIGHT_ATTEMPTED * risk_attempted
            ]
        })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–∑–≤–µ—à–µ–Ω–Ω–æ–º—É —Ä–∏—Å–∫—É
        risks_df = risks_df.sort_values(by="–í–∑–≤–µ—à–µ–Ω–Ω—ã–π —Ä–∏—Å–∫", ascending=False)
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        fig = px.bar(
            risks_df,
            x="–ú–µ—Ç—Ä–∏–∫–∞",
            y="–í–∑–≤–µ—à–µ–Ω–Ω—ã–π —Ä–∏—Å–∫",
            color="–†–∏—Å–∫",
            color_continuous_scale="RdYlGn_r",
            title="–í–∫–ª–∞–¥ –º–µ—Ç—Ä–∏–∫ –≤ –æ–±—â–∏–π —Ä–∏—Å–∫",
            labels={"–í–∑–≤–µ—à–µ–Ω–Ω—ã–π —Ä–∏—Å–∫": "–í–∫–ª–∞–¥ –≤ —Ä–∏—Å–∫"},
            text=risks_df["–†–∏—Å–∫"].apply(lambda x: f"{x:.2f}")
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ
        fig.add_hline(y=weighted_avg_risk, line_dash="dash", line_color="blue", 
                     annotation_text=f"–í–∑–≤–µ—à–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ: {weighted_avg_risk:.2f}", 
                     annotation_position="top right")
        
        fig.update_layout(height=400)
        st.plotly_chart(fig, use_container_width=True)

def display_success_analysis(card_data):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
    
    Args:
        card_data: Series —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
    """
    st.markdown("## –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤
    col1, col2 = st.columns(2)
    
    with col1:
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∏ –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏
        fig = go.Figure()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –æ–±—â–µ–π —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∏ —É—Å–ø–µ—Ö–∞ —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏
        fig.add_trace(go.Bar(
            x=["–û–±—â–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å", "–£—Å–ø–µ—Ö —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏"],
            y=[card_data["success_rate"], card_data["first_try_success_rate"]],
            marker_color=["#4da6ff", "#ff9040"],
            text=[f"{card_data['success_rate']:.1%}", f"{card_data['first_try_success_rate']:.1%}"],
            textposition="auto"
        ))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–∫–µ—Ç–∞
        fig.update_layout(
            title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±—â–µ–π —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∏ —É—Å–ø–µ—Ö–∞ —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏",
            yaxis=dict(
                title="–î–æ–ª—è —É—Å–ø–µ—à–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫",
                tickformat=".0%",
                range=[0, 1]
            )
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —É—Ä–æ–≤–Ω—è –ø–æ–¥–ª–æ—Å—Ç–∏
        fig = go.Figure()
        
        # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ª–æ—Å—Ç–∏
        trickiness_level = card_data.get("trickiness_level", 0)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ü–≤–µ—Ç–∞
        categories = ["–ù–µ—Ç –ø–æ–¥–ª–æ—Å—Ç–∏", "–ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å", "–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å", "–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å"]
        colors = ["#c0c0c0", "#ffff7f", "#ffaa7f", "#ff7f7f"]
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        levels = [0, 0, 0, 0]  # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –≤—Å–µ 0
        levels[trickiness_level] = 1  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 1 –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–ª–æ—Å—Ç–∏
        fig.add_trace(go.Bar(
            x=categories,
            y=levels,
            marker_color=colors,
            text=[trickiness_level == i for i in range(4)],
            textposition="auto"
        ))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–∫–µ—Ç–∞
        fig.update_layout(
            title="–£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ª–æ—Å—Ç–∏ –∫–∞—Ä—Ç–æ—á–∫–∏",
            yaxis=dict(
                title="–ó–Ω–∞—á–µ–Ω–∏–µ",
                range=[0, 1],
                showticklabels=False
            )
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –æ–±—â–µ–π —É—Å–ø–µ—à–Ω–æ—Å—Ç—å—é –∏ —É—Å–ø–µ—Ö–æ–º —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏
    success_diff = card_data["success_rate"] - card_data["first_try_success_rate"]
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ—è—Å–Ω–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
    st.markdown("### –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏")
    
    success_interpretation = ""
    if card_data["success_rate"] > 0.95:
        success_interpretation = "–ö–∞—Ä—Ç–æ—á–∫–∞ –∏–º–µ–µ—Ç **–æ—á–µ–Ω—å –≤—ã—Å–æ–∫—É—é –æ–±—â—É—é —É—Å–ø–µ—à–Ω–æ—Å—Ç—å** (>95%), —á—Ç–æ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ —Ç–æ, —á—Ç–æ –æ–Ω–∞ —Å–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç–∞—è."
    elif card_data["success_rate"] > 0.8:
        success_interpretation = "–ö–∞—Ä—Ç–æ—á–∫–∞ –∏–º–µ–µ—Ç **–≤—ã—Å–æ–∫—É—é –æ–±—â—É—é —É—Å–ø–µ—à–Ω–æ—Å—Ç—å** (>80%), —á—Ç–æ —è–≤–ª—è–µ—Ç—Å—è —Ö–æ—Ä–æ—à–∏–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–º."
    elif card_data["success_rate"] > 0.6:
        success_interpretation = "–ö–∞—Ä—Ç–æ—á–∫–∞ –∏–º–µ–µ—Ç **—Å—Ä–µ–¥–Ω—é—é –æ–±—â—É—é —É—Å–ø–µ—à–Ω–æ—Å—Ç—å** (>60%), —á—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–µ–º–ª–µ–º—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º."
    else:
        success_interpretation = "–ö–∞—Ä—Ç–æ—á–∫–∞ –∏–º–µ–µ—Ç **–Ω–∏–∑–∫—É—é –æ–±—â—É—é —É—Å–ø–µ—à–Ω–æ—Å—Ç—å** (<60%), —á—Ç–æ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –µ—ë —á—Ä–µ–∑–º–µ—Ä–Ω—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —è—Å–Ω—É—é —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É."
    
    first_try_interpretation = ""
    if card_data["first_try_success_rate"] > 0.9:
        first_try_interpretation = "**–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏** (>90%) —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Ç–æ, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç–æ–µ."
    elif card_data["first_try_success_rate"] > 0.7:
        first_try_interpretation = "**–í—ã—Å–æ–∫–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏** (>70%) –≥–æ–≤–æ—Ä–∏—Ç –æ —Ç–æ–º, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ –ø–æ–Ω—è—Ç–Ω–æ."
    elif card_data["first_try_success_rate"] > 0.5:
        first_try_interpretation = "**–°—Ä–µ–¥–Ω—è—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏** (>50%) –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ö–æ—Ä–æ—à–∏–π –±–∞–ª–∞–Ω—Å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏."
    else:
        first_try_interpretation = "**–ù–∏–∑–∫–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏** (<50%) —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Ç–æ, —á—Ç–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è."
    
    diff_interpretation = ""
    if success_diff > 0.3:
        diff_interpretation = "**–ë–æ–ª—å—à–∞—è —Ä–∞–∑–Ω–∏—Ü–∞** –º–µ–∂–¥—É –æ–±—â–µ–π —É—Å–ø–µ—à–Ω–æ—Å—Ç—å—é –∏ —É—Å–ø–µ—Ö–æ–º —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏ (>30%) —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Ç–æ, —á—Ç–æ –∫–∞—Ä—Ç–æ—á–∫–∞ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–∫—Ä—ã—Ç—ã–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏–ª–∏ –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç—É–¥–µ–Ω—Ç—ã –ø—Ä–µ–æ–¥–æ–ª–µ–≤–∞—é—Ç –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫."
    elif success_diff > 0.2:
        diff_interpretation = "**–°—Ä–µ–¥–Ω—è—è —Ä–∞–∑–Ω–∏—Ü–∞** –º–µ–∂–¥—É –æ–±—â–µ–π —É—Å–ø–µ—à–Ω–æ—Å—Ç—å—é –∏ —É—Å–ø–µ—Ö–æ–º —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏ (>20%) –≥–æ–≤–æ—Ä–∏—Ç –æ —Ç–æ–º, —á—Ç–æ –∫–∞—Ä—Ç–æ—á–∫–∞ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è."
    else:
        diff_interpretation = "**–ù–µ–±–æ–ª—å—à–∞—è —Ä–∞–∑–Ω–∏—Ü–∞** –º–µ–∂–¥—É –æ–±—â–µ–π —É—Å–ø–µ—à–Ω–æ—Å—Ç—å—é –∏ —É—Å–ø–µ—Ö–æ–º —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏ (<20%) —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Ç–æ, —á—Ç–æ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ª–∏–±–æ —Å—Ä–∞–∑—É –ø–æ–Ω–∏–º–∞—é—Ç –∑–∞–¥–∞–Ω–∏–µ, –ª–∏–±–æ –Ω–µ –º–æ–≥—É—Ç –µ–≥–æ —Ä–µ—à–∏—Ç—å –¥–∞–∂–µ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫."
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é
    st.markdown(success_interpretation)
    st.markdown(first_try_interpretation)
    st.markdown(diff_interpretation)
    
    # –ï—Å–ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∞ —è–≤–ª—è–µ—Ç—Å—è "—Ç—Ä–∏–∫–∏", –¥–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –±–ª–æ–∫
    if trickiness_level > 0:
        st.markdown("### –ê–Ω–∞–ª–∏–∑ \"—Ç—Ä–∏–∫–∏\"-—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫")
        
        trickiness_explanation = {
            1: "–ö–∞—Ä—Ç–æ—á–∫–∞ –∏–º–µ–µ—Ç **–Ω–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ª–æ—Å—Ç–∏**. –°—Ç—É–¥–µ–Ω—Ç—ã –≤ —Ü–µ–ª–æ–º —É—Å–ø–µ—à–Ω–æ —Ä–µ—à–∞—é—Ç –∑–∞–¥–∞–Ω–∏–µ, –Ω–æ —á–∞—Å—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫.",
            2: "–ö–∞—Ä—Ç–æ—á–∫–∞ –∏–º–µ–µ—Ç **—Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ª–æ—Å—Ç–∏**. –ó–∞–º–µ—Ç–Ω–∞ —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –æ–±—â–µ–π —É—Å–ø–µ—à–Ω–æ—Å—Ç—å—é –∏ —É—Å–ø–µ—Ö–æ–º —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏, —á—Ç–æ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –Ω–µ–æ—á–µ–≤–∏–¥–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –≤ –∑–∞–¥–∞–Ω–∏–∏.",
            3: "–ö–∞—Ä—Ç–æ—á–∫–∞ –∏–º–µ–µ—Ç **–≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ª–æ—Å—Ç–∏**. –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –Ω–µ —Å–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Å –∑–∞–¥–∞–Ω–∏–µ–º —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏, –Ω–æ –≤ –∏—Ç–æ–≥–µ —Ä–µ—à–∞—é—Ç –µ–≥–æ. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–º –Ω–∞–ª–∏—á–∏—è —Å–∫—Ä—ã—Ç—ã—Ö —É—Å–ª–æ–≤–∏–π –∏–ª–∏ –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ—Å—Ç–µ–π –≤ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–µ."
        }
        
        st.markdown(trickiness_explanation.get(trickiness_level, ""))
        
        st.markdown("""
        **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ç—Ä–∏–∫–∏-–∫–∞—Ä—Ç–æ—á–µ–∫:**
        - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ—Å—Ç–µ–π
        - –£—Ç–æ—á–Ω–∏—Ç—å —É—Å–ª–æ–≤–∏—è –∑–∞–¥–∞–Ω–∏—è, –æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ—è–≤–Ω–æ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞—é—Ç—Å—è
        - –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏–ª–∏ –ø–æ—è—Å–Ω–µ–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏
        - –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞–Ω–∏—è, –µ—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫–∞
        """)

def display_complaints_analysis(card_data):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –∂–∞–ª–æ–± –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
    
    Args:
        card_data: Series —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
    """
    st.markdown("## –ê–Ω–∞–ª–∏–∑ –∂–∞–ª–æ–±")
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∞–ª–æ–±
    complaints_total = 0
    if "complaints_total" in card_data:
        complaints_total = card_data["complaints_total"]
    elif "complaint_rate" in card_data and "total_attempts" in card_data:
        complaints_total = card_data["complaint_rate"] * card_data["total_attempts"]
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
    col1, col2 = st.columns(2)
    
    with col1:
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∞–±—Å–æ–ª—é—Ç–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∂–∞–ª–æ–±
        fig = go.Figure()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∂–∞–ª–æ–±
        fig.add_trace(go.Bar(
            x=["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∞–ª–æ–±"],
            y=[complaints_total],
            marker_color="#ff6666",
            text=[f"{complaints_total:.0f}"],
            textposition="auto"
        ))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–∫–µ—Ç–∞
        fig.update_layout(
            title="–ê–±—Å–æ–ª—é—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∞–ª–æ–±",
            yaxis=dict(
                title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"
            )
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–ª–∏ –∂–∞–ª–æ–±
        fig = go.Figure()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –¥–æ–ª–∏ –∂–∞–ª–æ–±
        fig.add_trace(go.Bar(
            x=["–î–æ–ª—è –∂–∞–ª–æ–±"],
            y=[card_data["complaint_rate"]],
            marker_color="#ff6666",
            text=[f"{card_data['complaint_rate']:.1%}"],
            textposition="auto"
        ))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–∫–µ—Ç–∞
        fig.update_layout(
            title="–î–æ–ª—è –∂–∞–ª–æ–±",
            yaxis=dict(
                title="–î–æ–ª—è",
                tickformat=".0%",
                range=[0, max(0.25, card_data["complaint_rate"] * 1.5)]
            )
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ—è—Å–Ω–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –æ –∂–∞–ª–æ–±–∞—Ö
    st.markdown("### –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∂–∞–ª–æ–±–∞—Ö")
    
    complaints_interpretation = ""
    if complaints_total > 50:
        complaints_interpretation = f"–ö–∞—Ä—Ç–æ—á–∫–∞ –∏–º–µ–µ—Ç **–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤—ã—Å–æ–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∞–ª–æ–±** ({complaints_total:.0f}). –≠—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–¥–∞–Ω–∏–µ–º, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è."
    elif complaints_total > 10:
        complaints_interpretation = f"–ö–∞—Ä—Ç–æ—á–∫–∞ –∏–º–µ–µ—Ç **–≤—ã—Å–æ–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∞–ª–æ–±** ({complaints_total:.0f}). –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏—á–∏–Ω—ã –∏ –≤–Ω–µ—Å—Ç–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è."
    elif complaints_total > 5:
        complaints_interpretation = f"–ö–∞—Ä—Ç–æ—á–∫–∞ –∏–º–µ–µ—Ç **—Å—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∞–ª–æ–±** ({complaints_total:.0f}). –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã."
    else:
        complaints_interpretation = f"–ö–∞—Ä—Ç–æ—á–∫–∞ –∏–º–µ–µ—Ç **–Ω–∏–∑–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∞–ª–æ–±** ({complaints_total:.0f}), —á—Ç–æ —è–≤–ª—è–µ—Ç—Å—è —Ö–æ—Ä–æ—à–∏–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–º."
    
    complaint_rate_interpretation = ""
    if card_data["complaint_rate"] > 0.1:
        complaint_rate_interpretation = f"**–í—ã—Å–æ–∫–∞—è –¥–æ–ª—è –∂–∞–ª–æ–±** ({card_data['complaint_rate']:.1%}) —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Ç–æ, —á—Ç–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞—è —á–∞—Å—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–¥–∞–Ω–∏–µ–º."
    elif card_data["complaint_rate"] > 0.05:
        complaint_rate_interpretation = f"**–°—Ä–µ–¥–Ω—è—è –¥–æ–ª—è –∂–∞–ª–æ–±** ({card_data['complaint_rate']:.1%}) –≥–æ–≤–æ—Ä–∏—Ç –æ –Ω–∞–ª–∏—á–∏–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–æ–±–ª–µ–º —Å –∑–∞–¥–∞–Ω–∏–µ–º, –Ω–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö."
    else:
        complaint_rate_interpretation = f"**–ù–∏–∑–∫–∞—è –¥–æ–ª—è –∂–∞–ª–æ–±** ({card_data['complaint_rate']:.1%}) —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤—É–µ—Ç –æ —Ç–æ–º, —á—Ç–æ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –Ω–µ –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º —Å –∑–∞–¥–∞–Ω–∏–µ–º."
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é
    st.markdown(complaints_interpretation)
    st.markdown(complaint_rate_interpretation)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è –∂–∞–ª–æ–±
    if complaints_total > 10 or card_data["complaint_rate"] > 0.05:
        st.markdown("""
        **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–º —É—Ä–æ–≤–Ω–µ –∂–∞–ª–æ–±:**
        - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ –∏–ª–∏ –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç–µ–π
        - –ü–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–∏—Å—Ç–µ–º—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
        - –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∂–∞–ª–æ–±—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –ø—Ä–æ–±–ª–µ–º
        - –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∏–ª–∏ –ø–æ—è—Å–Ω–µ–Ω–∏–π
        - –í —Å–ª—É—á–∞–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è –∂–∞–ª–æ–± - –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –¥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
        """)

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—Å—Ç –∂–∞–ª–æ–±, –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
    if pd.notna(card_data.get("complaints_text")) and card_data["complaints_text"]:
        st.subheader("üìù –¢–µ–∫—Å—Ç—ã –∂–∞–ª–æ–±")
        
        # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –∂–∞–ª–æ–± –ø–æ —Å—Ç—Ä–æ–∫–∞–º
        complaints_list = card_data["complaints_text"].strip().split('\n')
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞–∂–¥—É—é –∂–∞–ª–æ–±—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ
        for i, complaint in enumerate(complaints_list):
            complaint = complaint.strip()
            if complaint:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø—É—Å—Ç–∞—è
                st.markdown(f"""
                <div style="border:1px solid #d33682; border-radius:8px; padding:15px; margin-bottom:15px; background-color:#fdf6e3; color:#333333; font-size:16px;">
                    {complaint}
                </div>
                """, unsafe_allow_html=True)

def display_discrimination_analysis(card_data):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
    
    Args:
        card_data: Series —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
    """
    st.markdown("## –ê–Ω–∞–ª–∏–∑ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
    fig = go.Figure()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–∏—è
    color = "#9370db"
    if card_data["discrimination_avg"] > 0.5:
        color = "#32CD32"  # –∑–µ–ª–µ–Ω—ã–π –¥–ª—è –≤—ã—Å–æ–∫–æ–π –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
    elif card_data["discrimination_avg"] < 0.2:
        color = "#ff6666"  # –∫—Ä–∞—Å–Ω—ã–π –¥–ª—è –Ω–∏–∑–∫–æ–π –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
    fig.add_trace(go.Bar(
        x=["–ò–Ω–¥–µ–∫—Å –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏"],
        y=[card_data["discrimination_avg"]],
        marker_color=color,
        text=[f"{card_data['discrimination_avg']:.3f}"],
        textposition="auto"
    ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –¥–ª—è –≥—Ä–∞–Ω–∏—Ü –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    fig.add_shape(
        type="line",
        x0=-0.5, y0=0.35, x1=0.5, y1=0.35,
        line=dict(color="green", width=2, dash="dash")
    )
    
    fig.add_shape(
        type="line",
        x0=-0.5, y0=0.15, x1=0.5, y1=0.15,
        line=dict(color="red", width=2, dash="dash")
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –¥–ª—è –≥—Ä–∞–Ω–∏—Ü
    fig.add_annotation(
        x=0.5, y=0.35,
        text="–•–æ—Ä–æ—à–∞—è –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç—å",
        showarrow=False,
        xanchor="left"
    )
    
    fig.add_annotation(
        x=0.5, y=0.15,
        text="–ù–∏–∑–∫–∞—è –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç—å",
        showarrow=False,
        xanchor="left"
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–∫–µ—Ç–∞
    fig.update_layout(
        title="–ò–Ω–¥–µ–∫—Å –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏",
        yaxis=dict(
            title="–ó–Ω–∞—á–µ–Ω–∏–µ",
            range=[0, max(0.6, card_data["discrimination_avg"] * 1.2)]
        ),
        xaxis=dict(
            range=[-0.5, 1]
        )
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ—è—Å–Ω–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
    st.markdown("### –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    
    discrimination_interpretation = ""
    if card_data["discrimination_avg"] > 0.35:
        discrimination_interpretation = f"–ö–∞—Ä—Ç–æ—á–∫–∞ –∏–º–µ–µ—Ç **–≤—ã—Å–æ–∫—É—é –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç—å** ({card_data['discrimination_avg']:.3f}). –≠—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Ç–æ, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Ö–æ—Ä–æ—à–æ —Ä–∞–∑–ª–∏—á–∞–µ—Ç –∑–Ω–∞—é—â–∏—Ö –∏ –Ω–µ–∑–Ω–∞—é—â–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤."
    elif card_data["discrimination_avg"] > 0.15:
        discrimination_interpretation = f"–ö–∞—Ä—Ç–æ—á–∫–∞ –∏–º–µ–µ—Ç **—Å—Ä–µ–¥–Ω—é—é –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç—å** ({card_data['discrimination_avg']:.3f}). –≠—Ç–æ –ø—Ä–∏–µ–º–ª–µ–º—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å, –Ω–æ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è."
    else:
        discrimination_interpretation = f"–ö–∞—Ä—Ç–æ—á–∫–∞ –∏–º–µ–µ—Ç **–Ω–∏–∑–∫—É—é –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç—å** ({card_data['discrimination_avg']:.3f}). –≠—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Ç–æ, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –ø–ª–æ—Ö–æ —Ä–∞–∑–ª–∏—á–∞–µ—Ç –∑–Ω–∞—é—â–∏—Ö –∏ –Ω–µ–∑–Ω–∞—é—â–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤."
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é
    st.markdown(discrimination_interpretation)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
    if card_data["discrimination_avg"] < 0.25:
        st.markdown("""
        **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø—Ä–∏ –Ω–∏–∑–∫–æ–π –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏:**
        - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ –ø—Ä–æ—Å—Ç–æ–µ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
        - –ü–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤, –µ—Å–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º
        - –£—Ç–æ—á–Ω–∏—Ç—å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —É–≥–∞–¥—ã–≤–∞–Ω–∏–π
        - –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∏—Å—Ç—Ä–∞–∫—Ç–æ—Ä–æ–≤, –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
        - –û—Ü–µ–Ω–∏—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ü–µ–ª—è–º –æ–±—É—á–µ–Ω–∏—è
        """)
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∏–¥–µ–∞–ª—å–Ω–æ–π –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
    st.markdown("### –ò–¥–µ–∞–ª—å–Ω–∞—è –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç—å")
    st.markdown("""
    –ò–Ω–¥–µ–∫—Å –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–æ –∑–∞–¥–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–∞–µ—Ç –∑–Ω–∞—é—â–∏—Ö –∏ –Ω–µ–∑–Ω–∞—é—â–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.
    
    - **–í—ã—Å–æ–∫–∞—è –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç—å (>0.35)**: –∑–∞–¥–∞–Ω–∏–µ —Ö–æ—Ä–æ—à–æ —Ä–∞–∑–ª–∏—á–∞–µ—Ç –∑–Ω–∞—é—â–∏—Ö –∏ –Ω–µ–∑–Ω–∞—é—â–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    - **–°—Ä–µ–¥–Ω—è—è –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç—å (0.15-0.35)**: –∑–∞–¥–∞–Ω–∏–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–ª–∏—á–∞–µ—Ç –∑–Ω–∞—é—â–∏—Ö –∏ –Ω–µ–∑–Ω–∞—é—â–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    - **–ù–∏–∑–∫–∞—è –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç—å (<0.15)**: –∑–∞–¥–∞–Ω–∏–µ –ø–ª–æ—Ö–æ —Ä–∞–∑–ª–∏—á–∞–µ—Ç –∑–Ω–∞—é—â–∏—Ö –∏ –Ω–µ–∑–Ω–∞—é—â–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    
    –ò–¥–µ–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0.4-0.6. –°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–¥–∞–Ω–∏–µ–º.
    """)

def display_attempts_analysis(card_data):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
    
    Args:
        card_data: Series —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
    """
    st.markdown("## –ê–Ω–∞–ª–∏–∑ –ø–æ–ø—ã—Ç–æ–∫")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
    col1, col2 = st.columns(2)
    
    with col1:
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫
        fig = go.Figure()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫
        fig.add_trace(go.Bar(
            x=["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫"],
            y=[card_data["total_attempts"]],
            marker_color="#4da6ff",
            text=[f"{card_data['total_attempts']:.0f}"],
            textposition="auto"
        ))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–∫–µ—Ç–∞
        fig.update_layout(
            title="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫",
            yaxis=dict(
                title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"
            )
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–ª–∏ –ø—ã—Ç–∞–≤—à–∏—Ö—Å—è
        fig = go.Figure()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –¥–æ–ª–∏ –ø—ã—Ç–∞–≤—à–∏—Ö—Å—è
        fig.add_trace(go.Bar(
            x=["–î–æ–ª—è –ø—ã—Ç–∞–≤—à–∏—Ö—Å—è"],
            y=[card_data["attempted_share"]],
            marker_color="#66c2a5",
            text=[f"{card_data['attempted_share']:.1%}"],
            textposition="auto"
        ))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–∫–µ—Ç–∞
        fig.update_layout(
            title="–î–æ–ª—è –ø—ã—Ç–∞–≤—à–∏—Ö—Å—è —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ",
            yaxis=dict(
                title="–î–æ–ª—è",
                tickformat=".0%",
                range=[0, 1]
            )
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ—è—Å–Ω–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ø—ã—Ç–∫–∞—Ö
    st.markdown("### –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ø—ã—Ç–∫–∞—Ö")
    
    attempts_interpretation = ""
    if card_data["total_attempts"] > 500:
        attempts_interpretation = f"–ö–∞—Ä—Ç–æ—á–∫–∞ –∏–º–µ–µ—Ç **–æ—á–µ–Ω—å –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫** ({card_data['total_attempts']:.0f}), —á—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –æ –≤—ã—Å–æ–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ –º–µ—Ç—Ä–∏–∫."
    elif card_data["total_attempts"] > 100:
        attempts_interpretation = f"–ö–∞—Ä—Ç–æ—á–∫–∞ –∏–º–µ–µ—Ç **–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫** ({card_data['total_attempts']:.0f}) –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ –º–µ—Ç—Ä–∏–∫."
    elif card_data["total_attempts"] > 50:
        attempts_interpretation = f"–ö–∞—Ä—Ç–æ—á–∫–∞ –∏–º–µ–µ—Ç **—Å—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫** ({card_data['total_attempts']:.0f}). –ú–µ—Ç—Ä–∏–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å —É–º–µ—Ä–µ–Ω–Ω–æ –Ω–∞–¥–µ–∂–Ω—ã–º–∏."
    else:
        attempts_interpretation = f"–ö–∞—Ä—Ç–æ—á–∫–∞ –∏–º–µ–µ—Ç **–º–∞–ª–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫** ({card_data['total_attempts']:.0f}), —á—Ç–æ —Å–Ω–∏–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫—É—é –∑–Ω–∞—á–∏–º–æ—Å—Ç—å –º–µ—Ç—Ä–∏–∫."
    
    attempted_share_interpretation = ""
    if card_data["attempted_share"] > 0.95:
        attempted_share_interpretation = f"**–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –¥–æ–ª—è –ø—ã—Ç–∞–≤—à–∏—Ö—Å—è** ({card_data['attempted_share']:.1%}) —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Ç–æ, —á—Ç–æ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –≤—Å–µ —Å—Ç—É–¥–µ–Ω—Ç—ã –ø—ã—Ç–∞—é—Ç—Å—è —Ä–µ—à–∏—Ç—å —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ."
    elif card_data["attempted_share"] > 0.8:
        attempted_share_interpretation = f"**–í—ã—Å–æ–∫–∞—è –¥–æ–ª—è –ø—ã—Ç–∞–≤—à–∏—Ö—Å—è** ({card_data['attempted_share']:.1%}) –≥–æ–≤–æ—Ä–∏—Ç –æ —Ç–æ–º, —á—Ç–æ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø—ã—Ç–∞—é—Ç—Å—è —Ä–µ—à–∏—Ç—å —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ."
    elif card_data["attempted_share"] > 0.6:
        attempted_share_interpretation = f"**–°—Ä–µ–¥–Ω—è—è –¥–æ–ª—è –ø—ã—Ç–∞–≤—à–∏—Ö—Å—è** ({card_data['attempted_share']:.1%}) –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–∞—é—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å—Ç—É–¥–µ–Ω—Ç—ã."
    else:
        attempted_share_interpretation = f"**–ù–∏–∑–∫–∞—è –¥–æ–ª—è –ø—ã—Ç–∞–≤—à–∏—Ö—Å—è** ({card_data['attempted_share']:.1%}) —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Ç–æ, —á—Ç–æ –º–Ω–æ–≥–∏–µ —Å—Ç—É–¥–µ–Ω—Ç—ã –ø—Ä–æ–ø—É—Å–∫–∞—é—Ç —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ."
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é
    st.markdown(attempts_interpretation)
    st.markdown(attempted_share_interpretation)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–ª–∏ –ø—ã—Ç–∞–≤—à–∏—Ö—Å—è
    if card_data["attempted_share"] < 0.7:
        st.markdown("""
        **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø—Ä–∏ –Ω–∏–∑–∫–æ–π –¥–æ–ª–µ –ø—ã—Ç–∞–≤—à–∏—Ö—Å—è:**
        - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –∑–∞–¥–∞–Ω–∏—è –≤ —É—Ä–æ–∫–µ - –≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ–Ω—Ü–µ –∏ —Å—Ç—É–¥–µ–Ω—Ç—ã –Ω–µ –¥–æ—Ö–æ–¥—è—Ç –¥–æ –Ω–µ–≥–æ
        - –û—Ü–µ–Ω–∏—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –≤ –æ–±—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —É—Ä–æ–∫–∞
        - –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –≤ –¥—Ä—É–≥—É—é —á–∞—Å—Ç—å —É—Ä–æ–∫–∞
        - –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å, –Ω–µ –≤—ã–≥–ª—è–¥–∏—Ç –ª–∏ –∑–∞–¥–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã–º –∏–ª–∏ –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã–º —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –º–∞—Ç–µ—Ä–∏–∞–ª–æ–º
        """)

def display_card_status_form(card_data, engine):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ñ–æ—Ä–º—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
    
    Args:
        card_data: Series —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
        engine: SQLAlchemy engine –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
    """
    st.markdown("## –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–º –∫–∞—Ä—Ç–æ—á–∫–∏")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏—è
    statuses = {
        "new": "–ù–æ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞, —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑",
        "in_work": "–ö–∞—Ä—Ç–æ—á–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ, –ø—Ä–æ–±–ª–µ–º—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è",
        "ready_for_qc": "–ö–∞—Ä—Ç–æ—á–∫–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–∞—á–µ—Å—Ç–≤–∞",
        "done": "–ö–∞—Ä—Ç–æ—á–∫–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –∏ –æ–¥–æ–±—Ä–µ–Ω–∞",
        "wont_fix": "–ü—Ä–æ–±–ª–µ–º—ã —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π –Ω–µ –±—É–¥—É—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã"
    }
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    current_status = card_data["status"]
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    with st.form(key="update_status_form"):
        # –í—ã–±–æ—Ä –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        new_status = st.selectbox(
            "–°—Ç–∞—Ç—É—Å –∫–∞—Ä—Ç–æ—á–∫–∏",
            options=list(statuses.keys()),
            format_func=lambda x: f"{x} - {statuses[x]}",
            index=list(statuses.keys()).index(current_status)
        )
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        submit_button = st.form_submit_button(label="–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", type="primary")
        
        # –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞ –∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è
        if submit_button and new_status != current_status:
            # –°–æ–∑–¥–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∞—Ç–∞—Ñ—Ä–µ–π–º—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            original_df = pd.DataFrame([card_data.to_dict()]).reset_index(drop=True)
            edited_df = original_df.copy()
            edited_df.loc[0, "status"] = new_status
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ —Ç–∞–±–ª–∏—Ü–µ card_status
                core.save_status_changes(original_df, edited_df, engine)
                
                # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å card_assignments - –æ–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
                with engine.begin() as conn:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
                    card_id = int(card_data["card_id"])
                    assignment = conn.execute(text(
                        "SELECT assignment_id FROM card_assignments WHERE card_id = :card_id"
                    ), {"card_id": card_id}).fetchone()
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user_id = st.session_state.get("user_id", 1)  # –ï—Å–ª–∏ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º 1 (–∞–¥–º–∏–Ω)
                    
                    if assignment:
                        # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                        assignment_id = assignment[0]
                        conn.execute(text("""
                            UPDATE card_assignments
                            SET status = :status, updated_at = CURRENT_TIMESTAMP
                            WHERE assignment_id = :assignment_id
                        """), {
                            "status": new_status,
                            "assignment_id": assignment_id
                        })
                    else:
                        # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
                        conn.execute(text("""
                            INSERT INTO card_assignments (card_id, user_id, status) 
                            VALUES (:card_id, :user_id, :status)
                        """), {
                            "card_id": card_id,
                            "user_id": user_id,
                            "status": new_status
                        })
                
                st.success(f"–°—Ç–∞—Ç—É—Å –∫–∞—Ä—Ç–æ—á–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω —Å '{current_status}' –Ω–∞ '{new_status}'")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")

def get_card_order(card_id, engine):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏ (card_order) –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    
    Args:
        card_id: ID –∫–∞—Ä—Ç–æ—á–∫–∏
        engine: SQLAlchemy engine –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
        
    Returns:
        card_order: –ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    try:
        # –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è card_order –∏–∑ —Ç–∞–±–ª–∏—Ü—ã cards_structure
        query = text("""
            SELECT card_order 
            FROM cards_structure 
            WHERE card_id = :card_id
        """)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        with engine.connect() as conn:
            result = conn.execute(query, {"card_id": card_id})
            row = result.fetchone()
            
            if row and row[0]:
                return row[0]
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
            return None
    
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ card_order: {str(e)}")
        return None

def page_cards(df: pd.DataFrame, eng):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏"""
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    program_filter = st.session_state.get("filter_program")
    module_filter = st.session_state.get("filter_module")
    lesson_filter = st.session_state.get("filter_lesson")
    gz_filter = st.session_state.get("filter_gz")
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º
    df_filtered = core.apply_filters(df, ["program", "module", "lesson", "gz"])
    
    # –ü–æ–ª—É—á–∞–µ–º card_id –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    query_params = st.query_params
    card_id = None
    
    if "card_id" in query_params:
        card_id = query_params["card_id"]
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º card_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        st.session_state["selected_card_id"] = card_id
    elif "selected_card_id" in st.session_state:
        card_id = st.session_state["selected_card_id"]
    
    # –ï—Å–ª–∏ card_id –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä –∏–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if card_id is None:
        # –°–æ–∑–¥–∞–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        create_hierarchical_header(
            levels=["program", "module", "lesson", "gz"],
            values=[program_filter, module_filter, lesson_filter, gz_filter]
        )
        
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        if df_filtered.empty:
            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏.")
            return
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ —Ä–∏—Å–∫—É –¥–ª—è –ª—É—á—à–µ–≥–æ –≤—ã–±–æ—Ä–∞
        df_sorted = df_filtered.sort_values("risk", ascending=False)
        
        st.header("üîç –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫
        selected_card_id = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É",
            options=df_sorted["card_id"].values,
            format_func=lambda x: f"ID: {x} - –†–∏—Å–∫: {df[df['card_id'] == x]['risk'].values[0]:.2f} - –¢–∏–ø: {df[df['card_id'] == x]['card_type'].values[0]}",
            key="card_selector"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        st.session_state["selected_card_id"] = selected_card_id
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä URL –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        st.query_params["card_id"] = selected_card_id
        
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞
        st.rerun()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
    card_data = df[df["card_id"] == int(card_id)]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
    if card_data.empty:
        st.error(f"–ö–∞—Ä—Ç–æ—á–∫–∞ —Å ID {card_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–∞–Ω–Ω—ã—Ö.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º Series —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
    card_data = card_data.iloc[0]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫—É —Ä–∞–∑–Ω–∏—Ü—ã –º–µ–∂–¥—É success_rate –∏ first_try_success_rate
    card_data["success_diff"] = card_data["success_rate"] - card_data["first_try_success_rate"]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª–µ trickiness_level, –µ—Å–ª–∏ –Ω–µ—Ç - –≤—ã—á–∏—Å–ª—è–µ–º
    if "trickiness_level" not in card_data:
        card_data["trickiness_level"] = core.get_trickiness_level(card_data)
    
    # –ü–æ–ª—É—á–∞–µ–º card_order –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    card_order = get_card_order(int(card_data["card_id"]), eng)
    if card_order is not None:
        card_data["card_order"] = card_order
    
    # –°–æ–∑–¥–∞–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
    create_hierarchical_header(
        levels=["program", "module", "lesson", "gz", "card"],
        values=[card_data["program"], card_data["module"], card_data["lesson"], card_data["gz"], f"–ö–∞—Ä—Ç–æ—á–∫–∞ {int(card_data['card_id'])}"]
    )
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É –∏ –ì–ó
    add_card_links(card_data)
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–æ—á–∫–µ
    display_card_details(card_data)
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–∏–≤—è–∑–∫—É –∫ –∫—É—Ä—Å–∞–º, –ø–µ—Ä–µ–¥–∞–µ–º DataFrame —Ü–µ–ª–∏–∫–æ–º
    display_course_links(int(card_data["card_id"]), eng, df)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    st.markdown("---")
    
    # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
    tabs = st.tabs([
        "üìä –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∏—Å–∫–∞", 
        "‚úÖ –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏", 
        "‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ –∂–∞–ª–æ–±", 
        "üîç –ê–Ω–∞–ª–∏–∑ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏",
        "üîÑ –ê–Ω–∞–ª–∏–∑ –ø–æ–ø—ã—Ç–æ–∫"
    ])
    
    # –ù–∞–ø–æ–ª–Ω—è–µ–º –≤–∫–ª–∞–¥–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
    with tabs[0]:
        display_risk_components(card_data)
    
    with tabs[1]:
        display_success_analysis(card_data)
    
    with tabs[2]:
        display_complaints_analysis(card_data)
    
    with tabs[3]:
        display_discrimination_analysis(card_data)
    
    with tabs[4]:
        display_attempts_analysis(card_data)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    st.markdown("---")
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
    display_card_status_form(card_data, eng)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∏—Å–∫–∞
    st.markdown("## –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    
    risk_level = card_data["risk"]
    
    if risk_level > 0.75:
        st.error("""
        ### –ö–∞—Ä—Ç–æ—á–∫–∞ —Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º
        
        **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**
        - –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –¥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
        - –ü—Ä–æ–≤–µ—Å—Ç–∏ –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏—á–∏–Ω –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞
        - –ü–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É, —Å–∏—Å—Ç–µ–º—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
        - –ü—Ä–æ–≤–µ—Å—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ñ–æ–∫—É—Å-–≥—Ä—É–ø–ø–æ–π –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –≤–∫–ª—é—á–µ–Ω–∏–µ–º
        """)
    elif risk_level > 0.5:
        st.warning("""
        ### –ö–∞—Ä—Ç–æ—á–∫–∞ —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º
        
        **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**
        - –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏—á–∏–Ω—ã –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞ –ø–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º –º–µ—Ç—Ä–∏–∫–∞–º
        - –í–Ω–µ—Å—Ç–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        - –£—Ç–æ—á–Ω–∏—Ç—å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É –∏ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        - –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–∏–Ω–∞–º–∏–∫—É –º–µ—Ç—Ä–∏–∫ –ø–æ—Å–ª–µ –≤–Ω–µ—Å–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        """)
    elif risk_level > 0.25:
        st.info("""
        ### –ö–∞—Ä—Ç–æ—á–∫–∞ —Å —É–º–µ—Ä–µ–Ω–Ω—ã–º —Ä–∏—Å–∫–æ–º
        
        **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**
        - –û–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –º–µ—Ç—Ä–∏–∫–∏ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –≤–∫–ª–∞–¥–æ–º –≤ —Ä–∏—Å–∫
        - –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≤—ã—è–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∞—Å–ø–µ–∫—Ç–æ–≤
        - –í–∫–ª—é—á–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –≤ –ø–ª–∞–Ω –¥–æ—Ä–∞–±–æ—Ç–æ–∫ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
        """)
    else:
        st.success("""
        ### –ö–∞—Ä—Ç–æ—á–∫–∞ —Å –Ω–∏–∑–∫–∏–º —Ä–∏—Å–∫–æ–º
        
        **–°—Ç–∞—Ç—É—Å:**
        - –ö–∞—Ä—Ç–æ—á–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ –∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Å—Ä–æ—á–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
        - –ú–æ–∂–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∞—Å–ø–µ–∫—Ç–æ–≤
        - –ü—Ä–æ–¥–æ–ª–∂–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–µ—Ç—Ä–∏–∫ –≤ —Ä–∞–º–∫–∞—Ö –æ–±—ã—á–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
        """)

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–µ—Ç—Ä–∏–∫—É –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É, –µ—Å–ª–∏ –æ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ
    if pd.notna(card_data.get("time_median")):
        st.subheader("‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
        st.metric(
            label="–ú–µ–¥–∏–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É (–º–∏–Ω)",
            value=f"{card_data['time_median']:.1f}"
        )