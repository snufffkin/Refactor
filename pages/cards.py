# pages/cards.py
"""
–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import numpy as np

import core
from components.utils import create_hierarchical_header, add_gz_links
from components.metrics import display_metrics_row, display_status_chart, display_risk_distribution
from components.charts import display_risk_bar_chart, display_metrics_comparison, display_success_complaints_chart, display_completion_radar,display_cards_chart


def page_cards(df: pd.DataFrame, eng):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º –∫–∞—Ä—Ç–æ—á–µ–∫"""
    df_filtered = core.apply_filters(df)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    program_filter = st.session_state.get("filter_program")
    module_filter = st.session_state.get("filter_module")
    lesson_filter = st.session_state.get("filter_lesson")
    gz_filter = st.session_state.get("filter_gz")
    
    # –°–æ–∑–¥–∞–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    create_hierarchical_header(
        levels=["program", "module", "lesson", "gz", "card"],
        values=[program_filter, module_filter, lesson_filter, gz_filter, "–ê–Ω–∞–ª–∏–∑"]
    )
    
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ –∑–∞–¥–∞–Ω–∏–π, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏
    add_gz_links(df_filtered, gz_filter)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    if df_filtered.empty:
        hdr = " / ".join(filter(None, [st.session_state.get(f"filter_{c}") for c in core.FILTERS]))
        st.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤: {hdr}")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö —Ä–∏—Å–∫–∞
    df_risk_components = core.get_risk_components(df_filtered)
    
    # ---------------------------------------------------------------------------
    # –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ñ–æ—Ä–º—É–ª—ã —Ä–∏—Å–∫–∞
    # ---------------------------------------------------------------------------
    with st.expander("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–æ—Ä–º—É–ª–µ —Ä–∏—Å–∫–∞", expanded=False):
        st.markdown("""
        ### –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–∞

        –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é —Ñ–æ—Ä–º—É–ª—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–∞, —É—á–∏—Ç—ã–≤–∞—é—â—É—é –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:

        **–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∏—Å–∫–∞ –∏ –∏—Ö –≤–µ—Å–∞:**
        - **–û–±—â–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å (25%)**: –ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Ä–∏—Å–∫
        - **–£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏ (15%)**: –ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞ —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏–ª–∏ –Ω–µ—è—Å–Ω–æ—Å—Ç—å –∑–∞–¥–∞–Ω–∏—è
        - **–ñ–∞–ª–æ–±—ã (30%)**: –í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –∂–∞–ª–æ–± - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –ø—Ä–æ–±–ª–µ–º —Å –∑–∞–¥–∞–Ω–∏–µ–º
        - **–î–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç—å (20%)**: –ù–∏–∑–∫–∞—è –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –ø–ª–æ—Ö–æ —Ä–∞–∑–ª–∏—á–∞–µ—Ç –∑–Ω–∞—é—â–∏—Ö –æ—Ç –Ω–µ–∑–Ω–∞—é—â–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        - **–î–æ–ª—è –ø—ã—Ç–∞–≤—à–∏—Ö—Å—è (10%)**: –ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –ø—ã—Ç–∞–≤—à–∏—Ö—Å—è —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ, –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã

        **–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫—É—é –∑–Ω–∞—á–∏–º–æ—Å—Ç—å:**
        - –î–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ —Å –º–∞–ª—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–ø—ã—Ç–æ–∫ (<100) —Ä–∏—Å–∫ —Å–º–µ—â–∞–µ—Ç—Å—è –∫ 0.5 (–Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ—Å—Ç—å)
        - –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å –ª–æ–∂–Ω—ã—Ö –≤—ã–≤–æ–¥–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        
        **–§–æ—Ä–º—É–ª–∞:**
        ```
        raw_risk = 0.25*(1-success_rate) + 0.15*(1-first_try_success_rate) + 0.30*min(complaint_rate*3, 1) + 0.20*(1-discrimination_avg) + 0.10*(1-attempted_share)
        
        confidence_factor = min(total_attempts/100, 1.0)
        
        adjusted_risk = raw_risk * confidence_factor + 0.5 * (1-confidence_factor)
        ```
        
        **–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–∏—Å–∫–∞:**
        - **< 0.3**: –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫ - —Ö–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞—é—â–∏–µ –∑–∞–¥–∞–Ω–∏—è
        - **0.3 - 0.5**: –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫ - –≤–æ–∑–º–æ–∂–Ω—ã –Ω–µ–±–æ–ª—å—à–∏–µ —É–ª—É—á—à–µ–Ω–∏—è
        - **0.5 - 0.7**: –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ
        - **> 0.7**: –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ - —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å—Ä–æ—á–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞
        """)
    
    # ---------------------------------------------------------------------------
    # Dashboard —Å –∫–ª—é—á–µ–≤—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏ - —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    # ---------------------------------------------------------------------------
    st.subheader("üìä –î–∞—à–±–æ—Ä–¥ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫")
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
    metrics = display_metrics_row(df_filtered, compare_with=df)
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞ –∏ —Å—Ç–∞—Ç—É—Å—ã
    col1, col2 = st.columns(2)
    
    with col1:
        display_risk_distribution(df_filtered)
    
    with col2:
        display_status_chart(df_filtered)
    
    # ---------------------------------------------------------------------------
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∫–∞—Ä—Ç–æ—á–∫–∞–º
    # ---------------------------------------------------------------------------
    st.subheader("üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫")
    
    # –î–ª—è –±–æ–ª–µ–µ –Ω–∞–≥–ª—è–¥–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
    # –µ—Å–ª–∏ –∏—Ö —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ
    max_cards_to_display = 50
    
    # –ï—Å–ª–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ –±–æ–ª—å—à–µ max_cards_to_display, —Ä–∞–±–æ—Ç–∞–µ–º —Å –ø–æ–¥–≤—ã–±–æ—Ä–∫–æ–π
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∞–º —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∏—Å–∫—É
    if len(df_filtered) > max_cards_to_display:
        # –û—Ç–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º
        high_risk_sample = df_filtered[df_filtered["risk"] > 0.6].sort_values(by="risk", ascending=False)
        
        # –ï—Å–ª–∏ –≤—ã—Å–æ–∫–æ—Ä–∏—Å–∫–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –º–µ–Ω—å—à–µ max_cards_to_display, –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–æ max_cards_to_display
        if len(high_risk_sample) < max_cards_to_display:
            remaining_count = max_cards_to_display - len(high_risk_sample)
            other_cards_sample = df_filtered[df_filtered["risk"] <= 0.6].sample(min(remaining_count, len(df_filtered[df_filtered["risk"] <= 0.6])))
            display_df = pd.concat([high_risk_sample, other_cards_sample])
        else:
            # –ï—Å–ª–∏ –≤—ã—Å–æ–∫–æ—Ä–∏—Å–∫–æ–≤—ã—Ö –±–æ–ª—å—à–µ max_cards_to_display, –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-N
            display_df = high_risk_sample.head(max_cards_to_display)
    else:
        # –ï—Å–ª–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ –º–µ–Ω—å—à–µ max_cards_to_display, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ
        display_df = df_filtered.copy()
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ —Ä–∏—Å–∫—É –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–≥–ª—è–¥–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    display_df = display_df.sort_values(by="risk", ascending=False)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∞—Ö
    display_df["card_short_id"] = display_df["card_id"].astype(str).str[-4:]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ URL, –µ—Å–ª–∏ –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
    if 'card_url' in display_df.columns:
        display_df["card_link"] = display_df.apply(
            lambda row: f"[{row['card_short_id']}]({row['card_url']})" if pd.notna(row['card_url']) else row['card_short_id'], 
            axis=1
        )
    else:
        display_df["card_link"] = display_df["card_short_id"]
    
    tabs = st.tabs(["–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞", "–£—Å–ø–µ—Ö –∏ –ø–æ–ø—ã—Ç–∫–∏", "–ñ–∞–ª–æ–±—ã", "–î–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç—å", "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫"])
    
    with tabs[0]:
        st.markdown("### –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # –ì—Ä–∞—Ñ–∏–∫ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –ø–æ –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ
            avg_success = display_df["success_rate"].mean()
            fig_success_cards = px.bar(
                display_df,
                x="card_short_id",
                y="success_rate",
                color="risk",
                hover_data=["card_id", "card_type", "total_attempts", "card_url"],
                color_continuous_scale="RdYlGn_r",
                labels={"success_rate": "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å", "card_short_id": "ID –∫–∞—Ä—Ç–æ—á–∫–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã)"},
                title="–£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–æ –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ"
            )
            fig_success_cards.update_layout(xaxis_title="ID –∫–∞—Ä—Ç–æ—á–∫–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã)", yaxis_title="–£—Å–ø–µ—à–Ω–æ—Å—Ç—å", yaxis_tickformat=".0%")
            # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
            fig_success_cards.add_hline(y=avg_success, line_dash="dash", line_color="green", 
                            annotation_text=f"–°—Ä–µ–¥–Ω–µ–µ: {avg_success:.1%}", 
                            annotation_position="top right")
            st.plotly_chart(fig_success_cards, use_container_width=True)
        
        with col2:
            # –ì—Ä–∞—Ñ–∏–∫ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∏ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏
            fig_success_comparison = px.bar(
                display_df,
                x="card_short_id",
                y=["success_rate", "first_try_success_rate"],
                barmode="group",
                color_discrete_sequence=["#4da6ff", "#ff9040"],
                labels={"value": "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å", "card_short_id": "ID –∫–∞—Ä—Ç–æ—á–∫–∏", "variable": "–ú–µ—Ç—Ä–∏–∫–∞"},
                title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±—â–µ–π —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∏ —É—Å–ø–µ—Ö–∞ —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏"
            )
            fig_success_comparison.update_layout(xaxis_title="ID –∫–∞—Ä—Ç–æ—á–∫–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã)", yaxis_tickformat=".0%", legend_title="–¢–∏–ø —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏")
            st.plotly_chart(fig_success_comparison, use_container_width=True)
            
        # –†–µ–π—Ç–∏–Ω–≥ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
        st.markdown("### –†–µ–π—Ç–∏–Ω–≥ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏")
        col1, col2 = st.columns(2)
        
        # –î–ª—è —Ç–æ–ø-10 –∫–∞—Ä—Ç–æ—á–µ–∫ —Å —Å–∞–º–æ–π –≤—ã—Å–æ–∫–æ–π —É—Å–ø–µ—à–Ω–æ—Å—Ç—å—é
        with col1:
            # –¢–æ–ø-10 –∫–∞—Ä—Ç–æ—á–µ–∫ —Å —Å–∞–º–æ–π –≤—ã—Å–æ–∫–æ–π —É—Å–ø–µ—à–Ω–æ—Å—Ç—å—é
            top_success = display_df.sort_values(by="success_rate", ascending=False).head(10)
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º st.dataframe –≤–º–µ—Å—Ç–æ html
            st.markdown("#### –°–∞–º—ã–µ —É—Å–ø–µ—à–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–∞–Ω–Ω—ã—Ö —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
            if 'card_url' in top_success.columns:
                success_table = top_success[['card_id', 'card_type', 'success_rate']].copy()
                
                # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫—É —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É—è markdown
                success_table_display = pd.DataFrame()
                success_table_display['–ö–∞—Ä—Ç–æ—á–∫–∞'] = top_success.apply(
                    lambda row: f"[ID:{int(row['card_id'])}]({row['card_url']})" if pd.notna(row['card_url']) else f"ID:{int(row['card_id'])}", 
                    axis=1
                )
                success_table_display['–¢–∏–ø'] = top_success['card_type']
                success_table_display['–£—Å–ø–µ—à–Ω–æ—Å—Ç—å'] = top_success['success_rate'].apply(lambda x: f"{x:.1%}")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º st.dataframe –≤–º–µ—Å—Ç–æ st.write —Å html
                st.dataframe(success_table_display, hide_index=True, use_container_width=True)
            else:
                # –ï—Å–ª–∏ URL –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
                fig_top_success = px.bar(
                    top_success,
                    x="card_short_id",
                    y="success_rate",
                    color="card_type",
                    text_auto=".1%",
                    labels={"success_rate": "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å", "card_short_id": "ID –∫–∞—Ä—Ç–æ—á–∫–∏"},
                    title="–¢–æ–ø-10 –∫–∞—Ä—Ç–æ—á–µ–∫ —Å —Å–∞–º–æ–π –≤—ã—Å–æ–∫–æ–π —É—Å–ø–µ—à–Ω–æ—Å—Ç—å—é"
                )
                fig_top_success.update_layout(yaxis_tickformat=".0%")
                st.plotly_chart(fig_top_success, use_container_width=True)

        # –î–ª—è —Ç–æ–ø-10 –∫–∞—Ä—Ç–æ—á–µ–∫ —Å —Å–∞–º–æ–π –Ω–∏–∑–∫–æ–π —É—Å–ø–µ—à–Ω–æ—Å—Ç—å—é
        with col2:
            # –¢–æ–ø-10 –∫–∞—Ä—Ç–æ—á–µ–∫ —Å —Å–∞–º–æ–π –Ω–∏–∑–∫–æ–π —É—Å–ø–µ—à–Ω–æ—Å—Ç—å—é
            bottom_success = display_df.sort_values(by="success_rate").head(10)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –ø–æ–¥—Ö–æ–¥ —Å st.dataframe
            st.markdown("#### –ù–∞–∏–º–µ–Ω–µ–µ —É—Å–ø–µ—à–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏")
            
            if 'card_url' in bottom_success.columns:
                bottom_table_display = pd.DataFrame()
                bottom_table_display['–ö–∞—Ä—Ç–æ—á–∫–∞'] = bottom_success.apply(
                    lambda row: f"[ID:{int(row['card_id'])}]({row['card_url']})" if pd.notna(row['card_url']) else f"ID:{int(row['card_id'])}", 
                    axis=1
                )
                bottom_table_display['–¢–∏–ø'] = bottom_success['card_type']
                bottom_table_display['–£—Å–ø–µ—à–Ω–æ—Å—Ç—å'] = bottom_success['success_rate'].apply(lambda x: f"{x:.1%}")
                
                st.dataframe(bottom_table_display, hide_index=True, use_container_width=True)
            else:
                # –ï—Å–ª–∏ URL –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
                fig_bottom_success = px.bar(
                    bottom_success,
                    x="card_short_id",
                    y="success_rate",
                    color="card_type",
                    text_auto=".1%",
                    labels={"success_rate": "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å", "card_short_id": "ID –∫–∞—Ä—Ç–æ—á–∫–∏"},
                    title="–¢–æ–ø-10 –∫–∞—Ä—Ç–æ—á–µ–∫ —Å —Å–∞–º–æ–π –Ω–∏–∑–∫–æ–π —É—Å–ø–µ—à–Ω–æ—Å—Ç—å—é"
                )
                fig_bottom_success.update_layout(yaxis_tickformat=".0%")
                st.plotly_chart(fig_bottom_success, use_container_width=True)
    
    with tabs[1]:
        st.markdown("### –ü–æ–ø—ã—Ç–∫–∏ –∏ —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # –ê–±—Å–æ–ª—é—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ
            fig_attempts_cards = px.bar(
                display_df,
                x="card_short_id",
                y="total_attempts",
                color="card_type",
                labels={"total_attempts": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫", "card_short_id": "ID –∫–∞—Ä—Ç–æ—á–∫–∏"},
                title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
            fig_attempts_cards.add_hline(y=display_df["total_attempts"].mean(), line_dash="dash", line_color="blue", 
                              annotation_text=f"–°—Ä–µ–¥–Ω–µ–µ: {display_df['total_attempts'].mean():.0f}", 
                              annotation_position="top right")
            
            st.plotly_chart(fig_attempts_cards, use_container_width=True)
        
        with col2:
            # –î–æ–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –ø—ã—Ç–∞–≤—à–∏—Ö—Å—è —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ
            fig_attempted_share = px.bar(
                display_df,
                x="card_short_id",
                y="attempted_share",
                color="risk",
                color_continuous_scale="RdYlGn_r",
                labels={"attempted_share": "–î–æ–ª—è –ø—ã—Ç–∞–≤—à–∏—Ö—Å—è", "card_short_id": "ID –∫–∞—Ä—Ç–æ—á–∫–∏"},
                title="–î–æ–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –ø—ã—Ç–∞–≤—à–∏—Ö—Å—è —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ"
            )
            fig_attempted_share.update_layout(yaxis_tickformat=".0%")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
            fig_attempted_share.add_hline(y=display_df["attempted_share"].mean(), line_dash="dash", line_color="green", 
                              annotation_text=f"–°—Ä–µ–¥–Ω–µ–µ: {display_df['attempted_share'].mean():.1%}", 
                              annotation_position="top right")
            
            st.plotly_chart(fig_attempted_share, use_container_width=True)
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫ –∏ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
        fig_attempts_success = px.scatter(
            display_df,
            x="total_attempts",
            y="success_rate",
            color="risk",
            size="attempted_share",
            hover_data=["card_id", "card_type", "first_try_success_rate", "card_url"],
            color_continuous_scale="RdYlGn_r",
            labels={"success_rate": "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å", "total_attempts": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫"},
            title="–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫"
        )
        fig_attempts_success.update_layout(yaxis_tickformat=".0%")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ —Å —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        for _, row in display_df.nlargest(3, "total_attempts").iterrows():
            fig_attempts_success.add_annotation(
                x=row["total_attempts"],
                y=row["success_rate"],
                text=f"ID: {row['card_short_id']}",
                showarrow=True,
                arrowhead=1
            )
        
        for _, row in display_df.nsmallest(3, "success_rate").iterrows():
            if row["total_attempts"] > display_df["total_attempts"].quantile(0.25):  # –ò—Å–∫–ª—é—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –º–∞–ª—ã–º —á–∏—Å–ª–æ–º –ø–æ–ø—ã—Ç–æ–∫
                fig_attempts_success.add_annotation(
                    x=row["total_attempts"],
                    y=row["success_rate"],
                    text=f"ID: {row['card_short_id']}",
                    showarrow=True,
                    arrowhead=1
                )
        
        st.plotly_chart(fig_attempts_success, use_container_width=True)
    
    with tabs[2]:
        st.markdown("### –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∂–∞–ª–æ–± –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º")
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∞–ª–æ–± –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if "complaints_total" not in display_df.columns:
            display_df["complaints_total"] = display_df["complaint_rate"] * display_df["total_attempts"]
        
        col1, col2 = st.columns(2)
        
        with col1:
            # –ê–±—Å–æ–ª—é—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∞–ª–æ–± –ø–æ –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ
            fig_complaints_abs = px.bar(
                display_df,
                x="card_short_id",
                y="complaints_total",
                color="risk",
                color_continuous_scale="RdYlGn_r",
                labels={"complaints_total": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∞–ª–æ–±", "card_short_id": "ID –∫–∞—Ä—Ç–æ—á–∫–∏"},
                title="–ê–±—Å–æ–ª—é—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∞–ª–æ–± –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
            fig_complaints_abs.add_hline(y=display_df["complaints_total"].mean(), line_dash="dash", line_color="red", 
                              annotation_text=f"–°—Ä–µ–¥–Ω–µ–µ: {display_df['complaints_total'].mean():.0f}", 
                              annotation_position="top right")
            
            st.plotly_chart(fig_complaints_abs, use_container_width=True)
        
        with col2:
            # –ü—Ä–æ—Ü–µ–Ω—Ç –∂–∞–ª–æ–± –ø–æ –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ
            fig_complaints_pct = px.bar(
                display_df,
                x="card_short_id",
                y="complaint_rate",
                color="success_rate",
                color_continuous_scale="RdYlGn",
                labels={"complaint_rate": "–ü—Ä–æ—Ü–µ–Ω—Ç –∂–∞–ª–æ–±", "card_short_id": "ID –∫–∞—Ä—Ç–æ—á–∫–∏"},
                title="–ü—Ä–æ—Ü–µ–Ω—Ç –∂–∞–ª–æ–± –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º"
            )
            fig_complaints_pct.update_layout(yaxis_tickformat=".0%")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
            fig_complaints_pct.add_hline(y=display_df["complaint_rate"].mean(), line_dash="dash", line_color="red", 
                              annotation_text=f"–°—Ä–µ–¥–Ω–µ–µ: {display_df['complaint_rate'].mean():.1%}", 
                              annotation_position="top right")
            
            st.plotly_chart(fig_complaints_pct, use_container_width=True)
        
        # –¢–æ–ø –∫–∞—Ä—Ç–æ—á–µ–∫ —Å –∂–∞–ª–æ–±–∞–º–∏
        st.markdown("### –ö–∞—Ä—Ç–æ—á–∫–∏ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∂–∞–ª–æ–±")

        # –û—Ç–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∂–∞–ª–æ–±
        top_complaints = display_df.sort_values(by="complaints_total", ascending=False).head(10)

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
        if 'card_url' in top_complaints.columns:
            complaints_table_display = pd.DataFrame()
            complaints_table_display['–ö–∞—Ä—Ç–æ—á–∫–∞'] = top_complaints.apply(
                lambda row: f"[ID:{int(row['card_id'])}]({row['card_url']})" if pd.notna(row['card_url']) else f"ID:{int(row['card_id'])}", 
                axis=1
            )
            complaints_table_display['–¢–∏–ø'] = top_complaints['card_type']
            complaints_table_display['–í—Å–µ–≥–æ –∂–∞–ª–æ–±'] = top_complaints['complaints_total'].apply(lambda x: f"{int(x)}")
            complaints_table_display['–ü—Ä–æ—Ü–µ–Ω—Ç –∂–∞–ª–æ–±'] = top_complaints['complaint_rate'].apply(lambda x: f"{x:.1%}")
            
            st.dataframe(complaints_table_display, hide_index=True, use_container_width=True)
        else:
            # –ï—Å–ª–∏ URL –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
            fig_top_complaints = px.bar(
                top_complaints,
                x="card_short_id",
                y=["complaints_total", "total_attempts"],
                barmode="group",
                color_discrete_sequence=["#ff6666", "#4da6ff"],
                labels={"value": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "card_short_id": "ID –∫–∞—Ä—Ç–æ—á–∫–∏", "variable": "–ú–µ—Ç—Ä–∏–∫–∞"},
                title="–¢–æ–ø-10 –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∂–∞–ª–æ–±"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –º–µ—Ç–∫–∏ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º –∂–∞–ª–æ–±
            for i, row in enumerate(top_complaints.iterrows()):
                _, r = row
                fig_top_complaints.add_annotation(
                    x=i,
                    y=r["complaints_total"] + max(top_complaints["complaints_total"]) * 0.05,
                    text=f"{r['complaint_rate']:.1%}",
                    showarrow=False,
                    font=dict(color="red", size=10)
                )
            
            st.plotly_chart(fig_top_complaints, use_container_width=True)
        
        # –ñ–∞–ª–æ–±—ã vs –£—Å–ø–µ—à–Ω–æ—Å—Ç—å - –¥–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Å–µ—è–Ω–∏—è
        fig_complaints_vs_success = px.scatter(
            display_df,
            x="success_rate",
            y="complaint_rate",
            color="risk",
            size="total_attempts",
            hover_data=["card_id", "card_type", "complaints_total", "card_url"],
            color_continuous_scale="RdYlGn_r",
            labels={"success_rate": "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å", "complaint_rate": "–ü—Ä–æ—Ü–µ–Ω—Ç –∂–∞–ª–æ–±"},
            title="–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –∂–∞–ª–æ–± –æ—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏"
        )
        fig_complaints_vs_success.update_layout(xaxis_tickformat=".0%", yaxis_tickformat=".0%")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º –∂–∞–ª–æ–±
        for _, row in display_df.nlargest(5, "complaint_rate").iterrows():
            fig_complaints_vs_success.add_annotation(
                x=row["success_rate"],
                y=row["complaint_rate"],
                text=f"ID: {row['card_short_id']}",
                showarrow=True,
                arrowhead=1
            )
        
        st.plotly_chart(fig_complaints_vs_success, use_container_width=True)
    
    with tabs[3]:
        st.markdown("### –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # –ò–Ω–¥–µ–∫—Å –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ
            fig_discrimination_cards = px.bar(
                display_df,
                x="card_short_id",
                y="discrimination_avg",
                color="success_rate",
                color_continuous_scale="RdYlGn",
                labels={"discrimination_avg": "–ò–Ω–¥–µ–∫—Å –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏", "card_short_id": "ID –∫–∞—Ä—Ç–æ—á–∫–∏"},
                title="–ò–Ω–¥–µ–∫—Å –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
            fig_discrimination_cards.add_hline(y=display_df["discrimination_avg"].mean(), line_dash="dash", line_color="purple", 
                              annotation_text=f"–°—Ä–µ–¥–Ω–µ–µ: {display_df['discrimination_avg'].mean():.2f}", 
                              annotation_position="top right")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è (0.5)
            fig_discrimination_cards.add_hline(y=0.5, line_dash="dot", line_color="black", 
                              annotation_text="–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ: 0.5", 
                              annotation_position="bottom right")
            
            st.plotly_chart(fig_discrimination_cards, use_container_width=True)
        
        with col2:
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
            fig_discr_hist = px.histogram(
                display_df,
                x="discrimination_avg",
                nbins=20,
                color_discrete_sequence=["#9370db"],
                labels={"discrimination_avg": "–ò–Ω–¥–µ–∫—Å –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏", "count": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫"},
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
            fig_discr_hist.add_vline(x=display_df["discrimination_avg"].mean(), line_dash="dash", line_color="purple", 
                              annotation_text=f"–°—Ä–µ–¥–Ω–µ–µ: {display_df['discrimination_avg'].mean():.2f}", 
                              annotation_position="top right")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è (0.5)
            fig_discr_hist.add_vline(x=0.5, line_dash="dot", line_color="black", 
                              annotation_text="–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ: 0.5", 
                              annotation_position="bottom right")
            
            st.plotly_chart(fig_discr_hist, use_container_width=True)

        # –¢–æ–ø –∫–∞—Ä—Ç–æ—á–µ–∫ —Å —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
        st.markdown("### –ö–∞—Ä—Ç–æ—á–∫–∏ —Å —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # –ö–∞—Ä—Ç–æ—á–∫–∏ —Å —Å–∞–º–æ–π –Ω–∏–∑–∫–æ–π –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç—å—é (–ø—Ä–æ–±–ª–µ–º–Ω—ã–µ)
            low_discr = display_df.sort_values(by="discrimination_avg").head(10)
            fig_low_discr = px.bar(
                low_discr,
                x="card_short_id",
                y="discrimination_avg",
                color="success_rate",
                color_continuous_scale="RdYlGn",
                text_auto=".2f",
                labels={"discrimination_avg": "–ò–Ω–¥–µ–∫—Å –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏", "card_short_id": "ID –∫–∞—Ä—Ç–æ—á–∫–∏"},
                title="–ö–∞—Ä—Ç–æ—á–∫–∏ —Å —Å–∞–º–æ–π –Ω–∏–∑–∫–æ–π –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç—å—é"
            )
            st.plotly_chart(fig_low_discr, use_container_width=True)
        
        with col2:
            # –ö–∞—Ä—Ç–æ—á–∫–∏ —Å —Å–∞–º–æ–π –≤—ã—Å–æ–∫–æ–π –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç—å—é (—Ö–æ—Ä–æ—à–∏–µ)
            high_discr = display_df.sort_values(by="discrimination_avg", ascending=False).head(10)
            fig_high_discr = px.bar(
                high_discr,
                x="card_short_id",
                y="discrimination_avg",
                color="success_rate",
                color_continuous_scale="RdYlGn",
                text_auto=".2f",
                labels={"discrimination_avg": "–ò–Ω–¥–µ–∫—Å –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏", "card_short_id": "ID –∫–∞—Ä—Ç–æ—á–∫–∏"},
                title="–ö–∞—Ä—Ç–æ—á–∫–∏ —Å —Å–∞–º–æ–π –≤—ã—Å–æ–∫–æ–π –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç—å—é"
            )
            st.plotly_chart(fig_high_discr, use_container_width=True)
        
        # –î–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç—å vs –£—Å–ø–µ—à–Ω–æ—Å—Ç—å - –¥–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Å–µ—è–Ω–∏—è
        fig_discr_vs_success = px.scatter(
            display_df,
            x="success_rate",
            y="discrimination_avg",
            color="risk",
            size="total_attempts",
            hover_data=["card_id", "card_type", "card_url"],
            color_continuous_scale="RdYlGn_r",
            labels={"success_rate": "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å", "discrimination_avg": "–ò–Ω–¥–µ–∫—Å –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏"},
            title="–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏"
        )
        fig_discr_vs_success.update_layout(xaxis_tickformat=".0%")
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –∑–æ–Ω—É
        fig_discr_vs_success.add_shape(
            type="rect",
            x0=0.4, y0=0.4,
            x1=0.6, y1=0.6,
            line=dict(color="green", width=2, dash="dash"),
            fillcolor="rgba(0,255,0,0.1)"
        )
        
        fig_discr_vs_success.add_annotation(
            x=0.5, y=0.6,
            text="–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞",
            showarrow=False,
            font=dict(color="green")
        )
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
        if 'card_url' in display_df.columns:
            # –û—Ç–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Å —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
            extreme_discr = pd.concat([
                display_df.nsmallest(5, "discrimination_avg"), 
                display_df.nlargest(5, "discrimination_avg")
            ])
            
            st.markdown("#### –ö–∞—Ä—Ç–æ—á–∫–∏ —Å —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–π –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç—å—é")
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—É—é —Ç–∞–±–ª–∏—Ü—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            discr_table_display = pd.DataFrame()
            discr_table_display['–ö–∞—Ä—Ç–æ—á–∫–∞'] = extreme_discr.apply(
                lambda row: f"[ID:{int(row['card_id'])}]({row['card_url']})" if pd.notna(row['card_url']) else f"ID:{int(row['card_id'])}", 
                axis=1
            )
            discr_table_display['–¢–∏–ø'] = extreme_discr['card_type']
            discr_table_display['–î–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç—å'] = extreme_discr['discrimination_avg'].apply(lambda x: f"{x:.2f}")
            discr_table_display['–£—Å–ø–µ—à–Ω–æ—Å—Ç—å'] = extreme_discr['success_rate'].apply(lambda x: f"{x:.1%}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º st.dataframe –≤–º–µ—Å—Ç–æ st.write —Å html
            st.dataframe(discr_table_display, hide_index=True, use_container_width=True)
        
        st.plotly_chart(fig_discr_vs_success, use_container_width=True)
    
    with tabs[4]:
        st.markdown("### –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫")
        
        # –í—ã–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        metrics_options = [
            "success_rate", "first_try_success_rate", "complaint_rate", 
            "discrimination_avg", "attempted_share", "risk"
        ]
        
        metrics_labels = {
            "success_rate": "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å",
            "first_try_success_rate": "–£—Å–ø–µ—Ö —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏",
            "complaint_rate": "–ü—Ä–æ—Ü–µ–Ω—Ç –∂–∞–ª–æ–±",
            "discrimination_avg": "–ò–Ω–¥–µ–∫—Å –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏",
            "attempted_share": "–î–æ–ª—è –ø—ã—Ç–∞–≤—à–∏—Ö—Å—è",
            "risk": "–†–∏—Å–∫"
        }
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        num_cards_to_show = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", 5, min(30, len(display_df)), 10)
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ø –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ —Ä–∏—Å–∫—É –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        top_risk_cards = display_df.sort_values(by="risk", ascending=False).head(num_cards_to_show)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        fig_parallel = px.parallel_coordinates(
            top_risk_cards,
            dimensions=["success_rate", "first_try_success_rate", "complaint_rate", "discrimination_avg", "attempted_share", "risk"],
            color="risk",
            labels=metrics_labels,
            color_continuous_scale="RdYlGn_r",
            title=f"–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ç–æ–ø-{num_cards_to_show} –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ —Ä–∏—Å–∫—É"
        )
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–µ–π
        for i, dim in enumerate(fig_parallel.data[0].dimensions):
            if dim.label in ["success_rate", "first_try_success_rate", "complaint_rate", "attempted_share"]:
                dim.tickformat = ".0%"
            elif dim.label in ["discrimination_avg", "risk"]:
                dim.tickformat = ".2f"
        
        st.plotly_chart(fig_parallel, use_container_width=True)
        
        # –†–∞–¥–∞—Ä–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –¥–ª—è —Ç–æ–ø-5 –∫–∞—Ä—Ç–æ—á–µ–∫ —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º
        st.markdown("### –†–∞–¥–∞—Ä–Ω—ã–µ –¥–∏–∞–≥—Ä–∞–º–º—ã –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º")
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ø-5 –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è —Ä–∞–¥–∞—Ä–Ω–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
        radar_cards = top_risk_cards.head(5)
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞–¥–∞—Ä–Ω—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
        fig_radar = go.Figure()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Ä–∞–¥–∞—Ä–∞
        radar_metrics = ["success_rate", "first_try_success_rate", "complaint_rate", "discrimination_avg", "attempted_share"]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–π –º–µ—Ç—Ä–∏–∫–∏ (1 = —Ö–æ—Ä–æ—à–æ, 0 = –ø–ª–æ—Ö–æ)
        radar_normalize = {
            "success_rate": lambda x: x,  # –ë–æ–ª—å—à–µ - –ª—É—á—à–µ
            "first_try_success_rate": lambda x: x,  # –ë–æ–ª—å—à–µ - –ª—É—á—à–µ
            "complaint_rate": lambda x: 1 - x,  # –ú–µ–Ω—å—à–µ - –ª—É—á—à–µ
            "discrimination_avg": lambda x: x,  # –ë–æ–ª—å—à–µ - –ª—É—á—à–µ
            "attempted_share": lambda x: x  # –ë–æ–ª—å—à–µ - –ª—É—á—à–µ
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ä—Ç–æ—á–∫—É –Ω–∞ —Ä–∞–¥–∞—Ä
        for _, card in radar_cards.iterrows():
            fig_radar.add_trace(go.Scatterpolar(
                r=[radar_normalize[m](card[m]) for m in radar_metrics],
                theta=[metrics_labels[m] for m in radar_metrics],
                fill='toself',
                name=f"ID: {card['card_short_id']} (—Ä–∏—Å–∫: {card['risk']:.2f})"
            ))
        
        fig_radar.update_layout(
            polar=dict(
                radialaxis=dict(
                    visible=True,
                    range=[0, 1]
                )
            ),
            title="–†–∞–¥–∞—Ä–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –¥–ª—è —Ç–æ–ø-5 —Ä–∏—Å–∫–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫"
        )
        
        st.plotly_chart(fig_radar, use_container_width=True)
        
        # –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º
        st.markdown("### –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –º–µ—Ç—Ä–∏–∫")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        table_df = top_risk_cards[["card_id", "card_type", "success_rate", "first_try_success_rate", 
                                  "complaint_rate", "discrimination_avg", "total_attempts", "risk"]]
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        # –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —á–∞—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ page_cards –≤ pages.py
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        formatted_table = table_df.style.format({
            "success_rate": "{:.1%}",
            "first_try_success_rate": "{:.1%}",
            "complaint_rate": "{:.1%}",
            "discrimination_avg": "{:.2f}",
            "total_attempts": "{:.0f}",
            "risk": "{:.2f}"
        })
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        formatted_table = formatted_table.background_gradient(
            subset=["success_rate", "first_try_success_rate"],
            cmap="RdYlGn"
        )
        
        formatted_table = formatted_table.background_gradient(
            subset=["complaint_rate", "risk"],
            cmap="RdYlGn_r"
        )
        
        formatted_table = formatted_table.background_gradient(
            subset=["discrimination_avg"],
            cmap="PuRd"
        )
        
        formatted_table = formatted_table.background_gradient(
            subset=["total_attempts"],
            cmap="Blues"
        )
        
        st.dataframe(formatted_table, use_container_width=True)
        
        # –ì—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        st.markdown("### –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è")
        
        # –í—ã–±–∏—Ä–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        deviation_metrics = ["success_rate", "first_try_success_rate", "complaint_rate", "discrimination_avg", "risk"]
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        metric_means = {m: display_df[m].mean() for m in deviation_metrics}
        
        # –°–æ–∑–¥–∞–µ–º DataFrame —Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è–º–∏ –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ
        deviations = pd.DataFrame()
        
        for card_id in top_risk_cards["card_short_id"]:
            card_data = top_risk_cards[top_risk_cards["card_short_id"] == card_id].iloc[0]
            
            card_deviations = {}
            for metric in deviation_metrics:
                # –î–ª—è complaint_rate –∏ risk –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ - —Ö–æ—Ä–æ—à–æ
                if metric in ["complaint_rate", "risk"]:
                    card_deviations[metric] = -(card_data[metric] - metric_means[metric]) / metric_means[metric]
                else:
                    card_deviations[metric] = (card_data[metric] - metric_means[metric]) / metric_means[metric]
            
            card_df = pd.DataFrame.from_dict(card_deviations, orient='index').reset_index()
            card_df.columns = ["metric", "deviation"]
            card_df["card_id"] = card_id
            
            deviations = pd.concat([deviations, card_df])
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        deviations["metric"] = deviations["metric"].map(metrics_labels)
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π
        fig_deviations = px.bar(
            deviations,
            x="metric",
            y="deviation",
            color="card_id",
            barmode="group",
            labels={"deviation": "–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ (%)", "metric": "–ú–µ—Ç—Ä–∏–∫–∞"},
            title="–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º"
        )
        
        fig_deviations.update_layout(yaxis_tickformat=".0%")
        
        st.plotly_chart(fig_deviations, use_container_width=True)
        
        # –ü–æ—è—Å–Ω—è—é—â–∏–π —Ç–µ–∫—Å—Ç
        st.markdown("""
        **–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –ø–æ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π:**
        - –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ) –æ–∑–Ω–∞—á–∞—é—Ç **–ª—É—á—à–µ** —Å—Ä–µ–¥–Ω–µ–≥–æ –¥–ª—è –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫
        - –î–ª—è –∂–∞–ª–æ–± –∏ —Ä–∏—Å–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã, —á—Ç–æ–±—ã –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤—Å–µ–≥–¥–∞ –æ–∑–Ω–∞—á–∞–ª–∏ –ª—É—á—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ
        """)
    
    # ---------------------------------------------------------------------------
    # –¢–∞–±–ª–∏—Ü–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∫–∞—Ä—Ç–æ—á–µ–∫
    # ---------------------------------------------------------------------------
    st.subheader("üìã –°—Ç–∞—Ç—É—Å—ã –∫–∞—Ä—Ç–æ—á–µ–∫")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    st.markdown("---")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
    status_colors = {
        "new": "lightgray",
        "in_work": "lightblue",
        "ready_for_qc": "lightyellow",
        "done": "lightgreen",
        "wont_fix": "lightcoral"
    }
    
    editor_cfg = {
        "status": st.column_config.SelectboxColumn(
            "Status", 
            options=["new", "in_work", "ready_for_qc", "done", "wont_fix"], 
            required=True
        ),
        "card_id": st.column_config.NumberColumn(
            "ID –∫–∞—Ä—Ç–æ—á–∫–∏",
            format="%d"
        ),
        "success_rate": st.column_config.ProgressColumn(
            "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å",
            format="%.1f%%",
            min_value=0,
            max_value=1
        ),
        "complaint_rate": st.column_config.ProgressColumn(
            "–ñ–∞–ª–æ–±—ã",
            format="%.1f%%",
            min_value=0,
            max_value=0.5,
            help="–ü—Ä–æ—Ü–µ–Ω—Ç –∂–∞–ª–æ–± –æ—Ç –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞ –ø–æ–ø—ã—Ç–æ–∫"
        ),
        "discrimination_avg": st.column_config.NumberColumn(
            "–î–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç—å",
            format="%.2f"
        ),
        "risk": st.column_config.ProgressColumn(
            "–†–∏—Å–∫",
            format="%.2f",
            min_value=0,
            max_value=1
        ),
        "total_attempts": st.column_config.NumberColumn(
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫",
            format="%d"
        )
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    status_counts = df_filtered["status"].value_counts().reset_index()
    status_counts.columns = ["–°—Ç–∞—Ç—É—Å", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]
    
    status_fig = px.pie(
        status_counts,
        values="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
        names="–°—Ç–∞—Ç—É—Å",
        title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º",
        color="–°—Ç–∞—Ç—É—Å",
        color_discrete_map={
            "new": "#d3d3d3",
            "in_work": "#add8e6",
            "ready_for_qc": "#fffacd",
            "done": "#90ee90",
            "wont_fix": "#f08080"
        },
        hole=0.4
    )
    
    st.plotly_chart(status_fig, use_container_width=True)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É –∏ –¥—Ä—É–≥–∏–µ –ø–æ–ª–µ–∑–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    col1, col2 = st.columns(2)
    
    with col1:
        selected_status = st.multiselect(
            "–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É:",
            options=df_filtered["status"].unique(),
            default=df_filtered["status"].unique()
        )
    
    with col2:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –∫–∞—Ä—Ç–æ—á–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã
        if "card_type" in df_filtered.columns and len(df_filtered["card_type"].unique()) > 1:
            selected_types = st.multiselect(
                "–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –∫–∞—Ä—Ç–æ—á–∫–∏:",
                options=df_filtered["card_type"].unique(),
                default=df_filtered["card_type"].unique()
            )
        else:
            selected_types = df_filtered["card_type"].unique() if "card_type" in df_filtered.columns else None
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–∞–º –∏ —Ç–∏–ø–∞–º
    df_filtered_status = df_filtered
    
    if selected_status:
        df_filtered_status = df_filtered_status[df_filtered_status["status"].isin(selected_status)]
    
    if "card_type" in df_filtered.columns and selected_types is not None and len(selected_types) > 0:
        df_filtered_status = df_filtered_status[df_filtered_status["card_type"].isin(selected_types)]
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ —Ä–∏—Å–∫—É (–æ—Ç –≤—ã—Å–æ–∫–æ–≥–æ –∫ –Ω–∏–∑–∫–æ–º—É)
    df_filtered_sorted = df_filtered_status.sort_values(by="risk", ascending=False)
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∞—Ç–∞-—Ä–µ–¥–∞–∫—Ç–æ—Ä —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π
    edited = st.data_editor(
        df_filtered_sorted, 
        column_config=editor_cfg, 
        hide_index=True,
        use_container_width=True
    )
    
    # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    col1, col2 = st.columns([1, 3])
    with col1:
        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å—Ç–∞—Ç—É—Å–∞—Ö", type="primary"):
            core.save_status_changes(df_filtered_sorted, edited, eng)
            st.success("–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    
    with col2:
        # –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å URL –∫–∞—Ä—Ç–æ—á–µ–∫, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏—Ö –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏
        if 'card_url' in df_filtered_sorted.columns and not df_filtered_sorted.empty:
            st.markdown("### –ü—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∏")
            
            # –°–æ–∑–¥–∞–µ–º DataFrame —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã
            card_links_df = pd.DataFrame()
            card_links_df['ID –∫–∞—Ä—Ç–æ—á–∫–∏'] = df_filtered_sorted['card_id'].apply(lambda x: int(x))
            card_links_df['–°—Å—ã–ª–∫–∞'] = df_filtered_sorted.apply(
                lambda row: f"[–û—Ç–∫—Ä—ã—Ç—å]({row['card_url']})" if pd.notna(row['card_url']) else "–ù–µ—Ç —Å—Å—ã–ª–∫–∏", 
                axis=1
            )
            card_links_df['–¢–∏–ø'] = df_filtered_sorted['card_type']
            card_links_df['–†–∏—Å–∫'] = df_filtered_sorted['risk'].apply(lambda x: f"{x:.2f}")
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
            st.dataframe(card_links_df, hide_index=True, use_container_width=True)
        
        st.markdown("""
        **–ü–æ–¥—Å–∫–∞–∑–∫–∞:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—Ä—Ç–æ—á–µ–∫.
        –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –∏–ª–∏ —É–±—ã–≤–∞–Ω–∏—é.
        """)