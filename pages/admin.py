# pages/admin.py
"""
–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞
"""

import streamlit as st
import pandas as pd
import numpy as np
import json
import os
import plotly.express as px
import plotly.graph_objects as go

import core
from core_config import get_config, save_config

def page_admin(df: pd.DataFrame):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–∞"""
    st.title("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–∞")

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = get_config()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —á–µ–∫–±–æ–∫—Å –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞ —Ä–∏—Å–∫–∞
    use_min_threshold = st.checkbox(
        "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —Ä–∏—Å–∫–∞ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç—Ä–∏–∫",
        value=config["risk_thresholds"].get("use_min_threshold", True),
        key="use_min_threshold",
        help="–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –∫—Ä–∏—Ç–∏—á–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –≤—Å–µ–≥–¥–∞ –±—É–¥—É—Ç –∏–º–µ—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞"
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if use_min_threshold != config["risk_thresholds"].get("use_min_threshold", True):
        config["risk_thresholds"]["use_min_threshold"] = use_min_threshold
        save_config(config)
        st.success("–ü–∞—Ä–∞–º–µ—Ç—Ä –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞ —Ä–∏—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        if st.button("üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏", type="primary"):
            # –û—á–∏—â–∞–µ–º –∫—ç—à –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ—Å—á–µ—Ç–∞
            st.cache_data.clear()
            st.success("–î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏!")
            st.rerun()

    st.markdown("## üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ –≥—Ä—É–ø–ø–∞–º —Ä–∏—Å–∫–∞")


    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –ø—Ä–æ–≥—Ä–∞–º–º —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º
    with st.expander("–§–∏–ª—å—Ç—Ä –ø—Ä–æ–≥—Ä–∞–º–º", expanded=True):
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º –∏–∑ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞
        programs = df["program"].unique()
        # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –ø—Ä–æ–≥—Ä–∞–º–º
        selected_programs = st.multiselect(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
            options=programs,
            default=programs,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–±—Ä–∞–Ω—ã –≤—Å–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
            key="risk_programs_filter"
        )
        
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã, —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞
        if selected_programs:
            recalculate = st.button("üìä –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", type="primary")
        else:
            st.warning("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            recalculate = False

    # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –∏–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤–ø–µ—Ä–≤—ã–µ
    if recalculate or 'risk_distribution' not in st.session_state:
        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø—Ä–æ–≥—Ä–∞–º–º–∞–º
        if selected_programs:
            filtered_df = df[df["program"].isin(selected_programs)]
        else:
            filtered_df = df
        
        # –°–æ–∑–¥–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∏ –¥–∏–∞–≥—Ä–∞–º–º—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
        if not filtered_df.empty:
            # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ —É—Ä–æ–≤–Ω—è–º —Ä–∏—Å–∫–∞
            risk_categories = {
                "–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫ (0-0.25)": (filtered_df["risk"] <= 0.25).sum(),
                "–£–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–∏—Å–∫ (0.26-0.50)": ((filtered_df["risk"] > 0.25) & (filtered_df["risk"] <= 0.50)).sum(),
                "–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ (0.51-0.75)": ((filtered_df["risk"] > 0.50) & (filtered_df["risk"] <= 0.75)).sum(),
                "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ä–∏—Å–∫ (0.76-1.0)": (filtered_df["risk"] > 0.75).sum()
            }
            
            # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã
            risk_df = pd.DataFrame({
                "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": risk_categories.keys(),
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": risk_categories.values()
            })
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ session_state –¥–ª—è –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            st.session_state['risk_distribution'] = risk_df
            st.session_state['filtered_card_count'] = len(filtered_df)
            st.session_state['selected_programs_count'] = len(selected_programs)
        else:
            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º")
            st.session_state['risk_distribution'] = pd.DataFrame({
                "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": ["–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫ (0-0.25)", "–£–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–∏—Å–∫ (0.26-0.50)", "–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ (0.51-0.75)", "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ä–∏—Å–∫ (0.76-1.0)"],
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": [0, 0, 0, 0]
            })
            st.session_state['filtered_card_count'] = 0
            st.session_state['selected_programs_count'] = 0

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –¥–∏–∞–≥—Ä–∞–º–º—ã
    if 'risk_distribution' in st.session_state:
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ –≥—Ä—É–ø–ø–∞–º —Ä–∏—Å–∫–∞
        col1, col2 = st.columns([2, 3])
        
        with col1:
            st.markdown(f"### –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞")
            
            # –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            risk_df = st.session_state['risk_distribution']
            card_count = st.session_state['filtered_card_count']
            programs_count = st.session_state['selected_programs_count']
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±–æ—Ä–∫–µ
            st.info(f"–í—ã–±—Ä–∞–Ω–æ {programs_count} –ø—Ä–æ–≥—Ä–∞–º–º, –≤—Å–µ–≥–æ {card_count} –∫–∞—Ä—Ç–æ—á–µ–∫")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            for i, row in risk_df.iterrows():
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                if "–ù–∏–∑–∫–∏–π" in row["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"]:
                    color = "green"
                elif "–£–º–µ—Ä–µ–Ω–Ω—ã–π" in row["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"]:
                    color = "orange"
                elif "–í—ã—Å–æ–∫–∏–π" in row["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"]:
                    color = "red"
                else:  # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π
                    color = "darkred"
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç
                percent = (row["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"] / card_count * 100) if card_count > 0 else 0
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É —Å —Ü–≤–µ—Ç–æ–º
                st.markdown(f"**{row['–ö–∞—Ç–µ–≥–æ—Ä–∏—è']}:** <span style='color:{color};'>{row['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']}</span> ({percent:.1f}%)", unsafe_allow_html=True)

            st.sidebar.markdown("---")
            if st.sidebar.button(
                "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏", 
                type="primary",
                key="refresh_risk_data_sidebar"  # –ë–æ–ª–µ–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á
            ):
                # –û—á–∏—â–∞–µ–º –∫—ç—à –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å –∑–∞–Ω–æ–≤–æ
                st.cache_data.clear()
                st.success("–ö—ç—à –æ—á–∏—â–µ–Ω. –î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏!")
                st.rerun()

        with col2:
            # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É —Å —Ü–≤–µ—Ç–∞–º–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ —É—Ä–æ–≤–Ω—è–º —Ä–∏—Å–∫–∞
            colors = ["#7FFF7F", "#FFFF7F", "#FFAA7F", "#FF7F7F"]  # –∑–µ–ª–µ–Ω—ã–π, –∂–µ–ª—Ç—ã–π, –æ—Ä–∞–Ω–∂–µ–≤—ã–π, –∫—Ä–∞—Å–Ω—ã–π
            
            # –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞
            fig1 = px.pie(
                risk_df,
                values="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
                names="–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ –≥—Ä—É–ø–ø–∞–º —Ä–∏—Å–∫–∞",
                color="–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
                color_discrete_map={
                    "–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫ (0-0.25)": colors[0],
                    "–£–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–∏—Å–∫ (0.26-0.50)": colors[1],
                    "–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ (0.51-0.75)": colors[2],
                    "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ä–∏—Å–∫ (0.76-1.0)": colors[3]
                },
                hole=0.4
            )
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–ø–∏—Å–µ–π
            fig1.update_traces(
                textposition='inside',
                textinfo='percent+label',
                insidetextfont=dict(color='white')
            )
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É
            st.plotly_chart(fig1, use_container_width=True)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞
        st.markdown("### –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É
        if st.session_state['filtered_card_count'] > 0:
            # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω–æ–≤–æ –¥–ª—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
            if selected_programs:
                hist_df = df[df["program"].isin(selected_programs)]
            else:
                hist_df = df
            
            # –°–æ–∑–¥–∞–µ–º –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞
            fig2 = px.histogram(
                hist_df,
                x="risk",
                nbins=40,
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é —Ä–∏—Å–∫–∞",
                color_discrete_sequence=["#FF9F7F"],
                labels={"risk": "–†–∏—Å–∫", "count": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫"}
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –¥–ª—è –≥—Ä–∞–Ω–∏—Ü —Ä–∏—Å–∫–∞
            fig2.add_vline(x=0.25, line_dash="dash", line_color="green", 
                        annotation_text="–ù–∏–∑–∫–∏–π", annotation_position="top")
            fig2.add_vline(x=0.50, line_dash="dash", line_color="orange", 
                        annotation_text="–£–º–µ—Ä–µ–Ω–Ω—ã–π", annotation_position="top")
            fig2.add_vline(x=0.75, line_dash="dash", line_color="red", 
                        annotation_text="–í—ã—Å–æ–∫–∏–π", annotation_position="top")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–∫–µ—Ç–∞
            fig2.update_layout(
                xaxis_title="–ó–Ω–∞—á–µ–Ω–∏–µ —Ä–∏—Å–∫–∞",
                yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫",
                bargap=0.2
            )
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É
            st.plotly_chart(fig2, use_container_width=True)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        st.markdown("---")
    
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config_path = "risk_config.json"
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ç–µ–∫—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π —á–µ—Ä–µ–∑ get_config()
    config = get_config()
    
    st.markdown("""
    –≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫.
    –ò–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    
    –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–ª–∏—è–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ —Ä–∞–∑–¥–µ–ª–µ "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏".
    """)
    
    tabs = st.tabs([
        "üìä –ú–µ—Ç—Ä–∏–∫–∏ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏", 
        "‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏", 
        "‚ö†Ô∏è –ú–µ—Ç—Ä–∏–∫–∏ –∂–∞–ª–æ–±",
        "üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ—Å–æ–≤", 
        "üéØ –¢—Ä–∏–∫–∏-–∫–∞—Ä—Ç–æ—á–∫–∏",  # –ù–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞
        "üìà –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
    ])
    
    # –í–∫–ª–∞–¥–∫–∞ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
    with tabs[0]:
        st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏")
        
        col1, col2 = st.columns([3, 2])
        
        with col1:
            st.markdown("### –ü–æ—Ä–æ–≥–∏ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏")
            
            # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ä–æ–≥–æ–≤ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
            discrimination_good = st.slider(
                "–•–æ—Ä–æ—à–∞—è –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç—å (–≤—ã—à–µ —ç—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è)",
                min_value=0.0,
                max_value=1.0,
                value=float(config["discrimination"]["good"]),
                step=0.01,
                format="%.2f",
                key="discrimination_good"
            )
            
            discrimination_medium = st.slider(
                "–°—Ä–µ–¥–Ω—è—è –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç—å (–≤—ã—à–µ —ç—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è)",
                min_value=0.0,
                max_value=discrimination_good,
                value=min(float(config["discrimination"]["medium"]), discrimination_good),
                step=0.01,
                format="%.2f",
                key="discrimination_medium"
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            config["discrimination"]["good"] = discrimination_good
            config["discrimination"]["medium"] = discrimination_medium
            
            st.markdown("""
            ### –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:
            - **–•–æ—Ä–æ—à–∞—è**: > {:.2f} ‚Üí –†–∏—Å–∫ 0-0.25
            - **–°—Ä–µ–¥–Ω—è—è**: {:.2f}-{:.2f} ‚Üí –†–∏—Å–∫ 0.26-0.50
            - **–ù–∏–∑–∫–∞—è**: < {:.2f} ‚Üí –†–∏—Å–∫ 0.51-1.0
            """.format(
                discrimination_good, 
                discrimination_medium,
                discrimination_good,
                discrimination_medium
            ))
        
        with col2:
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞–Ω–∏—Ü –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
            x = np.linspace(0, 1, 100)
            y = []
            
            for val in x:
                if val >= discrimination_good:
                    # –•–æ—Ä–æ—à–∞—è –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç—å (0-0.25)
                    normalized = min(1.0, (val - discrimination_good) / 0.4)
                    y.append(max(0, 0.25 * (1 - normalized)))
                elif val >= discrimination_medium:
                    # –°—Ä–µ–¥–Ω—è—è –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç—å (0.26-0.50)
                    normalized = (val - discrimination_medium) / (discrimination_good - discrimination_medium)
                    y.append(0.50 - normalized * 0.24)
                else:
                    # –ù–∏–∑–∫–∞—è –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç—å (0.51-1.0)
                    normalized = max(0, val / discrimination_medium)
                    y.append(1.0 - normalized * 0.49)
            
            fig = go.Figure()
            fig.add_trace(go.Scatter(
                x=x, 
                y=y, 
                mode='lines', 
                name='–†–∏—Å–∫',
                line=dict(width=2, color='red')
            ))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –¥–ª—è –≥—Ä–∞–Ω–∏—Ü
            fig.add_vline(x=discrimination_medium, line_dash="dash", line_color="orange", 
                         annotation_text="–°—Ä–µ–¥–Ω—è—è", annotation_position="top")
            fig.add_vline(x=discrimination_good, line_dash="dash", line_color="green", 
                         annotation_text="–•–æ—Ä–æ—à–∞—è", annotation_position="top")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –¥–ª—è —É—Ä–æ–≤–Ω–µ–π —Ä–∏—Å–∫–∞
            fig.add_hline(y=0.25, line_dash="dash", line_color="green", 
                         annotation_text="–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫", annotation_position="left")
            fig.add_hline(y=0.50, line_dash="dash", line_color="orange", 
                         annotation_text="–£–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–∏—Å–∫", annotation_position="left")
            fig.add_hline(y=0.75, line_dash="dash", line_color="red", 
                         annotation_text="–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫", annotation_position="left")
            
            fig.update_layout(
                title="–ì—Ä–∞—Ñ–∏–∫ —Ä–∏—Å–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏",
                xaxis_title="–î–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç—å",
                yaxis_title="–†–∏—Å–∫",
                height=500
            )
            
            st.plotly_chart(fig, use_container_width=True)
    
    # –í–∫–ª–∞–¥–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
    with tabs[1]:
        st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏")
        
        col1, col2 = st.columns([3, 2])
        
        with col1:
            st.markdown("### –ü–æ—Ä–æ–≥–∏ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏")
            
            # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ä–æ–≥–æ–≤ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
            success_boring = st.slider(
                "–°–∫—É—á–Ω–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å (–≤—ã—à–µ —ç—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è)",
                min_value=0.8,
                max_value=1.0,
                value=float(config["success_rate"]["boring"]),
                step=0.01,
                format="%.2f",
                key="success_boring"
            )
            
            success_optimal_high = min(success_boring, float(config["success_rate"]["optimal_high"]))
            
            success_optimal_low = st.slider(
                "–ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏",
                min_value=0.5,
                max_value=success_boring,
                value=min(float(config["success_rate"]["optimal_low"]), success_boring),
                step=0.01,
                format="%.2f",
                key="success_optimal_low"
            )
            
            success_suboptimal_low = st.slider(
                "–ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ —Å—É–±–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏",
                min_value=0.2,
                max_value=success_optimal_low,
                value=min(float(config["success_rate"]["suboptimal_low"]), success_optimal_low),
                step=0.01,
                format="%.2f",
                key="success_suboptimal_low"
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            config["success_rate"]["boring"] = success_boring
            config["success_rate"]["optimal_high"] = success_boring  # –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ = boring
            config["success_rate"]["optimal_low"] = success_optimal_low
            config["success_rate"]["suboptimal_low"] = success_suboptimal_low
            
            st.markdown("""
            ### –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞
            """)
            
            # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ä–æ–≥–æ–≤ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏
            first_try_too_easy = st.slider(
                "–°–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç–∞—è –∑–∞–¥–∞—á–∞ (–≤—ã—à–µ —ç—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è)",
                min_value=0.8,
                max_value=1.0,
                value=float(config["first_try"]["too_easy"]),
                step=0.01,
                format="%.2f",
                key="first_try_too_easy"
            )
            
            first_try_optimal_low = st.slider(
                "–ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏",
                min_value=0.4,
                max_value=first_try_too_easy,
                value=min(float(config["first_try"]["optimal_low"]), first_try_too_easy),
                step=0.01,
                format="%.2f",
                key="first_try_optimal_low"
            )
            
            first_try_multiple_low = st.slider(
                "–ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ —Ç—Ä–µ–±—É—é—â–µ–π –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫",
                min_value=0.1,
                max_value=first_try_optimal_low,
                value=min(float(config["first_try"]["multiple_low"]), first_try_optimal_low),
                step=0.01,
                format="%.2f",
                key="first_try_multiple_low"
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            config["first_try"]["too_easy"] = first_try_too_easy
            config["first_try"]["optimal_low"] = first_try_optimal_low
            config["first_try"]["multiple_low"] = first_try_multiple_low
            
            st.markdown("""
            ### –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏:
            - **–°–∫—É—á–Ω–∞—è**: > {:.2f} ‚Üí –†–∏—Å–∫ 0.30-0.40
            - **–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è**: {:.2f}-{:.2f} ‚Üí –†–∏—Å–∫ 0-0.25
            - **–°—É–±–æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è**: {:.2f}-{:.2f} ‚Üí –†–∏—Å–∫ 0.26-0.50
            - **–§—Ä—É—Å—Ç—Ä–∏—Ä—É—é—â–∞—è**: < {:.2f} ‚Üí –†–∏—Å–∫ 0.51-1.0
            
            ### –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏:
            - **–°–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç–∞—è**: > {:.2f} ‚Üí –†–∏—Å–∫ 0.26-0.35
            - **–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è**: {:.2f}-{:.2f} ‚Üí –†–∏—Å–∫ 0-0.25
            - **–¢—Ä–µ–±—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫**: {:.2f}-{:.2f} ‚Üí –†–∏—Å–∫ 0.26-0.50
            - **–°–ª–æ–∂–Ω–∞—è**: < {:.2f} ‚Üí –†–∏—Å–∫ 0.51-1.0
            """.format(
                success_boring,
                success_optimal_low, success_boring,
                success_suboptimal_low, success_optimal_low,
                success_suboptimal_low,
                first_try_too_easy,
                first_try_optimal_low, first_try_too_easy,
                first_try_multiple_low, first_try_optimal_low,
                first_try_multiple_low
            ))
        
        with col2:
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞–Ω–∏—Ü —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
            st.markdown("### –ì—Ä–∞—Ñ–∏–∫ —Ä–∏—Å–∫–∞ –¥–ª—è —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏")
            
            x = np.linspace(0, 1, 100)
            success_y = []
            
            for val in x:
                if val > success_boring:
                    # –°–∫—É—á–Ω–∞—è (—Å–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç–∞—è) –∑–∞–¥–∞—á–∞ (0.30-0.40)
                    normalized = min(1.0, (val - success_boring) / 0.05)
                    success_y.append(0.30 + normalized * 0.10)
                elif val >= success_optimal_low:
                    # –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å (0-0.25)
                    normalized = (val - success_optimal_low) / (success_boring - success_optimal_low)
                    success_y.append(0.25 * (1 - normalized))
                elif val >= success_suboptimal_low:
                    # –°—É–±–æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å (0.26-0.50)
                    normalized = (val - success_suboptimal_low) / (success_optimal_low - success_suboptimal_low)
                    success_y.append(0.50 - normalized * 0.24)
                else:
                    # –§—Ä—É—Å—Ç—Ä–∏—Ä—É—é—â–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å (0.51-1.0)
                    normalized = max(0, val / success_suboptimal_low)
                    success_y.append(1.0 - normalized * 0.49)
            
            fig_success = go.Figure()
            fig_success.add_trace(go.Scatter(
                x=x, 
                y=success_y, 
                mode='lines', 
                name='–†–∏—Å–∫',
                line=dict(width=2, color='blue')
            ))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –¥–ª—è –≥—Ä–∞–Ω–∏—Ü
            fig_success.add_vline(x=success_suboptimal_low, line_dash="dash", line_color="red", 
                                 annotation_text="–§—Ä—É—Å—Ç—Ä.", annotation_position="top")
            fig_success.add_vline(x=success_optimal_low, line_dash="dash", line_color="orange", 
                                 annotation_text="–°—É–±–æ–ø—Ç.", annotation_position="top")
            fig_success.add_vline(x=success_boring, line_dash="dash", line_color="green", 
                                 annotation_text="–û–ø—Ç–∏–º.", annotation_position="top")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –¥–ª—è —É—Ä–æ–≤–Ω–µ–π —Ä–∏—Å–∫–∞
            fig_success.add_hline(y=0.25, line_dash="dash", line_color="green", 
                                 annotation_text="–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫", annotation_position="left")
            fig_success.add_hline(y=0.50, line_dash="dash", line_color="orange", 
                                 annotation_text="–£–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–∏—Å–∫", annotation_position="left")
            fig_success.add_hline(y=0.75, line_dash="dash", line_color="red", 
                                 annotation_text="–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫", annotation_position="left")
            
            fig_success.update_layout(
                title="–ì—Ä–∞—Ñ–∏–∫ —Ä–∏—Å–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏",
                xaxis_title="–£—Å–ø–µ—à–Ω–æ—Å—Ç—å",
                yaxis_title="–†–∏—Å–∫",
                height=300
            )
            
            st.plotly_chart(fig_success, use_container_width=True)
            
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞–Ω–∏—Ü —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏
            st.markdown("### –ì—Ä–∞—Ñ–∏–∫ —Ä–∏—Å–∫–∞ –¥–ª—è —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏")
            
            first_try_y = []
            
            for val in x:
                if val > first_try_too_easy:
                    # –°–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç–∞—è –∑–∞–¥–∞—á–∞ (0.26-0.35)
                    normalized = min(1.0, (val - first_try_too_easy) / 0.1)
                    first_try_y.append(0.26 + normalized * 0.09)
                elif val >= first_try_optimal_low:
                    # –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏ (0-0.25)
                    normalized = (val - first_try_optimal_low) / (first_try_too_easy - first_try_optimal_low)
                    first_try_y.append(0.25 * (1 - normalized))
                elif val >= first_try_multiple_low:
                    # –¢—Ä–µ–±—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫ (0.26-0.50)
                    normalized = (val - first_try_multiple_low) / (first_try_optimal_low - first_try_multiple_low)
                    first_try_y.append(0.50 - normalized * 0.24)
                else:
                    # –°–ª–æ–∂–Ω–∞—è –∑–∞–¥–∞—á–∞ (0.51-1.0)
                    normalized = max(0, val / first_try_multiple_low)
                    first_try_y.append(1.0 - normalized * 0.49)
            
            fig_first_try = go.Figure()
            fig_first_try.add_trace(go.Scatter(
                x=x, 
                y=first_try_y, 
                mode='lines', 
                name='–†–∏—Å–∫',
                line=dict(width=2, color='green')
            ))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –¥–ª—è –≥—Ä–∞–Ω–∏—Ü
            fig_first_try.add_vline(x=first_try_multiple_low, line_dash="dash", line_color="red", 
                                   annotation_text="–°–ª–æ–∂–Ω–∞—è", annotation_position="top")
            fig_first_try.add_vline(x=first_try_optimal_low, line_dash="dash", line_color="orange", 
                                   annotation_text="–ù–µ—Å–∫. –ø–æ–ø—ã—Ç–æ–∫", annotation_position="top")
            fig_first_try.add_vline(x=first_try_too_easy, line_dash="dash", line_color="green", 
                                   annotation_text="–û–ø—Ç–∏–º.", annotation_position="top")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –¥–ª—è —É—Ä–æ–≤–Ω–µ–π —Ä–∏—Å–∫–∞
            fig_first_try.add_hline(y=0.25, line_dash="dash", line_color="green", 
                                   annotation_text="–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫", annotation_position="left")
            fig_first_try.add_hline(y=0.50, line_dash="dash", line_color="orange", 
                                   annotation_text="–£–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–∏—Å–∫", annotation_position="left")
            fig_first_try.add_hline(y=0.75, line_dash="dash", line_color="red", 
                                   annotation_text="–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫", annotation_position="left")
            
            fig_first_try.update_layout(
                title="–ì—Ä–∞—Ñ–∏–∫ —Ä–∏—Å–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏",
                xaxis_title="–£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏",
                yaxis_title="–†–∏—Å–∫",
                height=300
            )
            
            st.plotly_chart(fig_first_try, use_container_width=True)
    
    # –í–∫–ª–∞–¥–∫–∞ –∂–∞–ª–æ–± –∏ –ø–æ–ø—ã—Ç–æ–∫
    with tabs[2]:
        st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∂–∞–ª–æ–± –∏ –ø–æ–ø—ã—Ç–æ–∫")
        
        col1, col2 = st.columns([3, 2])
        
        with col1:
            st.markdown("### –ü–æ—Ä–æ–≥–∏ –∂–∞–ª–æ–± (–∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)")
            
            # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ä–æ–≥–æ–≤ –∂–∞–ª–æ–±
            complaints_critical = st.number_input(
                "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∂–∞–ª–æ–± (–≤—ã—à–µ —ç—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è)",
                min_value=1,
                max_value=1000,
                value=int(config["complaints"]["critical"]),
                step=1,
                key="complaints_critical"
            )
            
            complaints_high = st.number_input(
                "–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∂–∞–ª–æ–± (–≤—ã—à–µ —ç—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è)",
                min_value=1,
                max_value=complaints_critical-1,
                value=min(int(config["complaints"]["high"]), complaints_critical-1),
                step=1,
                key="complaints_high"
            )
            
            complaints_medium = st.number_input(
                "–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –∂–∞–ª–æ–± (–≤—ã—à–µ —ç—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è)",
                min_value=0,
                max_value=complaints_high-1,
                value=min(int(config["complaints"]["medium"]), complaints_high-1),
                step=1,
                key="complaints_medium"
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            config["complaints"]["critical"] = complaints_critical
            config["complaints"]["high"] = complaints_high
            config["complaints"]["medium"] = complaints_medium
            
            st.markdown("### –ü–æ—Ä–æ–≥–∏ –¥–æ–ª–∏ –ø—ã—Ç–∞–≤—à–∏—Ö—Å—è —Ä–µ—à–∏—Ç—å")
            
            # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ä–æ–≥–æ–≤ –¥–æ–ª–∏ –ø—ã—Ç–∞–≤—à–∏—Ö—Å—è —Ä–µ—à–∏—Ç—å
            attempts_high = st.slider(
                "–í—ã—Å–æ–∫–∞—è –¥–æ–ª—è –ø—ã—Ç–∞–≤—à–∏—Ö—Å—è (–≤—ã—à–µ —ç—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è)",
                min_value=0.8,
                max_value=1.0,
                value=float(config["attempts"]["high"]),
                step=0.01,
                format="%.2f",
                key="attempts_high"
            )
            
            attempts_normal_low = st.slider(
                "–ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π –¥–æ–ª–∏ –ø—ã—Ç–∞–≤—à–∏—Ö—Å—è",
                min_value=0.6,
                max_value=attempts_high,
                value=min(float(config["attempts"]["normal_low"]), attempts_high),
                step=0.01,
                format="%.2f",
                key="attempts_normal_low"
            )
            
            attempts_insufficient_low = st.slider(
                "–ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π –¥–æ–ª–∏ –ø—ã—Ç–∞–≤—à–∏—Ö—Å—è",
                min_value=0.2,
                max_value=attempts_normal_low,
                value=min(float(config["attempts"]["insufficient_low"]), attempts_normal_low),
                step=0.01,
                format="%.2f",
                key="attempts_insufficient_low"
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            config["attempts"]["high"] = attempts_high
            config["attempts"]["normal_low"] = attempts_normal_low
            config["attempts"]["insufficient_low"] = attempts_insufficient_low
            
            st.markdown("""
            ### –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∂–∞–ª–æ–±:
            - **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ**: > {} ‚Üí –†–∏—Å–∫ 0.76-1.0
            - **–í—ã—Å–æ–∫–æ–µ**: {}-{} ‚Üí –†–∏—Å–∫ 0.51-0.75
            - **–°—Ä–µ–¥–Ω–µ–µ**: {}-{} ‚Üí –†–∏—Å–∫ 0.26-0.50
            - **–ù–∏–∑–∫–æ–µ**: < {} ‚Üí –†–∏—Å–∫ 0-0.25
            
            ### –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–æ–ª–∏ –ø—ã—Ç–∞–≤—à–∏—Ö—Å—è:
            - **–í—ã—Å–æ–∫–∞—è**: > {:.2f} ‚Üí –†–∏—Å–∫ 0-0.10
            - **–ù–æ—Ä–º–∞–ª—å–Ω–∞—è**: {:.2f}-{:.2f} ‚Üí –†–∏—Å–∫ 0-0.25
            - **–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è**: {:.2f}-{:.2f} ‚Üí –†–∏—Å–∫ 0.26-0.50
            - **–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º–∞—è**: < {:.2f} ‚Üí –†–∏—Å–∫ 0.51-1.0
            """.format(
                complaints_critical,
                complaints_high, complaints_critical,
                complaints_medium, complaints_high,
                complaints_medium,
                attempts_high,
                attempts_normal_low, attempts_high,
                attempts_insufficient_low, attempts_normal_low,
                attempts_insufficient_low
            ))
        
        with col2:
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞–Ω–∏—Ü –∂–∞–ª–æ–±
            st.markdown("### –ì—Ä–∞—Ñ–∏–∫ —Ä–∏—Å–∫–∞ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∂–∞–ª–æ–±")
            
            # –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –∂–∞–ª–æ–±
            complaints_x = np.linspace(0, int(complaints_critical * 1.5), 100)
            complaints_y = []
            
            for val in complaints_x:
                if val > complaints_critical:
                    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∂–∞–ª–æ–± (0.76-1.0)
                    excess = min(100, val - complaints_critical)
                    normalized = excess / 100
                    complaints_y.append(0.76 + normalized * 0.24)
                elif val >= complaints_high:
                    # –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∂–∞–ª–æ–± (0.51-0.75)
                    normalized = (val - complaints_high) / (complaints_critical - complaints_high)
                    complaints_y.append(0.51 + normalized * 0.24)
                elif val >= complaints_medium:
                    # –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –∂–∞–ª–æ–± (0.26-0.50)
                    normalized = (val - complaints_medium) / (complaints_high - complaints_medium)
                    complaints_y.append(0.26 + normalized * 0.24)
                else:
                    # –ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∂–∞–ª–æ–± (0-0.25)
                    normalized = val / max(1, complaints_medium)
                    complaints_y.append(normalized * 0.25)
            
            fig_complaints = go.Figure()
            fig_complaints.add_trace(go.Scatter(
                x=complaints_x, 
                y=complaints_y, 
                mode='lines', 
                name='–†–∏—Å–∫',
                line=dict(width=2, color='red')
            ))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –¥–ª—è –≥—Ä–∞–Ω–∏—Ü
            fig_complaints.add_vline(x=complaints_medium, line_dash="dash", line_color="green", 
                                    annotation_text="–°—Ä–µ–¥–Ω–∏–π", annotation_position="top")
            fig_complaints.add_vline(x=complaints_high, line_dash="dash", line_color="orange", 
                                    annotation_text="–í—ã—Å–æ–∫–∏–π", annotation_position="top")
            fig_complaints.add_vline(x=complaints_critical, line_dash="dash", line_color="red", 
                                    annotation_text="–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π", annotation_position="top")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –¥–ª—è —É—Ä–æ–≤–Ω–µ–π —Ä–∏—Å–∫–∞
            fig_complaints.add_hline(y=0.25, line_dash="dash", line_color="green", 
                                    annotation_text="–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫", annotation_position="left")
            fig_complaints.add_hline(y=0.50, line_dash="dash", line_color="orange", 
                                    annotation_text="–£–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–∏—Å–∫", annotation_position="left")
            fig_complaints.add_hline(y=0.75, line_dash="dash", line_color="red", 
                                    annotation_text="–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫", annotation_position="left")
            
            fig_complaints.update_layout(
                title="–ì—Ä–∞—Ñ–∏–∫ —Ä–∏—Å–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∂–∞–ª–æ–±",
                xaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∞–ª–æ–±",
                yaxis_title="–†–∏—Å–∫",
                height=300
            )
            
            st.plotly_chart(fig_complaints, use_container_width=True)
            
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞–Ω–∏—Ü –¥–æ–ª–∏ –ø—ã—Ç–∞–≤—à–∏—Ö—Å—è
            st.markdown("### –ì—Ä–∞—Ñ–∏–∫ —Ä–∏—Å–∫–∞ –¥–ª—è –¥–æ–ª–∏ –ø—ã—Ç–∞–≤—à–∏—Ö—Å—è")
            
            x = np.linspace(0, 1, 100)
            attempts_y = []
            
            for val in x:
                if val > attempts_high:
                    # –í—ã—Å–æ–∫–∞—è –¥–æ–ª—è –ø—ã—Ç–∞–≤—à–∏—Ö—Å—è (0-0.10)
                    normalized = min(1.0, (val - attempts_high) / 0.05)
                    attempts_y.append(0.10 * (1 - normalized))
                elif val >= attempts_normal_low:
                    # –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –¥–æ–ª—è –ø—ã—Ç–∞–≤—à–∏—Ö—Å—è (0-0.25)
                    normalized = (val - attempts_normal_low) / (attempts_high - attempts_normal_low)
                    attempts_y.append(0.25 - normalized * 0.15)
                elif val >= attempts_insufficient_low:
                    # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –¥–æ–ª—è –ø—ã—Ç–∞–≤—à–∏—Ö—Å—è (0.26-0.50)
                    normalized = (val - attempts_insufficient_low) / (attempts_normal_low - attempts_insufficient_low)
                    attempts_y.append(0.50 - normalized * 0.24)
                else:
                    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º–∞—è –¥–æ–ª—è –ø—ã—Ç–∞–≤—à–∏—Ö—Å—è (0.51-1.0)
                    normalized = max(0, val / attempts_insufficient_low)
                    attempts_y.append(1.0 - normalized * 0.49)
            
            fig_attempts = go.Figure()
            fig_attempts.add_trace(go.Scatter(
                x=x, 
                y=attempts_y, 
                mode='lines', 
                name='–†–∏—Å–∫',
                line=dict(width=2, color='purple')
            ))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –¥–ª—è –≥—Ä–∞–Ω–∏—Ü
            fig_attempts.add_vline(x=attempts_insufficient_low, line_dash="dash", line_color="red", 
                                  annotation_text="–ò–≥–Ω–æ—Ä–∏—Ä.", annotation_position="top")
            fig_attempts.add_vline(x=attempts_normal_low, line_dash="dash", line_color="orange", 
                                  annotation_text="–ù–µ–¥–æ—Å—Ç.", annotation_position="top")
            fig_attempts.add_vline(x=attempts_high, line_dash="dash", line_color="green", 
                                  annotation_text="–ù–æ—Ä–º.", annotation_position="top")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –¥–ª—è —É—Ä–æ–≤–Ω–µ–π —Ä–∏—Å–∫–∞
            fig_attempts.add_hline(y=0.25, line_dash="dash", line_color="green", 
                                  annotation_text="–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫", annotation_position="left")
            fig_attempts.add_hline(y=0.50, line_dash="dash", line_color="orange", 
                                  annotation_text="–£–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–∏—Å–∫", annotation_position="left")
            fig_attempts.add_hline(y=0.75, line_dash="dash", line_color="red", 
                                  annotation_text="–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫", annotation_position="left")
            
            fig_attempts.update_layout(
                title="–ì—Ä–∞—Ñ–∏–∫ —Ä–∏—Å–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–æ–ª–∏ –ø—ã—Ç–∞–≤—à–∏—Ö—Å—è",
                xaxis_title="–î–æ–ª—è –ø—ã—Ç–∞–≤—à–∏—Ö—Å—è",
                yaxis_title="–†–∏—Å–∫",
                height=300
            )
            
            st.plotly_chart(fig_attempts, use_container_width=True)
    
    # –í–∫–ª–∞–¥–∫–∞ –≤–µ—Å–æ–≤ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    with tabs[3]:
        st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Å–æ–≤ –º–µ—Ç—Ä–∏–∫ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∏—Å–∫–∞")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("### –í–µ—Å–∞ –¥–ª—è –º–µ—Ç—Ä–∏–∫")
            
            # –°–ª–∞–π–¥–µ—Ä—ã –≤–µ—Å–æ–≤ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π —Å—É–º–º—ã 1.0
            current_sum = sum([
                config["weights"]["complaint_rate"],
                config["weights"]["success_rate"],
                config["weights"]["discrimination"],
                config["weights"]["first_try"],
                config["weights"]["attempted"]
            ])
            
            complaint_weight = st.slider(
                "–í–µ—Å –∂–∞–ª–æ–±",
                min_value=0.05,
                max_value=0.5,
                value=float(config["weights"]["complaint_rate"]),
                step=0.05,
                format="%.2f",
                key="complaint_weight"
            )
            
            success_weight = st.slider(
                "–í–µ—Å —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏",
                min_value=0.05,
                max_value=0.5,
                value=float(config["weights"]["success_rate"]),
                step=0.05,
                format="%.2f",
                key="success_weight"
            )
            
            discrimination_weight = st.slider(
                "–í–µ—Å –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏",
                min_value=0.05,
                max_value=0.5,
                value=float(config["weights"]["discrimination"]),
                step=0.05,
                format="%.2f",
                key="discrimination_weight"
            )
            
            first_try_weight = st.slider(
                "–í–µ—Å —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏",
                min_value=0.05,
                max_value=0.5,
                value=float(config["weights"]["first_try"]),
                step=0.05,
                format="%.2f",
                key="first_try_weight"
            )
            
            attempted_weight = st.slider(
                "–í–µ—Å –¥–æ–ª–∏ –ø—ã—Ç–∞–≤—à–∏—Ö—Å—è",
                min_value=0.05,
                max_value=0.5,
                value=float(config["weights"]["attempted"]),
                step=0.05,
                format="%.2f",
                key="attempted_weight"
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—É –≤–µ—Å–æ–≤ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            new_sum = complaint_weight + success_weight + discrimination_weight + first_try_weight + attempted_weight
            
            if abs(new_sum - 1.0) > 0.01:
                st.warning(f"–°—É–º–º–∞ –≤–µ—Å–æ–≤ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–≤–Ω–∞ 1.0. –¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: {new_sum:.2f}")
                
                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤–µ—Å–∞
                if st.button("–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤–µ—Å–∞"):
                    scale = 1.0 / new_sum
                    complaint_weight *= scale
                    success_weight *= scale
                    discrimination_weight *= scale
                    first_try_weight *= scale
                    attempted_weight *= scale
                    st.success("–í–µ—Å–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω—ã!")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤–µ—Å–æ–≤
            config["weights"]["complaint_rate"] = complaint_weight
            config["weights"]["success_rate"] = success_weight
            config["weights"]["discrimination"] = discrimination_weight
            config["weights"]["first_try"] = first_try_weight
            config["weights"]["attempted"] = attempted_weight
            
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ—Å–æ–≤ –≤ –≤–∏–¥–µ –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
            weights_df = pd.DataFrame({
                "–ú–µ—Ç—Ä–∏–∫–∞": ["–ñ–∞–ª–æ–±—ã", "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å", "–î–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç—å", "–ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞", "–î–æ–ª—è –ø—ã—Ç–∞–≤—à–∏—Ö—Å—è"],
                "–í–µ—Å": [complaint_weight, success_weight, discrimination_weight, first_try_weight, attempted_weight]
            })
            
            fig_weights = px.pie(
                weights_df, 
                values='–í–µ—Å', 
                names='–ú–µ—Ç—Ä–∏–∫–∞', 
                title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Å–æ–≤ –º–µ—Ç—Ä–∏–∫',
                color_discrete_sequence=px.colors.qualitative.Set2
            )
            
            st.plotly_chart(fig_weights, use_container_width=True)
        
        with col2:
            st.markdown("### –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∏—Å–∫–∞")
            
            # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            alpha_weight_avg = st.slider(
                "–í–µ—Å –≤–∑–≤–µ—à–µ–Ω–Ω–æ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ –≤ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ñ–æ—Ä–º—É–ª–µ",
                min_value=0.0,
                max_value=1.0,
                value=float(config["risk_thresholds"]["alpha_weight_avg"]),
                step=0.05,
                format="%.2f",
                key="alpha_weight_avg",
                help="–ü—Ä–∏ –∑–Ω–∞—á–µ–Ω–∏–∏ 1.0 –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤–∑–≤–µ—à–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ, –ø—Ä–∏ 0.0 - —Ç–æ–ª—å–∫–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫"
            )
            
            risk_critical_threshold = st.slider(
                "–ü–æ—Ä–æ–≥ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∏—Å–∫–∞",
                min_value=0.5,
                max_value=0.95,
                value=float(config["risk_thresholds"]["critical"]),
                step=0.05,
                format="%.2f",
                key="risk_critical_threshold",
                help="–ó–Ω–∞—á–µ–Ω–∏–µ —Ä–∏—Å–∫–∞ –≤—ã—à–µ —ç—Ç–æ–≥–æ –ø–æ—Ä–æ–≥–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º"
            )
            
            risk_high_threshold = st.slider(
                "–ü–æ—Ä–æ–≥ –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞",
                min_value=0.25,
                max_value=risk_critical_threshold - 0.05,
                value=min(float(config["risk_thresholds"]["high"]), risk_critical_threshold - 0.05),
                step=0.05,
                format="%.2f",
                key="risk_high_threshold",
                help="–ó–Ω–∞—á–µ–Ω–∏–µ —Ä–∏—Å–∫–∞ –≤—ã—à–µ —ç—Ç–æ–≥–æ –ø–æ—Ä–æ–≥–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –≤—ã—Å–æ–∫–∏–º"
            )
            
            min_risk_for_critical = st.slider(
                "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —Ä–∏—Å–∫–∞ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –º–µ—Ç—Ä–∏–∫–∏",
                min_value=0.5,
                max_value=risk_critical_threshold,
                value=min(float(config["risk_thresholds"]["min_for_critical"]), risk_critical_threshold),
                step=0.05,
                format="%.2f",
                key="min_risk_for_critical"
            )
            
            min_risk_for_high = st.slider(
                "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —Ä–∏—Å–∫–∞ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –≤—ã—Å–æ–∫–æ–π —Ä–∏—Å–∫-–º–µ—Ç—Ä–∏–∫–∏",
                min_value=0.25,
                max_value=min_risk_for_critical - 0.05,
                value=min(float(config["risk_thresholds"]["min_for_high"]), min_risk_for_critical - 0.05),
                step=0.05,
                format="%.2f",
                key="min_risk_for_high"
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            config["risk_thresholds"]["alpha_weight_avg"] = alpha_weight_avg
            config["risk_thresholds"]["critical"] = risk_critical_threshold
            config["risk_thresholds"]["high"] = risk_high_threshold
            config["risk_thresholds"]["min_for_critical"] = min_risk_for_critical
            config["risk_thresholds"]["min_for_high"] = min_risk_for_high
            
            st.markdown("### –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏")
            
            significance_threshold = st.number_input(
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏",
                min_value=10,
                max_value=1000,
                value=int(config["stats"]["significance_threshold"]),
                step=10,
                key="significance_threshold"
            )
            
            neutral_risk_value = st.slider(
                "–ó–Ω–∞—á–µ–Ω–∏–µ —Ä–∏—Å–∫–∞ –∫ –∫–æ—Ç–æ—Ä–æ–º—É —Å–º–µ—â–∞–µ–º—Å—è –ø—Ä–∏ –º–∞–ª–æ–º —á–∏—Å–ª–µ –ø–æ–ø—ã—Ç–æ–∫",
                min_value=0.25,
                max_value=0.75,
                value=float(config["stats"]["neutral_risk_value"]),
                step=0.05,
                format="%.2f",
                key="neutral_risk_value"
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏
            config["stats"]["significance_threshold"] = significance_threshold
            config["stats"]["neutral_risk_value"] = neutral_risk_value
            
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏
            st.markdown("### –í–ª–∏—è–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É —Ä–∏—Å–∫–∞")
            
            attempts_x = np.linspace(0, significance_threshold * 1.5, 100)
            confidence_y = []
            
            for val in attempts_x:
                confidence_factor = min(val / significance_threshold, 1.0)
                confidence_y.append(confidence_factor)
            
            fig_confidence = go.Figure()
            fig_confidence.add_trace(go.Scatter(
                x=attempts_x, 
                y=confidence_y, 
                mode='lines', 
                name='–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–æ–≤–µ—Ä–∏—è',
                line=dict(width=2, color='blue')
            ))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é –¥–ª—è –ø–æ—Ä–æ–≥–∞
            fig_confidence.add_vline(x=significance_threshold, line_dash="dash", line_color="red", 
                                    annotation_text="–ü–æ–ª–Ω–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å", annotation_position="top")
            
            fig_confidence.update_layout(
                title="–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–æ–≤–µ—Ä–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫",
                xaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫",
                yaxis_title="–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–æ–≤–µ—Ä–∏—è",
                height=250
            )
            
            st.plotly_chart(fig_confidence, use_container_width=True)
    
    # –í–∫–ª–∞–¥–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ "—Ç—Ä–∏–∫–∏"-–∫–∞—Ä—Ç–æ—á–µ–∫
    with tabs[4]:  # –ò–Ω–¥–µ–∫—Å 4 —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π –≤–∫–ª–∞–¥–∫–µ
        st.subheader("–ê–Ω–∞–ª–∏–∑ \"—Ç—Ä–∏–∫–∏\"-–∫–∞—Ä—Ç–æ—á–µ–∫")
        
        st.markdown("""
        ## –ß—Ç–æ —Ç–∞–∫–æ–µ "—Ç—Ä–∏–∫–∏"-–∫–∞—Ä—Ç–æ—á–∫–∏?
        
        **"–¢—Ä–∏–∫–∏"-–∫–∞—Ä—Ç–æ—á–∫–∏** - —ç—Ç–æ –∑–∞–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –æ–±–ª–∞–¥–∞—é—Ç —Å–ª–µ–¥—É—é—â–∏–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏:
        - **–í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ–±—â–µ–π —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏** - –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ –∏—Ç–æ–≥–µ —Ä–µ—à–∞—é—Ç –∑–∞–¥–∞–Ω–∏–µ
        - **–ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞ —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏** - —Å—Ç—É–¥–µ–Ω—Ç–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è
        - –ë–æ–ª—å—à–∞—è **—Ä–∞–∑–Ω–∏—Ü–∞** –º–µ–∂–¥—É –æ–±—â–µ–π —É—Å–ø–µ—à–Ω–æ—Å—Ç—å—é –∏ —É—Å–ø–µ—à–Ω–æ—Å—Ç—å—é —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏
        - –ß–∞—Å—Ç–æ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—Ç—Å—è –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º **–∂–∞–ª–æ–±** –∏–∑-–∑–∞ –Ω–µ–æ—á–µ–≤–∏–¥–Ω–æ—Å—Ç–∏ –∏–ª–∏ "–ø–æ–¥–≤–æ—Ö–∞" –≤ –∑–∞–¥–∞–Ω–∏–∏
        
        –≠—Ç–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è, –Ω–æ —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è.
        """)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è "—Ç—Ä–∏–∫–∏"-–∫–∞—Ä—Ç–æ—á–µ–∫
        st.sidebar.markdown("### –ü–∞—Ä–∞–º–µ—Ç—Ä—ã \"—Ç—Ä–∏–∫–∏\"-–∫–∞—Ä—Ç–æ—á–µ–∫")
        
        min_success_rate = st.sidebar.slider(
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ–±—â–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å",
            min_value=0.50,
            max_value=1.0,
            value=0.75,
            step=0.05,
            format="%.2f",
            help="–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ–±—â–µ–π —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –¥–ª—è –æ—Ç–Ω–µ—Å–µ–Ω–∏—è –∫ —Ç—Ä–∏–∫–∏-–∫–∞—Ä—Ç–æ—á–∫–∞–º"
        )
        
        max_first_try_rate = st.sidebar.slider(
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å 1-–π –ø–æ–ø—ã—Ç–∫–∏",
            min_value=0.0,
            max_value=0.75,
            value=0.50,
            step=0.05,
            format="%.2f",
            help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞ —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è –æ—Ç–Ω–µ—Å–µ–Ω–∏—è –∫ —Ç—Ä–∏–∫–∏-–∫–∞—Ä—Ç–æ—á–∫–∞–º"
        )
        
        min_difference = st.sidebar.slider(
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏",
            min_value=0.05,
            max_value=0.50,
            value=0.25,
            step=0.05,
            format="%.2f",
            help="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –æ–±—â–µ–π —É—Å–ø–µ—à–Ω–æ—Å—Ç—å—é –∏ —É—Å–ø–µ—Ö–æ–º —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏"
        )
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∏ –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏, –±–µ–∑ —É—á–µ—Ç–∞ –∂–∞–ª–æ–± –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è
        
        # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        working_df = df.copy()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –æ–±—â–µ–π —É—Å–ø–µ—à–Ω–æ—Å—Ç—å—é –∏ —É—Å–ø–µ—Ö–æ–º —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏
        working_df["success_diff"] = working_df["success_rate"] - working_df["first_try_success_rate"]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º "—Ç—Ä–∏–∫–∏"-–∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        working_df["is_tricky"] = (
            (working_df["success_rate"] >= min_success_rate) & 
            (working_df["first_try_success_rate"] <= max_first_try_rate) &
            (working_df["success_diff"] >= min_difference)
        )
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –ª–µ–≥–µ–Ω–¥—ã
        working_df["category"] = working_df["is_tricky"].map({True: "–¢—Ä–∏–∫–∏-–∫–∞—Ä—Ç–æ—á–∫–∏", False: "–û–±—ã—á–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏"})
        
        # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        total_cards = len(working_df)
        tricky_cards = working_df["is_tricky"].sum()
        tricky_percent = tricky_cards / total_cards if total_cards > 0 else 0
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        st.markdown(f"### –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ \"—Ç—Ä–∏–∫–∏\"-–∫–∞—Ä—Ç–æ—á–µ–∫")
        st.markdown(f"–ù–∞–π–¥–µ–Ω–æ **{tricky_cards}** \"—Ç—Ä–∏–∫–∏\"-–∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ **{total_cards}** –∫–∞—Ä—Ç–æ—á–µ–∫ (**{tricky_percent:.1%}**)")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–æ—á–µ—á–Ω—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
        st.markdown(f"### –ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∫–∞—Ä—Ç–æ—á–µ–∫")
        
        fig = px.scatter(
            working_df,
            x="success_rate",
            y="first_try_success_rate",
            color="category",
            hover_data=["card_id", "card_type", "success_rate", "first_try_success_rate", "complaint_rate", "program", "module", "lesson"],
            labels={
                "success_rate": "–û–±—â–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å", 
                "first_try_success_rate": "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏",
                "category": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫"
            },
            color_discrete_map={"–¢—Ä–∏–∫–∏-–∫–∞—Ä—Ç–æ—á–∫–∏": "red", "–û–±—ã—á–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏": "blue"},
            opacity=0.7,
            title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∏ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞
        fig.add_trace(
            go.Scatter(
                x=[0, 1],
                y=[0, 1],
                mode="lines",
                line=dict(color="gray", dash="dash", width=1),
                name="–£—Å–ø–µ—à–Ω–æ—Å—Ç—å = –£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å 1-–π –ø–æ–ø—ã—Ç–∫–∏",
                hoverinfo="skip"
            )
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ä–∞–∑–Ω–∏—Ü—ã
        x_values = np.linspace(min_success_rate, 1, 100)
        y_values = [min(x - min_difference, max_first_try_rate) for x in x_values]
        
        fig.add_trace(
            go.Scatter(
                x=x_values,
                y=y_values,
                mode="lines",
                line=dict(color="purple", dash="dot", width=1),
                name=f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞: {min_difference:.2f}",
                hoverinfo="skip"
            )
        )
        
        # –°–æ–∑–¥–∞–µ–º –∑–æ–Ω—É "—Ç—Ä–∏–∫–∏"-–∫–∞—Ä—Ç–æ—á–µ–∫
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—É—é –∑–∞–ª–∏–≤–∫—É –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –∑–æ–Ω—ã
        fig.add_shape(
            type="rect",
            x0=min_success_rate,
            y0=0,
            x1=1,
            y1=max_first_try_rate,
            fillcolor="rgba(255,0,0,0.1)",
            line=dict(color="red", width=1, dash="dash"),
            layer="below",
            name="–ó–æ–Ω–∞ —Ç—Ä–∏–∫–∏-–∫–∞—Ä—Ç–æ—á–µ–∫"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
        fig.add_vline(
            x=min_success_rate, 
            line_dash="dash", 
            line_color="green", 
            line_width=1,
            annotation_text=f"–ú–∏–Ω. —É—Å–ø–µ—à–Ω–æ—Å—Ç—å: {min_success_rate:.2f}",
            annotation_position="top"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏
        fig.add_hline(
            y=max_first_try_rate, 
            line_dash="dash", 
            line_color="red", 
            line_width=1,
            annotation_text=f"–ú–∞–∫—Å. —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å 1-–π –ø–æ–ø—ã—Ç–∫–∏: {max_first_try_rate:.2f}",
            annotation_position="left"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é –¥–ª—è –∑–æ–Ω—ã "—Ç—Ä–∏–∫–∏"-–∫–∞—Ä—Ç–æ—á–µ–∫
        fig.add_annotation(
            x=(min_success_rate + 1) / 2,
            y=max_first_try_rate / 2,
            text="–ó–æ–Ω–∞ '—Ç—Ä–∏–∫–∏'-–∫–∞—Ä—Ç–æ—á–µ–∫",
            showarrow=False,
            font=dict(color="red", size=14),
            bgcolor="rgba(255,255,255,0.7)",
            bordercolor="red",
            borderwidth=1,
            borderpad=4
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–∫–µ—Ç–∞
        fig.update_layout(
            xaxis=dict(
                title="–û–±—â–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å",
                range=[0, 1],
                tickformat=".0%"
            ),
            yaxis=dict(
                title="–£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏",
                range=[0, 1],
                tickformat=".0%"
            ),
            legend=dict(
                orientation="h",
                yanchor="bottom",
                y=1.02,
                xanchor="right",
                x=1
            ),
            height=600  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –≥—Ä–∞—Ñ–∏–∫–∞
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å —Ç—Ä–∏–∫–∏-–∫–∞—Ä—Ç–æ—á–∫–∞–º–∏
        if tricky_cards > 0:
            st.markdown("### –°–ø–∏—Å–æ–∫ \"—Ç—Ä–∏–∫–∏\"-–∫–∞—Ä—Ç–æ—á–µ–∫")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç—Ä–∏–∫–∏-–∫–∞—Ä—Ç–æ—á–∫–∏
            tricky_df = working_df[working_df["is_tricky"]].sort_values("success_diff", ascending=False)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
            display_columns = [
                "card_id", "card_type", "program", "module", "lesson", 
                "success_rate", "first_try_success_rate", "success_diff", "complaint_rate"
            ]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ URL-–∫–æ–ª–æ–Ω–∫–∏
            if "card_url" in tricky_df.columns:
                # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
                display_df = pd.DataFrame()
                display_df["ID –∫–∞—Ä—Ç–æ—á–∫–∏"] = tricky_df.apply(
                    lambda row: f"[{int(row['card_id'])}]({row['card_url']})" if pd.notna(row['card_url']) else str(int(row['card_id'])),
                    axis=1
                )
                display_df["–¢–∏–ø"] = tricky_df["card_type"]
                display_df["–û–±—â–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å"] = tricky_df["success_rate"].apply(lambda x: f"{x:.1%}")
                display_df["–£—Å–ø–µ—Ö —Å 1-–π –ø–æ–ø—ã—Ç–∫–∏"] = tricky_df["first_try_success_rate"].apply(lambda x: f"{x:.1%}")
                display_df["–†–∞–∑–Ω–∏—Ü–∞"] = tricky_df["success_diff"].apply(lambda x: f"{x:.1%}")
                display_df["–ñ–∞–ª–æ–±—ã"] = tricky_df["complaint_rate"].apply(lambda x: f"{x:.1%}")
                display_df["–ü—Ä–æ–≥—Ä–∞–º–º–∞"] = tricky_df["program"]
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
                st.dataframe(display_df, hide_index=True, use_container_width=True)
            else:
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–±—ã—á–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
                st.dataframe(
                    tricky_df[display_columns].style.format({
                        "success_rate": "{:.1%}",
                        "first_try_success_rate": "{:.1%}",
                        "success_diff": "{:.1%}",
                        "complaint_rate": "{:.1%}"
                    }),
                    use_container_width=True
                )
    # –í–∫–ª–∞–¥–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    with tabs[5]:
        st.subheader("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ –∫–∞—Ä—Ç–æ—á–µ–∫")
        
        # –í—ã–±–æ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if not df.empty:
            # –û—Ç–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            high_risk_cards = df[df["risk"] > 0.5].sort_values(by="risk", ascending=False).head(50)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–æ —Å—Ä–µ–¥–Ω–∏–º –∏ –Ω–∏–∑–∫–∏–º —Ä–∏—Å–∫–æ–º
            medium_risk_cards = df[(df["risk"] <= 0.5) & (df["risk"] > 0.25)].sample(min(20, len(df[(df["risk"] <= 0.5) & (df["risk"] > 0.25)])))
            low_risk_cards = df[df["risk"] <= 0.25].sample(min(10, len(df[df["risk"] <= 0.25])))
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
            test_cards = pd.concat([high_risk_cards, medium_risk_cards, low_risk_cards])
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
            selected_card_id = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
                options=test_cards["card_id"].values,
                format_func=lambda x: f"ID: {x} - –†–∏—Å–∫: {df[df['card_id'] == x]['risk'].values[0]:.2f}",
                key="selected_card_id"
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
            selected_card = df[df["card_id"] == selected_card_id].iloc[0]
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("### –î–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏")
                
                card_data = {
                    "ID –∫–∞—Ä—Ç–æ—á–∫–∏": selected_card["card_id"],
                    "–¢–∏–ø –∫–∞—Ä—Ç–æ—á–∫–∏": selected_card["card_type"] if "card_type" in selected_card else "–ù–µ —É–∫–∞–∑–∞–Ω",
                    "–î–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç—å": f"{selected_card['discrimination_avg']:.3f}",
                    "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å": f"{selected_card['success_rate']:.1%}",
                    "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏": f"{selected_card['first_try_success_rate']:.1%}",
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∞–ª–æ–±": f"{selected_card['complaints_total'] if 'complaints_total' in selected_card else 0}",
                    "–î–æ–ª—è –∂–∞–ª–æ–±": f"{selected_card['complaint_rate']:.1%}",
                    "–î–æ–ª—è –ø—ã—Ç–∞–≤—à–∏—Ö—Å—è": f"{selected_card['attempted_share']:.1%}",
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫": f"{selected_card['total_attempts']:.0f}",
                    "–¢–µ–∫—É—â–∏–π —Ä–∏—Å–∫": f"{selected_card['risk']:.3f}"
                }
                
                for key, value in card_data.items():
                    st.markdown(f"**{key}:** {value}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å
                if "card_url" in selected_card and pd.notna(selected_card["card_url"]):
                    st.markdown(f"[–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ]({selected_card['card_url']})")
            
            with col2:
                st.markdown("### –†–∞—Å—á–µ—Ç —Ä–∏—Å–∫–∞")
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∏—Å–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
                try:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–µ—Ä–∏—é –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π —Ä–∞–±–æ—Ç—ã
                    card_dict = selected_card.to_dict()
                    card_series = pd.Series(card_dict)
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∏—Å–∫–∞ —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                    old_risk = selected_card["risk"]
                    
                    # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–∞ —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                    def discrimination_risk_score_new(discrimination_avg):
                        if discrimination_avg >= config["discrimination"]["good"]:
                            normalized = min(1.0, (discrimination_avg - config["discrimination"]["good"]) / 0.4)
                            return max(0, 0.25 * (1 - normalized))
                        elif discrimination_avg >= config["discrimination"]["medium"]:
                            normalized = (discrimination_avg - config["discrimination"]["medium"]) / (config["discrimination"]["good"] - config["discrimination"]["medium"])
                            return 0.50 - normalized * 0.24
                        else:
                            normalized = max(0, discrimination_avg / config["discrimination"]["medium"])
                            return 1.0 - normalized * 0.49
                    
                    def success_rate_risk_score_new(success_rate):
                        if success_rate > config["success_rate"]["boring"]:
                            normalized = min(1.0, (success_rate - config["success_rate"]["boring"]) / 0.05)
                            return 0.30 + normalized * 0.10
                        elif success_rate >= config["success_rate"]["optimal_low"]:
                            normalized = (success_rate - config["success_rate"]["optimal_low"]) / (config["success_rate"]["boring"] - config["success_rate"]["optimal_low"])
                            return 0.25 * (1 - normalized)
                        elif success_rate >= config["success_rate"]["suboptimal_low"]:
                            normalized = (success_rate - config["success_rate"]["suboptimal_low"]) / (config["success_rate"]["optimal_low"] - config["success_rate"]["suboptimal_low"])
                            return 0.50 - normalized * 0.24
                        else:
                            normalized = max(0, success_rate / config["success_rate"]["suboptimal_low"])
                            return 1.0 - normalized * 0.49
                    
                    def first_try_risk_score_new(first_try_success_rate):
                        if first_try_success_rate > config["first_try"]["too_easy"]:
                            normalized = min(1.0, (first_try_success_rate - config["first_try"]["too_easy"]) / 0.1)
                            return 0.26 + normalized * 0.09
                        elif first_try_success_rate >= config["first_try"]["optimal_low"]:
                            normalized = (first_try_success_rate - config["first_try"]["optimal_low"]) / (config["first_try"]["too_easy"] - config["first_try"]["optimal_low"])
                            return 0.25 * (1 - normalized)
                        elif first_try_success_rate >= config["first_try"]["multiple_low"]:
                            normalized = (first_try_success_rate - config["first_try"]["multiple_low"]) / (config["first_try"]["optimal_low"] - config["first_try"]["multiple_low"])
                            return 0.50 - normalized * 0.24
                        else:
                            normalized = max(0, first_try_success_rate / config["first_try"]["multiple_low"])
                            return 1.0 - normalized * 0.49
                    
                    def complaint_risk_score_new(row):
                        # –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∞–ª–æ–±
                        complaints_total = row.get("complaints_total", 0)
                        
                        if complaints_total > config["complaints"]["critical"]:
                            excess = min(100, complaints_total - config["complaints"]["critical"])
                            normalized = excess / 100
                            return 0.76 + normalized * 0.24
                        elif complaints_total >= config["complaints"]["high"]:
                            normalized = (complaints_total - config["complaints"]["high"]) / (config["complaints"]["critical"] - config["complaints"]["high"])
                            return 0.51 + normalized * 0.24
                        elif complaints_total >= config["complaints"]["medium"]:
                            normalized = (complaints_total - config["complaints"]["medium"]) / (config["complaints"]["high"] - config["complaints"]["medium"])
                            return 0.26 + normalized * 0.24
                        else:
                            normalized = complaints_total / max(1, config["complaints"]["medium"])
                            return normalized * 0.25
                    
                    def attempted_share_risk_score_new(attempted_share):
                        if attempted_share > config["attempts"]["high"]:
                            normalized = min(1.0, (attempted_share - config["attempts"]["high"]) / 0.05)
                            return 0.10 * (1 - normalized)
                        elif attempted_share >= config["attempts"]["normal_low"]:
                            normalized = (attempted_share - config["attempts"]["normal_low"]) / (config["attempts"]["high"] - config["attempts"]["normal_low"])
                            return 0.25 - normalized * 0.15
                        elif attempted_share >= config["attempts"]["insufficient_low"]:
                            normalized = (attempted_share - config["attempts"]["insufficient_low"]) / (config["attempts"]["normal_low"] - config["attempts"]["insufficient_low"])
                            return 0.50 - normalized * 0.24
                        else:
                            normalized = max(0, attempted_share / config["attempts"]["insufficient_low"])
                            return 1.0 - normalized * 0.49
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∏—Å–∫–∞
                    risk_discr = discrimination_risk_score_new(selected_card["discrimination_avg"])
                    risk_success = success_rate_risk_score_new(selected_card["success_rate"])
                    risk_first_try = first_try_risk_score_new(selected_card["first_try_success_rate"])
                    risk_complaints = complaint_risk_score_new(card_dict)
                    risk_attempted = attempted_share_risk_score_new(selected_card["attempted_share"])
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫
                    max_risk = max(risk_discr, risk_success, risk_first_try, risk_complaints, risk_attempted)
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–∑–≤–µ—à–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ
                    weighted_avg_risk = (
                        config["weights"]["discrimination"] * risk_discr +
                        config["weights"]["success_rate"] * risk_success +
                        config["weights"]["first_try"] * risk_first_try +
                        config["weights"]["complaint_rate"] * risk_complaints +
                        config["weights"]["attempted"] * risk_attempted
                    )
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —Ä–∏—Å–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∏—Å–∫–∞
                    if max_risk > config["risk_thresholds"]["critical"]:
                        min_threshold = config["risk_thresholds"]["min_for_critical"]
                    elif max_risk > config["risk_thresholds"]["high"]:
                        min_threshold = config["risk_thresholds"]["min_for_high"]
                    else:
                        min_threshold = 0
                    
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ–æ—Ä–º—É–ª—É
                    combined_risk = config["risk_thresholds"]["alpha_weight_avg"] * weighted_avg_risk + (1 - config["risk_thresholds"]["alpha_weight_avg"]) * max_risk
                    raw_risk = max(weighted_avg_risk, combined_risk, min_threshold)
                    
                    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫—É—é –∑–Ω–∞—á–∏–º–æ—Å—Ç—å
                    confidence_factor = min(selected_card["total_attempts"] / config["stats"]["significance_threshold"], 1.0)
                    new_risk = raw_risk * confidence_factor + config["stats"]["neutral_risk_value"] * (1 - confidence_factor)
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞
                    st.markdown(f"#### –†–∏—Å–∫ –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º:")
                    
                    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∏—Å–∫–∞ –∏ —Ü–≤–µ—Ç–æ–≤
                    def risk_category(risk):
                        if risk > 0.75:
                            return "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π", "red"
                        elif risk > 0.5:
                            return "–í—ã—Å–æ–∫–∏–π", "orange"
                        elif risk > 0.25:
                            return "–£–º–µ—Ä–µ–Ω–Ω—ã–π", "gold"
                        else:
                            return "–ù–∏–∑–∫–∏–π", "green"
                    
                    risks = {
                        "–î–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç—å": risk_discr,
                        "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å": risk_success,
                        "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏": risk_first_try,
                        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∞–ª–æ–±": risk_complaints,
                        "–î–æ–ª—è –ø—ã—Ç–∞–≤—à–∏—Ö—Å—è": risk_attempted
                    }
                    
                    for metric, risk in risks.items():
                        category, color = risk_category(risk)
                        st.markdown(f"**{metric}**: {risk:.3f} - <span style='color:{color};'>{category}</span>", unsafe_allow_html=True)
                    
                    st.markdown("---")
                    
                    st.markdown(f"**–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫**: {max_risk:.3f}")
                    st.markdown(f"**–í–∑–≤–µ—à–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ**: {weighted_avg_risk:.3f}")
                    st.markdown(f"**–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∏—Å–∫**: {combined_risk:.3f}")
                    st.markdown(f"**–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥**: {min_threshold:.3f}")
                    st.markdown(f"**–°—ã—Ä–æ–π —Ä–∏—Å–∫ (–±–µ–∑ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏)**: {raw_risk:.3f}")
                    
                    st.markdown("---")
                    
                    st.markdown(f"**–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–æ–≤–µ—Ä–∏—è**: {confidence_factor:.2f}")
                    st.markdown(f"**–ò—Ç–æ–≥–æ–≤—ã–π –Ω–æ–≤—ã–π —Ä–∏—Å–∫**: {new_risk:.3f}")
                    st.markdown(f"**–¢–µ–∫—É—â–∏–π —Ä–∏—Å–∫**: {old_risk:.3f}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∏—Å–∫–∞
                    delta = new_risk - old_risk
                    delta_color = "red" if delta > 0 else "green"
                    delta_sign = "+" if delta > 0 else ""
                    
                    st.markdown(f"**–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∏—Å–∫–∞**: <span style='color:{delta_color};'>{delta_sign}{delta:.3f}</span>", unsafe_allow_html=True)
                    
                    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ä–∏—Å–∫–∞
                    components = pd.DataFrame({
                        "–ú–µ—Ç—Ä–∏–∫–∞": list(risks.keys()),
                        "–†–∏—Å–∫": list(risks.values()),
                        "–í–µ—Å": [
                            config["weights"]["discrimination"],
                            config["weights"]["success_rate"],
                            config["weights"]["first_try"],
                            config["weights"]["complaint_rate"],
                            config["weights"]["attempted"]
                        ]
                    })
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü —Å –≤–∑–≤–µ—à–µ–Ω–Ω—ã–º —Ä–∏—Å–∫–æ–º
                    components["–í–∑–≤–µ—à–µ–Ω–Ω—ã–π —Ä–∏—Å–∫"] = components["–†–∏—Å–∫"] * components["–í–µ—Å"]
                    
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–∑–≤–µ—à–µ–Ω–Ω–æ–º—É —Ä–∏—Å–∫—É
                    components = components.sort_values(by="–í–∑–≤–µ—à–µ–Ω–Ω—ã–π —Ä–∏—Å–∫", ascending=False)
                    
                    # –°–æ–∑–¥–∞–µ–º —Å—Ç–æ–ª–±—á–∞—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
                    fig = px.bar(
                        components,
                        x="–ú–µ—Ç—Ä–∏–∫–∞",
                        y=["–í–∑–≤–µ—à–µ–Ω–Ω—ã–π —Ä–∏—Å–∫"],
                        title="–í–∫–ª–∞–¥ –º–µ—Ç—Ä–∏–∫ –≤ –æ–±—â–∏–π —Ä–∏—Å–∫",
                        color_discrete_sequence=["red"],
                        labels={"value": "–í–∑–≤–µ—à–µ–Ω–Ω—ã–π —Ä–∏—Å–∫", "–ú–µ—Ç—Ä–∏–∫–∞": ""}
                    )
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ
                    fig.add_hline(y=weighted_avg_risk, line_dash="dash", line_color="blue", 
                                 annotation_text=f"–í–∑–≤–µ—à–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ: {weighted_avg_risk:.3f}", 
                                 annotation_position="top right")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ —Ä–∏—Å–∫–∞
                    for i, row in components.iterrows():
                        fig.add_annotation(
                            x=row["–ú–µ—Ç—Ä–∏–∫–∞"],
                            y=row["–í–∑–≤–µ—à–µ–Ω–Ω—ã–π —Ä–∏—Å–∫"] + 0.02,
                            text=f"{row['–†–∏—Å–∫']:.2f}",
                            showarrow=False,
                            font=dict(size=10)
                        )
                    
                    fig.update_layout(height=350)
                    
                    st.plotly_chart(fig, use_container_width=True)
                    
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Ä–∏—Å–∫–∞: {str(e)}")
        else:
            st.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
    
    # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    st.markdown("---")

    with st.expander("üìñ –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ—Ä–º—É–ª—ã —Ä–∏—Å–∫–∞", expanded=False):
        st.subheader("–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ñ–æ—Ä–º—É–ª–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–∞")
        
        st.markdown("""
        ## –ö–æ–Ω—Ü–µ–ø—Ü–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ –∫ —Ä–∏—Å–∫—É
        
        –§–æ—Ä–º—É–ª–∞ —Ä–∏—Å–∫–∞ –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–º –ø–æ–¥—Ö–æ–¥–µ, –∫–æ—Ç–æ—Ä—ã–π –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–∞–∂–¥—É—é –º–µ—Ç—Ä–∏–∫—É –∫–∞—Ä—Ç–æ—á–∫–∏ 
        –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –µ—ë –≤ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∏—Å–∫–∞ –æ—Ç 0 –¥–æ 1. –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç:
        
        1. –ò–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å, –∫–∞–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ —Å—á–∏—Ç–∞—é—Ç—Å—è —Ö–æ—Ä–æ—à–∏–º–∏, –∞ –∫–∞–∫–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏
        2. –£—á–∏—Ç—ã–≤–∞—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫, –Ω–µ –ø–æ–∑–≤–æ–ª—è—è –∏–º "–∑–∞—Ç–∏—Ä–∞—Ç—å—Å—è" –¥—Ä—É–≥–∏–º–∏
        3. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –≤–µ—Å–∞ –º–µ—Ç—Ä–∏–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Ö –≤–∞–∂–Ω–æ—Å—Ç–∏
        4. –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∏—Å–∫ —Å —É—á–µ—Ç–æ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
        
        ### –û—Å–Ω–æ–≤–Ω—ã–µ —à–∞–≥–∏ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–∞:
        
        1. **–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –≤ —Ä–∏—Å–∫** - –∫–∞–∂–¥–∞—è –º–µ—Ç—Ä–∏–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç—Å—è –≤ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∏—Å–∫–∞ –æ—Ç 0 –¥–æ 1
        2. **–í–∑–≤–µ—à–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ** - –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è —Å—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∏—Å–∫–æ–≤ –ø–æ –≤—Å–µ–º –º–µ—Ç—Ä–∏–∫–∞–º
        3. **–£—á–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∏—Å–∫–∞** - –∫–æ–º–±–∏–Ω–∏—Ä—É–µ—Ç—Å—è –≤–∑–≤–µ—à–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫, –±–µ–∑ —ç—Ç–æ–≥–æ —à–∞–≥–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ –æ–¥–Ω–æ–π –º–µ—Ç—Ä–∏–∫–µ –º–æ–≥—É—Ç "–∑–∞—Ç–∏—Ä–∞—Ç—å—Å—è" —Ö–æ—Ä–æ—à–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –¥—Ä—É–≥–∏—Ö –º–µ—Ç—Ä–∏–∫.
        4. **–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥** - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —Ä–∏—Å–∫–∞ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç—Ä–∏–∫, —á—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –≤—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫. –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤—ã—Å–æ–∫–∏—Ö —Ä–∏—Å–∫–æ–≤, –Ω–µ –≤–ª–∏—è—è –Ω–∞ –æ—Ü–µ–Ω–∫—É –∫–∞—Ä—Ç–æ—á–µ–∫ –±–µ–∑ —è–≤–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º. –ö–∞—Ä—Ç–æ—á–∫–∏ —Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏ –≤—Å–µ–≥–¥–∞ –±—É–¥—É—Ç –ø–æ–ø–∞–¥–∞—Ç—å –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è.
        5. **–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫—É—é –∑–Ω–∞—á–∏–º–æ—Å—Ç—å** - —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –ü—Ä–∏ –º–∞–ª–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø–æ–ø—ã—Ç–æ–∫ (–Ω–∏–∑–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏) —Ä–∏—Å–∫ —Å–º–µ—â–∞–µ—Ç—Å—è –∫ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é (0.5).
        6. **–í—ã–±–æ—Ä –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π** - –∏—Ç–æ–≥–æ–≤—ã–π —Ä–∏—Å–∫ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–∞–∫ –º–∞–∫—Å–∏–º—É–º –º–µ–∂–¥—É –≤–∑–≤–µ—à–µ–Ω–Ω—ã–º —Å—Ä–µ–¥–Ω–∏–º, –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–∏—Å–∫–æ–º –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –ø–æ—Ä–æ–≥–æ–º
        """)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫
        st.markdown("## –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è")
        
        # –°–æ–∑–¥–∞–µ–º –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏: –¥–ª—è –≤–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏–π –∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        demo_col1, demo_col2 = st.columns([1, 2])
        
        with demo_col1:
            st.markdown("### –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫")
            
            # –°–æ–∑–¥–∞–µ–º —Å–ª–∞–π–¥–µ—Ä—ã –¥–ª—è –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫
            demo_discr = st.slider(
                "–î–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç—å",
                min_value=0.0,
                max_value=1.0,
                value=0.4,
                step=0.05,
                key="demo_discr"
            )
            
            demo_success = st.slider(
                "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å",
                min_value=0.0,
                max_value=1.0,
                value=0.85,
                step=0.05,
                key="demo_success"
            )
            
            demo_first_try = st.slider(
                "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å 1-–π –ø–æ–ø—ã—Ç–∫–∏",
                min_value=0.0,
                max_value=1.0,
                value=0.7,
                step=0.05,
                key="demo_first_try"
            )
            
            demo_complaints = st.number_input(
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∞–ª–æ–±",
                min_value=0,
                max_value=100,
                value=5,
                step=1,
                key="demo_complaints"
            )
            
            demo_attempts = st.slider(
                "–î–æ–ª—è –ø—ã—Ç–∞–≤—à–∏—Ö—Å—è",
                min_value=0.0,
                max_value=1.0,
                value=0.9,
                step=0.05,
                key="demo_attempts"
            )
            
            demo_total_attempts = st.number_input(
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫",
                min_value=1,
                max_value=1000,
                value=200,
                step=10,
                key="demo_total_attempts"
            )
        
        # –†–∞—Å—á–µ—Ç —Ä–∏—Å–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–∞ —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        def demo_get_discr_risk(val):
            if val >= config["discrimination"]["good"]:
                normalized = min(1.0, (val - config["discrimination"]["good"]) / 0.4)
                return max(0, 0.25 * (1 - normalized))
            elif val >= config["discrimination"]["medium"]:
                normalized = (val - config["discrimination"]["medium"]) / (config["discrimination"]["good"] - config["discrimination"]["medium"])
                return 0.50 - normalized * 0.24
            else:
                normalized = max(0, val / config["discrimination"]["medium"])
                return 1.0 - normalized * 0.49
        
        def demo_get_success_risk(val):
            if val > config["success_rate"]["boring"]:
                normalized = min(1.0, (val - config["success_rate"]["boring"]) / 0.05)
                return 0.30 + normalized * 0.10
            elif val >= config["success_rate"]["optimal_low"]:
                normalized = (val - config["success_rate"]["optimal_low"]) / (config["success_rate"]["boring"] - config["success_rate"]["optimal_low"])
                return 0.25 * (1 - normalized)
            elif val >= config["success_rate"]["suboptimal_low"]:
                normalized = (val - config["success_rate"]["suboptimal_low"]) / (config["success_rate"]["optimal_low"] - config["success_rate"]["suboptimal_low"])
                return 0.50 - normalized * 0.24
            else:
                normalized = max(0, val / config["success_rate"]["suboptimal_low"])
                return 1.0 - normalized * 0.49
        
        def demo_get_first_try_risk(val):
            if val > config["first_try"]["too_easy"]:
                normalized = min(1.0, (val - config["first_try"]["too_easy"]) / 0.1)
                return 0.26 + normalized * 0.09
            elif val >= config["first_try"]["optimal_low"]:
                normalized = (val - config["first_try"]["optimal_low"]) / (config["first_try"]["too_easy"] - config["first_try"]["optimal_low"])
                return 0.25 * (1 - normalized)
            elif val >= config["first_try"]["multiple_low"]:
                normalized = (val - config["first_try"]["multiple_low"]) / (config["first_try"]["optimal_low"] - config["first_try"]["multiple_low"])
                return 0.50 - normalized * 0.24
            else:
                normalized = max(0, val / config["first_try"]["multiple_low"])
                return 1.0 - normalized * 0.49
        
        def demo_get_complaints_risk(val):
            if val > config["complaints"]["critical"]:
                excess = min(100, val - config["complaints"]["critical"])
                normalized = excess / 100
                return 0.76 + normalized * 0.24
            elif val >= config["complaints"]["high"]:
                normalized = (val - config["complaints"]["high"]) / (config["complaints"]["critical"] - config["complaints"]["high"])
                return 0.51 + normalized * 0.24
            elif val >= config["complaints"]["medium"]:
                normalized = (val - config["complaints"]["medium"]) / (config["complaints"]["high"] - config["complaints"]["medium"])
                return 0.26 + normalized * 0.24
            else:
                normalized = val / max(1, config["complaints"]["medium"])
                return normalized * 0.25
        
        def demo_get_attempts_risk(val):
            if val > config["attempts"]["high"]:
                normalized = min(1.0, (val - config["attempts"]["high"]) / 0.05)
                return 0.10 * (1 - normalized)
            elif val >= config["attempts"]["normal_low"]:
                normalized = (val - config["attempts"]["normal_low"]) / (config["attempts"]["high"] - config["attempts"]["normal_low"])
                return 0.25 - normalized * 0.15
            elif val >= config["attempts"]["insufficient_low"]:
                normalized = (val - config["attempts"]["insufficient_low"]) / (config["attempts"]["normal_low"] - config["attempts"]["insufficient_low"])
                return 0.50 - normalized * 0.24
            else:
                normalized = max(0, val / config["attempts"]["insufficient_low"])
                return 1.0 - normalized * 0.49
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∏—Å–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –º–µ—Ç—Ä–∏–∫–∏
        risk_discr = demo_get_discr_risk(demo_discr)
        risk_success = demo_get_success_risk(demo_success)
        risk_first_try = demo_get_first_try_risk(demo_first_try)
        risk_complaints = demo_get_complaints_risk(demo_complaints)
        risk_attempts = demo_get_attempts_risk(demo_attempts)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫
        max_risk = max(risk_discr, risk_success, risk_first_try, risk_complaints, risk_attempts)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–∑–≤–µ—à–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ
        weighted_avg = (
            config["weights"]["discrimination"] * risk_discr +
            config["weights"]["success_rate"] * risk_success +
            config["weights"]["first_try"] * risk_first_try +
            config["weights"]["complaint_rate"] * risk_complaints +
            config["weights"]["attempted"] * risk_attempts
        )
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥
        if max_risk > config["risk_thresholds"]["critical"]:
            min_threshold = config["risk_thresholds"]["min_for_critical"]
        elif max_risk > config["risk_thresholds"]["high"]:
            min_threshold = config["risk_thresholds"]["min_for_high"]
        else:
            min_threshold = 0
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ–æ—Ä–º—É–ª—É
        combined_risk = config["risk_thresholds"]["alpha_weight_avg"] * weighted_avg + (1 - config["risk_thresholds"]["alpha_weight_avg"]) * max_risk
        raw_risk = max(weighted_avg, combined_risk, min_threshold)
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫—É—é –∑–Ω–∞—á–∏–º–æ—Å—Ç—å
        confidence = min(demo_total_attempts / config["stats"]["significance_threshold"], 1.0)
        final_risk = raw_risk * confidence + config["stats"]["neutral_risk_value"] * (1 - confidence)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤–∫–ª–∞–¥ –∫–∞–∂–¥–æ–π –º–µ—Ç—Ä–∏–∫–∏ –≤–æ –≤–∑–≤–µ—à–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ
        contribution_discr = config["weights"]["discrimination"] * risk_discr / weighted_avg if weighted_avg > 0 else 0
        contribution_success = config["weights"]["success_rate"] * risk_success / weighted_avg if weighted_avg > 0 else 0
        contribution_first_try = config["weights"]["first_try"] * risk_first_try / weighted_avg if weighted_avg > 0 else 0
        contribution_complaints = config["weights"]["complaint_rate"] * risk_complaints / weighted_avg if weighted_avg > 0 else 0
        contribution_attempts = config["weights"]["attempted"] * risk_attempts / weighted_avg if weighted_avg > 0 else 0
        
        with demo_col2:
            st.markdown("### –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–∞")
            
            # –°–æ–∑–¥–∞–µ–º –¥–∞—Ç–∞—Ñ—Ä–µ–π–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∏—Å–∫–æ–≤ –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º
            risks_df = pd.DataFrame({
                "–ú–µ—Ç—Ä–∏–∫–∞": ["–î–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç—å", "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å", "–£—Å–ø–µ—Ö —Å 1-–π –ø–æ–ø—ã—Ç–∫–∏", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∞–ª–æ–±", "–î–æ–ª—è –ø—ã—Ç–∞–≤—à–∏—Ö—Å—è"],
                "–ó–Ω–∞—á–µ–Ω–∏–µ": [demo_discr, demo_success, demo_first_try, demo_complaints, demo_attempts],
                "–†–∏—Å–∫": [risk_discr, risk_success, risk_first_try, risk_complaints, risk_attempts],
                "–í–µ—Å": [
                    config["weights"]["discrimination"],
                    config["weights"]["success_rate"],
                    config["weights"]["first_try"],
                    config["weights"]["complaint_rate"],
                    config["weights"]["attempted"]
                ],
                "–í–∑–≤–µ—à–µ–Ω–Ω—ã–π —Ä–∏—Å–∫": [
                    config["weights"]["discrimination"] * risk_discr,
                    config["weights"]["success_rate"] * risk_success,
                    config["weights"]["first_try"] * risk_first_try,
                    config["weights"]["complaint_rate"] * risk_complaints,
                    config["weights"]["attempted"] * risk_attempts
                ]
            })
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–∑–≤–µ—à–µ–Ω–Ω–æ–º—É —Ä–∏—Å–∫—É
            risks_df = risks_df.sort_values("–í–∑–≤–µ—à–µ–Ω–Ω—ã–π —Ä–∏—Å–∫", ascending=False)
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å –≤–∫–ª–∞–¥–æ–º –∫–∞–∂–¥–æ–π –º–µ—Ç—Ä–∏–∫–∏
            fig = px.bar(
                risks_df,
                x="–ú–µ—Ç—Ä–∏–∫–∞",
                y="–í–∑–≤–µ—à–µ–Ω–Ω—ã–π —Ä–∏—Å–∫",
                title="–í–∫–ª–∞–¥ –º–µ—Ç—Ä–∏–∫ –≤ –æ–±—â–∏–π —Ä–∏—Å–∫",
                color="–†–∏—Å–∫",
                color_continuous_scale="RdYlGn_r",
                text=risks_df["–†–∏—Å–∫"].apply(lambda x: f"{x:.2f}")
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é –¥–ª—è –≤–∑–≤–µ—à–µ–Ω–Ω–æ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ
            fig.add_hline(
                y=weighted_avg,
                line_dash="dash",
                line_color="blue",
                annotation_text=f"–í–∑–≤–µ—à–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ: {weighted_avg:.2f}",
                annotation_position="top right"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∏—Å–∫–∞
            fig.add_hline(
                y=max_risk,
                line_dash="dash",
                line_color="red",
                annotation_text=f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫: {max_risk:.2f}",
                annotation_position="top right"
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫–µ—Ç
            fig.update_layout(height=400)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
            st.plotly_chart(fig, use_container_width=True)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç —Ä–∏—Å–∫–∞
            st.markdown("### –§–æ—Ä–º—É–ª–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–∞")
            
            # –û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("#### –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:")
                st.markdown(f"**–í–∑–≤–µ—à–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ:** {weighted_avg:.3f}")
                st.markdown(f"<span style='color:gray; font-size:0.9em'>= ({config['weights']['discrimination']:.3f} √ó {risk_discr:.3f}) + ({config['weights']['success_rate']:.3f} √ó {risk_success:.3f}) + ({config['weights']['first_try']:.3f} √ó {risk_first_try:.3f}) + ({config['weights']['complaint_rate']:.3f} √ó {risk_complaints:.3f}) + ({config['weights']['attempted']:.3f} √ó {risk_attempts:.3f})</span>", unsafe_allow_html=True)
                
                st.markdown(f"**–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫:** {max_risk:.3f}")
                st.markdown(f"<span style='color:gray; font-size:0.9em'>= max({risk_discr:.3f}, {risk_success:.3f}, {risk_first_try:.3f}, {risk_complaints:.3f}, {risk_attempts:.3f})</span>", unsafe_allow_html=True)
                
                st.markdown(f"**–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥:** {min_threshold:.3f}")
                min_threshold_explanation = ""
                if max_risk > config["risk_thresholds"]["critical"]:
                    min_threshold_explanation = f"= {config['risk_thresholds']['min_for_critical']:.3f} (—Ç.–∫. max_risk {max_risk:.3f} > critical_threshold {config['risk_thresholds']['critical']:.3f})"
                elif max_risk > config["risk_thresholds"]["high"]:
                    min_threshold_explanation = f"= {config['risk_thresholds']['min_for_high']:.3f} (—Ç.–∫. max_risk {max_risk:.3f} > high_threshold {config['risk_thresholds']['high']:.3f})"
                else:
                    min_threshold_explanation = "= 0 (—Ç.–∫. –Ω–µ—Ç –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞)"
                st.markdown(f"<span style='color:gray; font-size:0.9em'>{min_threshold_explanation}</span>", unsafe_allow_html=True)
                
                st.markdown(f"**–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∏—Å–∫:** {combined_risk:.3f}")
                st.markdown(f"<span style='color:gray; font-size:0.9em'>= ({config['risk_thresholds']['alpha_weight_avg']:.3f} √ó {weighted_avg:.3f}) + ((1 - {config['risk_thresholds']['alpha_weight_avg']:.3f}) √ó {max_risk:.3f})</span>", unsafe_allow_html=True)
                
                st.markdown(f"**–°—ã—Ä–æ–π —Ä–∏—Å–∫:** {raw_risk:.3f}")
                st.markdown(f"<span style='color:gray; font-size:0.9em'>= max({weighted_avg:.3f}, {combined_risk:.3f}, {min_threshold:.3f})</span>", unsafe_allow_html=True)
                
                st.markdown(f"**–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–æ–≤–µ—Ä–∏—è:** {confidence:.2f}")
                st.markdown(f"<span style='color:gray; font-size:0.9em'>= min({demo_total_attempts} / {config['stats']['significance_threshold']}, 1.0) = min({demo_total_attempts/config['stats']['significance_threshold']:.3f}, 1.0)</span>", unsafe_allow_html=True)
            
            with col2:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∏—Å–∫–∞ –∏ –∏—Ç–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                final_category = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
                category_color = "gray"
                
                if final_risk <= 0.25:
                    final_category = "–ù–∏–∑–∫–∏–π"
                    category_color = "green"
                elif final_risk <= 0.50:
                    final_category = "–£–º–µ—Ä–µ–Ω–Ω—ã–π"
                    category_color = "orange"
                elif final_risk <= 0.75:
                    final_category = "–í—ã—Å–æ–∫–∏–π" 
                    category_color = "red"
                else:
                    final_category = "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π"
                    category_color = "darkred"
                
                st.markdown(f"#### –ò—Ç–æ–≥–æ–≤—ã–π —Ä–∏—Å–∫:")
                st.markdown(f"**–ó–Ω–∞—á–µ–Ω–∏–µ —Ä–∏—Å–∫–∞:** {final_risk:.3f}")
                st.markdown(f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∏—Å–∫–∞:** <span style='color:{category_color};font-weight:bold;'>{final_category}</span>", unsafe_allow_html=True)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –ø–æ–≤–ª–∏—è–ª–æ –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ
                decision_factor = ""
                if raw_risk == weighted_avg:
                    decision_factor = "–≤–∑–≤–µ—à–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ"
                elif raw_risk == combined_risk:
                    decision_factor = "–∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∏—Å–∫"
                elif raw_risk == min_threshold:
                    decision_factor = "–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –∏–∑-–∑–∞ –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞ –º–µ—Ç—Ä–∏–∫–∏"
                
                st.markdown(f"**–†–µ—à–∞—é—â–∏–π —Ñ–∞–∫—Ç–æ—Ä:** {decision_factor}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—à–∞–≥–æ–≤–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª—ã
        st.markdown("## –ü–æ—à–∞–≥–æ–≤–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞")
        
        st.markdown("""
        ### –®–∞–≥ 1: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –≤ —Ä–∏—Å–∫
        
        –ö–∞–∂–¥–∞—è –º–µ—Ç—Ä–∏–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç—Å—è –≤ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∏—Å–∫–∞ –æ—Ç 0 –¥–æ 1 –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–¥–∞–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤:
        """)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –≤ —Ä–∏—Å–∫
        metrics_examples = pd.DataFrame({
            "–ú–µ—Ç—Ä–∏–∫–∞": ["–î–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç—å", "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å", "–£—Å–ø–µ—Ö —Å 1-–π –ø–æ–ø—ã—Ç–∫–∏", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∞–ª–æ–±", "–î–æ–ª—è –ø—ã—Ç–∞–≤—à–∏—Ö—Å—è"],
            "–ó–Ω–∞—á–µ–Ω–∏–µ": [demo_discr, demo_success, demo_first_try, demo_complaints, demo_attempts],
            "–†–∏—Å–∫": [risk_discr, risk_success, risk_first_try, risk_complaints, risk_attempts],
            "–§–æ—Ä–º—É–ª–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è": [
                "–•–æ—Ä–æ—à–∞—è: >0.35, –°—Ä–µ–¥–Ω—è—è: 0.15-0.35, –ù–∏–∑–∫–∞—è: <0.15", 
                "–°–∫—É—á–Ω–∞—è: >0.95, –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è: 0.75-0.95, –°—É–±–æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è: 0.50-0.75, –§—Ä—É—Å—Ç—Ä–∏—Ä—É—é—â–∞—è: <0.50",
                "–°–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç–∞—è: >0.90, –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è: 0.65-0.90, –¢—Ä–µ–±—É–µ—Ç –ø–æ–ø—ã—Ç–æ–∫: 0.40-0.65, –°–ª–æ–∂–Ω–∞—è: <0.40",
                f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ: >{config['complaints']['critical']}, –í—ã—Å–æ–∫–æ–µ: {config['complaints']['high']}-{config['complaints']['critical']}, –°—Ä–µ–¥–Ω–µ–µ: {config['complaints']['medium']}-{config['complaints']['high']}, –ù–∏–∑–∫–æ–µ: <{config['complaints']['medium']}",
                "–í—ã—Å–æ–∫–∞—è: >0.95, –ù–æ—Ä–º–∞–ª—å–Ω–∞—è: 0.80-0.95, –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è: 0.60-0.80, –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º–∞—è: <0.60"
            ]
        })
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        st.dataframe(metrics_examples, use_container_width=True)
        
        st.markdown("""
        ### –®–∞–≥ 2: –í–∑–≤–µ—à–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ
        
        –í—ã—á–∏—Å–ª—è–µ—Ç—Å—è –≤–∑–≤–µ—à–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∏—Å–∫–æ–≤ –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫ —Å —É—á–µ—Ç–æ–º –∏—Ö –≤–µ—Å–æ–≤:
        
        –í–∑–≤–µ—à–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ = Œ£(–†–∏—Å–∫_–º–µ—Ç—Ä–∏–∫–∏ * –í–µ—Å_–º–µ—Ç—Ä–∏–∫–∏)
        """)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –≤–∫–ª–∞–¥–æ–º –∫–∞–∂–¥–æ–π –º–µ—Ç—Ä–∏–∫–∏
        weighted_examples = pd.DataFrame({
            "–ú–µ—Ç—Ä–∏–∫–∞": risks_df["–ú–µ—Ç—Ä–∏–∫–∞"],
            "–†–∏—Å–∫": risks_df["–†–∏—Å–∫"],
            "–í–µ—Å": risks_df["–í–µ—Å"],
            "–í–∫–ª–∞–¥ –≤ —Ä–∏—Å–∫": risks_df["–í–∑–≤–µ—à–µ–Ω–Ω—ã–π —Ä–∏—Å–∫"],
            "–î–æ–ª—è –≤ –æ–±—â–µ–º —Ä–∏—Å–∫–µ": [
                f"{contribution_discr*100:.1f}%",
                f"{contribution_success*100:.1f}%",
                f"{contribution_first_try*100:.1f}%",
                f"{contribution_complaints*100:.1f}%",
                f"{contribution_attempts*100:.1f}%"
            ]
        })
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        st.dataframe(weighted_examples, use_container_width=True)
        
        # –°—Ç—Ä–æ–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –≤–∑–≤–µ—à–µ–Ω–Ω–æ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ
        weighted_formula = " + ".join([f"{row['–í–µ—Å']:.2f} √ó {row['–†–∏—Å–∫']:.2f}" for _, row in risks_df.iterrows()])
        st.markdown(f"**–í–∑–≤–µ—à–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ** = {weighted_formula} = **{weighted_avg:.3f}**")
        
        st.markdown("""
        ### –®–∞–≥ 3: –£—á–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∏—Å–∫–∞
        
        –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –≤–∑–≤–µ—à–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫ –ø–æ —Ñ–æ—Ä–º—É–ª–µ:
        
        –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∏—Å–∫ = Œ± √ó –í–∑–≤–µ—à–µ–Ω–Ω–æ–µ_—Å—Ä–µ–¥–Ω–µ–µ + (1-Œ±) √ó –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π_—Ä–∏—Å–∫
        
        –≥–¥–µ Œ± - –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –±–∞–ª–∞–Ω—Å–∞ –º–µ–∂–¥—É –≤–∑–≤–µ—à–µ–Ω–Ω—ã–º —Å—Ä–µ–¥–Ω–∏–º –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ä–∏—Å–∫–æ–º (0.7)
        """)
        
        # –°—Ç—Ä–æ–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∏—Å–∫–∞
        st.markdown(f"""
        **–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫** = max({', '.join([f"{r:.2f}" for r in [risk_discr, risk_success, risk_first_try, risk_complaints, risk_attempts]])}) = **{max_risk:.3f}**
        
        **–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∏—Å–∫** = {config["risk_thresholds"]["alpha_weight_avg"]:.2f} √ó {weighted_avg:.3f} + (1 - {config["risk_thresholds"]["alpha_weight_avg"]:.2f}) √ó {max_risk:.3f} = **{combined_risk:.3f}**
        """)
        
        st.markdown("""
        ### –®–∞–≥ 4: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥
        
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —Ä–∏—Å–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∏—Å–∫–∞ —Å—Ä–µ–¥–∏ –º–µ—Ç—Ä–∏–∫:
        
        * –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ—Ç—Ä–∏–∫–∞ —Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º —Ä–∏—Å–∫–æ–º (>0.75), –∏—Ç–æ–≥–æ–≤—ã–π —Ä–∏—Å–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∏–∂–µ 0.60
        * –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ—Ç—Ä–∏–∫–∞ —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º (>0.50), –∏—Ç–æ–≥–æ–≤—ã–π —Ä–∏—Å–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∏–∂–µ 0.40
        """)
        
        # –û–ø–∏—Å–∞–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞
        threshold_reason = ""
        if max_risk > config["risk_thresholds"]["critical"]:
            threshold_reason = f"–ï—Å—Ç—å –º–µ—Ç—Ä–∏–∫–∞ —Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º —Ä–∏—Å–∫–æ–º (>{config['risk_thresholds']['critical']:.2f})"
        elif max_risk > config["risk_thresholds"]["high"]:
            threshold_reason = f"–ï—Å—Ç—å –º–µ—Ç—Ä–∏–∫–∞ —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º (>{config['risk_thresholds']['high']:.2f})"
        else:
            threshold_reason = "–ù–µ—Ç –º–µ—Ç—Ä–∏–∫ —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º"
        
        st.markdown(f"""
        **–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥** = **{min_threshold:.2f}** ({threshold_reason})
        
        **–°—ã—Ä–æ–π —Ä–∏—Å–∫** = max({weighted_avg:.3f}, {combined_risk:.3f}, {min_threshold:.2f}) = **{raw_risk:.3f}**
        """)
        
        st.markdown("""
        ### –®–∞–≥ 5: –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫—É—é –∑–Ω–∞—á–∏–º–æ—Å—Ç—å
        
        –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ä–∏—Å–∫ —Å —É—á–µ—Ç–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫:
        
        * –ï—Å–ª–∏ –ø–æ–ø—ã—Ç–æ–∫ –º–∞–ª–æ, –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∏—Å–∫–∞ —Å–º–µ—â–∞–µ—Ç—Å—è –∫ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é (0.5)
        * –ï—Å–ª–∏ –ø–æ–ø—ã—Ç–æ–∫ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ (>100), –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∏—Å–∫–∞
        
        –ò—Ç–æ–≥–æ–≤—ã–π —Ä–∏—Å–∫ = –°—ã—Ä–æ–π_—Ä–∏—Å–∫ √ó –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç_–¥–æ–≤–µ—Ä–∏—è + 0.5 √ó (1 - –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç_–¥–æ–≤–µ—Ä–∏—è)
        """)
        
        # –°—Ç—Ä–æ–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ä–∏—Å–∫–∞
        st.markdown(f"""
        **–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–æ–≤–µ—Ä–∏—è** = min({demo_total_attempts} / {config["stats"]["significance_threshold"]}, 1.0) = **{confidence:.2f}**
        
        **–ò—Ç–æ–≥–æ–≤—ã–π —Ä–∏—Å–∫** = {raw_risk:.3f} √ó {confidence:.2f} + {config["stats"]["neutral_risk_value"]:.2f} √ó (1 - {confidence:.2f}) = **{final_risk:.3f}**
        """)
    
    col1, col2 = st.columns([1, 3])
    
    with col1:
        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", type="primary"):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ core_config
            if save_config(config):
                st.success("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω—è—Ç—å—Å—è –∫ —Ä–∞—Å—á–µ—Ç–∞–º —Ä–∏—Å–∫–∞!")
            else:
                st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")

    with col2:
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å JSON –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"):
            st.code(json.dumps(config, indent=4, ensure_ascii=False), language="json")