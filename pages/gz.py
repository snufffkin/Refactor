# pages/gz.py
"""
–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≥—Ä—É–ø–ø—ã –∑–∞–¥–∞–Ω–∏–π (–û–±–∑–æ—Ä + –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º)
–í–∫–ª—é—á–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ –ø—Ä–µ–∂–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã cards.py
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import numpy as np
import urllib.parse as ul

import core
from components.utils import create_hierarchical_header, display_clickable_items, add_gz_links
from components.metrics import display_metrics_row, display_status_chart, display_risk_distribution
from components.charts import display_cards_chart, display_risk_bar_chart, display_metrics_comparison, display_success_complaints_chart, display_completion_radar, display_trickiness_chart, display_trickiness_success_chart
import navigation_utils

def page_gz(df: pd.DataFrame, create_link_fn=None):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≥—Ä—É–ø–ø—ã –∑–∞–¥–∞–Ω–∏–π —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º"""
    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ, –º–æ–¥—É–ª—é, —É—Ä–æ–∫—É –∏ –≥—Ä—É–ø–ø–µ –∑–∞–¥–∞–Ω–∏–π
    df_gz = core.apply_filters(df, ["program", "module", "lesson", "gz"])
    prog_name = st.session_state.get('filter_program')
    module_name = st.session_state.get('filter_module')
    lesson_name = st.session_state.get('filter_lesson')
    gz_name = st.session_state.get('filter_gz')
    
    if df_gz.empty:
        st.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ì–ó '{gz_name}' –≤ —É—Ä–æ–∫–µ '{lesson_name}', –º–æ–¥—É–ª—å '{module_name}', –ø—Ä–æ–≥—Ä–∞–º–º–∞ '{prog_name}'")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
    create_hierarchical_header(
        levels=["program", "module", "lesson", "gz"],
        values=[prog_name, module_name, lesson_name, gz_name]
    )
    
    # 1. –ú–µ—Ç—Ä–∏–∫–∏ –≥—Ä—É–ø–ø—ã –∑–∞–¥–∞–Ω–∏–π
    st.subheader("üìà –ú–µ—Ç—Ä–∏–∫–∏ –≥—Ä—É–ø–ø—ã –∑–∞–¥–∞–Ω–∏–π")
    df_lesson = df[(df["program"] == prog_name) & (df["module"] == module_name) & (df["lesson"] == lesson_name)]
    display_metrics_row(df_gz, compare_with=df_lesson)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫—É —Å—É–º–º–∞—Ä–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –ì–ó
    total_time = df_gz["time_median"].sum()
    total_time = total_time / 60
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–µ—Ç—Ä–∏–∫—É –≤—Ä–µ–º–µ–Ω–∏
    st.subheader("‚è±Ô∏è –°—É–º–º–∞—Ä–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ –ì–ó")
    st.metric(
        label="–°—É–º–º–∞—Ä–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ –≥—Ä—É–ø–ø—É –∑–∞–¥–∞–Ω–∏–π (–º–∏–Ω)",
        value=f"{total_time:.1f}"
    )
    
    # 2. –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞ –∏ —Å—Ç–∞—Ç—É—Å—ã
    col1, col2 = st.columns(2)
    
    with col1:
        display_risk_distribution(df_gz)
    
    with col2:
        display_status_chart(df_gz)
    
    # 3. –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –≤–∏–¥–µ —Å—Ç–æ–ª–±—á–∞—Ç–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
    st.subheader("üìä –ö–∞—Ä—Ç–æ—á–∫–∏ –≤ –≥—Ä—É–ø–ø–µ –∑–∞–¥–∞–Ω–∏–π")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–∫–∏ trickiness_level
    if "trickiness_level" not in df_gz.columns:
        df_gz["trickiness_level"] = df_gz.apply(core.get_trickiness_level, axis=1)
        
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –æ–±—â–µ–π —É—Å–ø–µ—à–Ω–æ—Å—Ç—å—é –∏ —É—Å–ø–µ—Ö–æ–º —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏
    df_gz["success_diff"] = df_gz["success_rate"] - df_gz["first_try_success_rate"]
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∏—Å–∫—É –¥–ª—è –ª—É—á—à–µ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    df_cards = df_gz.copy().sort_values("risk", ascending=False).reset_index(drop=True)
    df_cards["card_num"] = df_cards.index + 1  # –ü–µ—Ä–µ–Ω—É–º–µ—Ä—É–µ–º –ø–æ—Å–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç–æ–ª–±—á–∞—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É —Ä–∏—Å–∫–∞ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º
    display_cards_chart(
        df_cards,
        x_col="card_num",
        y_cols="risk",
        title="–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º",
        sort_by="risk",
        ascending=False
    )
    
    # 4. –î–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ (–∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–∑ –ø—Ä–µ–∂–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã cards)
    st.subheader("üìä –î–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫")
    
    # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π
    tabs = st.tabs([
        "–ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏", 
        "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∏ –∂–∞–ª–æ–±—ã", 
        "–¢–∏–ø—ã –∫–∞—Ä—Ç–æ—á–µ–∫", 
        "–¢—Ä–∏–∫–∏-–∫–∞—Ä—Ç–æ—á–∫–∏",
        "–î–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç—å"
    ])
    
    with tabs[0]:
        # –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–µ—Ç—Ä–∏–∫ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
        display_cards_chart(
            df_cards,
            x_col="card_num",
            y_cols=["success_rate", "first_try_success_rate", "complaint_rate"],
            title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º",
            barmode="group",
            color_discrete_sequence=["#4da6ff", "#ff9040", "#ff6666"]
        )
    
    with tabs[1]:
        # –ì—Ä–∞—Ñ–∏–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∏ –∂–∞–ª–æ–±
        # –ó–∞–º–µ–Ω—è–µ–º NaN –≤ total_attempts –Ω–∞ 0 –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ size
        scatter_df = df_gz.copy()
        scatter_df['total_attempts'] = scatter_df['total_attempts'].fillna(0)
        fig = px.scatter(
            scatter_df,
            x="success_rate",
            y="complaint_rate",
            color="risk",
            size="total_attempts",
            hover_name="card_id",
            color_continuous_scale="RdYlGn_r",
            labels={
                "success_rate": "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å", 
                "complaint_rate": "–ü—Ä–æ—Ü–µ–Ω—Ç –∂–∞–ª–æ–±",
                "risk": "–†–∏—Å–∫"
            },
            title="–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∏ –∂–∞–ª–æ–±",
            hover_data={
                "card_id": True,
                "success_rate": ":.1%",
                "complaint_rate": ":.1%",
                "risk": ":.2f",
                "discrimination_avg": ":.2f",
                "card_type": True,
                "total_attempts": True
            }
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Å–µ–π
        fig.update_layout(
            xaxis_tickformat=".0%",
            yaxis_tickformat=".1%"
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    with tabs[2]:
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∫–∞—Ä—Ç–æ—á–µ–∫, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        if "card_type" in df_gz.columns and len(df_gz["card_type"].unique()) > 1:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø—É –∫–∞—Ä—Ç–æ—á–∫–∏
            card_type_stats = df_gz.groupby("card_type").agg(
                count=("card_id", "count"),
                risk=("risk", "mean"),
                success=("success_rate", "mean"),
                complaints=("complaint_rate", "mean")
            ).reset_index()
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç–æ–ª–±—á–∞—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É –¥–ª—è —Ç–∏–ø–æ–≤ –∫–∞—Ä—Ç–æ—á–µ–∫
            fig = px.bar(
                card_type_stats,
                x="card_type",
                y="count",
                color="risk",
                color_continuous_scale="RdYlGn_r",
                labels={
                    "card_type": "–¢–∏–ø –∫–∞—Ä—Ç–æ—á–∫–∏", 
                    "count": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", 
                    "risk": "–†–∏—Å–∫"
                },
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ —Ç–∏–ø–∞–º",
                hover_data=["success", "complaints"]
            )
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏
            fig.update_traces(
                hovertemplate="<b>%{x}</b><br>" +
                              "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: %{y}<br>" +
                              "–°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫: %{marker.color:.2f}<br>" +
                              "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: %{customdata[0]:.1%}<br>" +
                              "–ñ–∞–ª–æ–±—ã: %{customdata[1]:.1%}"
            )
            
            st.plotly_chart(fig, use_container_width=True)
            
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø–æ —Ç–∏–ø–∞–º –∫–∞—Ä—Ç–æ—á–µ–∫
            fig2 = px.bar(
                card_type_stats,
                x="card_type",
                y=["success", "complaints", "risk"],
                barmode="group",
                labels={
                    "card_type": "–¢–∏–ø –∫–∞—Ä—Ç–æ—á–∫–∏",
                    "value": "–ó–Ω–∞—á–µ–Ω–∏–µ",
                    "variable": "–ú–µ—Ç—Ä–∏–∫–∞"
                },
                title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø–æ —Ç–∏–ø–∞–º –∫–∞—Ä—Ç–æ—á–µ–∫",
                color_discrete_sequence=["#4da6ff", "#ff6666", "#ff7f7f"]
            )
            
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ª–µ–≥–µ–Ω–¥—ã
            fig2.for_each_trace(lambda t: t.update(name = {
                "success": "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å",
                "complaints": "–ñ–∞–ª–æ–±—ã",
                "risk": "–†–∏—Å–∫"
            }.get(t.name, t.name)))
            
            st.plotly_chart(fig2, use_container_width=True)
        else:
            st.info("–í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –∑–∞–¥–∞–Ω–∏–π –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞.")
    
    with tabs[3]:
        # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∏–∫–∏-–∫–∞—Ä—Ç–æ—á–µ–∫
        st.markdown("### –ê–Ω–∞–ª–∏–∑ \"—Ç—Ä–∏–∫–∏\"-–∫–∞—Ä—Ç–æ—á–µ–∫")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∏–∫–∏-–∫–∞—Ä—Ç–æ—á–µ–∫
        tricky_count = (df_gz["trickiness_level"] > 0).sum()
        
        if tricky_count > 0:
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–∏–∫–∏-–∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ —É—Ä–æ–≤–Ω—è–º
            tricky_levels = df_gz["trickiness_level"].value_counts().sort_index()
            
            # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            tricky_df = pd.DataFrame({
                "–£—Ä–æ–≤–µ–Ω—å": ["–ù–µ—Ç –ø–æ–¥–ª–æ—Å—Ç–∏", "–ù–∏–∑–∫–∏–π", "–°—Ä–µ–¥–Ω–∏–π", "–í—ã—Å–æ–∫–∏–π"],
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": [
                    tricky_levels.get(0, 0),
                    tricky_levels.get(1, 0),
                    tricky_levels.get(2, 0),
                    tricky_levels.get(3, 0)
                ]
            })
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            col1, col2 = st.columns(2)
            
            with col1:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                st.metric("–¢—Ä–∏–∫–∏-–∫–∞—Ä—Ç–æ—á–µ–∫", tricky_count, f"{tricky_count/len(df_gz):.1%} –æ—Ç –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º
                st.markdown("#### –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º –ø–æ–¥–ª–æ—Å—Ç–∏")
                for i, row in tricky_df.iterrows():
                    if i == 0:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º "–ù–µ—Ç –ø–æ–¥–ª–æ—Å—Ç–∏"
                        continue
                    
                    level = row["–£—Ä–æ–≤–µ–Ω—å"]
                    count = row["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]
                    percent = count / len(df_gz) * 100
                    
                    # –í—ã–±–∏—Ä–∞–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è
                    color = "yellow"
                    if level == "–°—Ä–µ–¥–Ω–∏–π":
                        color = "orange"
                    elif level == "–í—ã—Å–æ–∫–∏–π":
                        color = "red"
                    
                    st.markdown(f"**{level}**: <span style='color:{color};'>{count}</span> ({percent:.1f}%)", unsafe_allow_html=True)
            
            with col2:
                # –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—Ä–∏–∫–∏-–∫–∞—Ä—Ç–æ—á–µ–∫
                fig = px.pie(
                    tricky_df[tricky_df["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"] > 0],
                    values="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
                    names="–£—Ä–æ–≤–µ–Ω—å",
                    title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º –ø–æ–¥–ª–æ—Å—Ç–∏",
                    color="–£—Ä–æ–≤–µ–Ω—å",
                    color_discrete_map={
                        "–ù–µ—Ç –ø–æ–¥–ª–æ—Å—Ç–∏": "#c0c0c0",
                        "–ù–∏–∑–∫–∏–π": "#ffff7f",
                        "–°—Ä–µ–¥–Ω–∏–π": "#ffaa7f",
                        "–í—ã—Å–æ–∫–∏–π": "#ff7f7f"
                    }
                )
                
                st.plotly_chart(fig, use_container_width=True)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –ø–æ–¥–ª–æ—Å—Ç–∏ –∫–∞—Ä—Ç–æ—á–µ–∫
            display_trickiness_chart(df_gz, x_col="card_id", limit=50, title="–£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ª–æ—Å—Ç–∏ –∫–∞—Ä—Ç–æ—á–µ–∫")
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É —Ä–∞—Å—Å–µ—è–Ω–∏—è –¥–ª—è —Ç—Ä–∏–∫–∏-–∫–∞—Ä—Ç–æ—á–µ–∫
            display_trickiness_success_chart(df_gz, limit=50)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å —Ç—Ä–∏–∫–∏-–∫–∞—Ä—Ç–æ—á–∫–∞–º–∏
            tricky_cards = df_gz[df_gz["trickiness_level"] > 0].sort_values("trickiness_level", ascending=False)
            
            if not tricky_cards.empty:
                st.markdown("#### –°–ø–∏—Å–æ–∫ —Ç—Ä–∏–∫–∏-–∫–∞—Ä—Ç–æ—á–µ–∫")
                
                # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç—Ä–∏–∫–∏-–∫–∞—Ä—Ç–æ—á–µ–∫
                tricky_table = tricky_cards[["card_id", "card_type", "success_rate", "first_try_success_rate", "success_diff", "risk", "trickiness_level"]]
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É —Å —É—Ä–æ–≤–Ω–µ–º –ø–æ–¥–ª–æ—Å—Ç–∏
                tricky_table["–£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ª–æ—Å—Ç–∏"] = tricky_table["trickiness_level"].map({
                    1: "–ù–∏–∑–∫–∏–π",
                    2: "–°—Ä–µ–¥–Ω–∏–π",
                    3: "–í—ã—Å–æ–∫–∏–π"
                })
                
                # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                display_df = pd.DataFrame()
                display_df["ID –∫–∞—Ä—Ç–æ—á–∫–∏"] = tricky_table["card_id"]
                display_df["–¢–∏–ø"] = tricky_table["card_type"]
                display_df["–£—Å–ø–µ—à–Ω–æ—Å—Ç—å"] = tricky_table["success_rate"].apply(lambda x: f"{x:.1%}")
                display_df["–£—Å–ø–µ—Ö —Å 1-–π"] = tricky_table["first_try_success_rate"].apply(lambda x: f"{x:.1%}")
                display_df["–†–∞–∑–Ω–∏—Ü–∞"] = tricky_table["success_diff"].apply(lambda x: f"{x:.1%}")
                display_df["–£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ª–æ—Å—Ç–∏"] = tricky_table["–£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ª–æ—Å—Ç–∏"]
                display_df["–†–∏—Å–∫"] = tricky_table["risk"].apply(lambda x: f"{x:.2f}")
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –±–µ–∑ —Å—Ç–æ–ª–±—Ü–æ–≤ '–î–µ–π—Å—Ç–≤–∏—è' –∏ '–†–µ–¥–∞–∫—Ç–æ—Ä'
                st.dataframe(display_df, hide_index=True, use_container_width=True)
                # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –¥–µ—Ç–∞–ª—å–Ω–æ–º—É –∞–Ω–∞–ª–∏–∑—É —Ç—Ä–∏–∫–∏-–∫–∞—Ä—Ç–æ—á–µ–∫
                for _, row in tricky_cards.iterrows():
                    card_id = int(row["card_id"])
                    if st.button(f"–ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞—Ä—Ç–æ—á–∫–µ {card_id}", key=f"gz_tricky_nav_{card_id}"):
                        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –±–µ–∑ —Å–±—Ä–æ—Å–∞ —Å–µ—Å—Å–∏–∏
                        navigation_utils.navigate_to("cards", card_id=str(card_id))
                        st.rerun()
        else:
            st.info("–í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç —Ç—Ä–∏–∫–∏-–∫–∞—Ä—Ç–æ—á–µ–∫.")
    
    with tabs[4]:
        # –ê–Ω–∞–ª–∏–∑ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–∞—Ä—Ç–æ—á–µ–∫
        st.markdown("### –ê–Ω–∞–ª–∏–∑ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–∞—Ä—Ç–æ—á–µ–∫")
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
        fig = px.bar(
            df_cards,
            x="card_num",
            y="discrimination_avg",
            color="success_rate",
            color_continuous_scale="RdYlGn",
            title="–ò–Ω–¥–µ–∫—Å –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º",
            labels={"card_num": "–ù–æ–º–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏", "discrimination_avg": "–î–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç—å"},
            hover_data=["card_id", "card_type"]
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –¥–ª—è –≥—Ä–∞–Ω–∏—Ü –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        fig.add_hline(y=0.35, line_dash="dash", line_color="green", 
                      annotation_text="–•–æ—Ä–æ—à–∞—è", annotation_position="left")
        fig.add_hline(y=0.15, line_dash="dash", line_color="red", 
                      annotation_text="–ù–∏–∑–∫–∞—è", annotation_position="left")
        
        st.plotly_chart(fig, use_container_width=True)
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
        good_discr = (df_gz["discrimination_avg"] >= 0.35).sum()
        medium_discr = ((df_gz["discrimination_avg"] < 0.35) & (df_gz["discrimination_avg"] >= 0.15)).sum()
        low_discr = (df_gz["discrimination_avg"] < 0.15).sum()
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("–•–æ—Ä–æ—à–∞—è –¥–∏—Å–∫—Ä. (>0.35)", good_discr, f"{good_discr/len(df_gz):.1%}")
        
        with col2:
            st.metric("–°—Ä–µ–¥–Ω—è—è –¥–∏—Å–∫—Ä. (0.15-0.35)", medium_discr, f"{medium_discr/len(df_gz):.1%}")
        
        with col3:
            st.metric("–ù–∏–∑–∫–∞—è –¥–∏—Å–∫—Ä. (<0.15)", low_discr, f"{low_discr/len(df_gz):.1%}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –Ω–∏–∑–∫–æ–π –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç—å—é
        if low_discr > 0:
            st.markdown("#### –ö–∞—Ä—Ç–æ—á–∫–∏ —Å –Ω–∏–∑–∫–æ–π –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç—å—é")
            low_discr_cards = df_gz[df_gz["discrimination_avg"] < 0.15].sort_values("discrimination_avg")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            display_df = pd.DataFrame()
            display_df["ID –∫–∞—Ä—Ç–æ—á–∫–∏"] = low_discr_cards["card_id"]
            display_df["–¢–∏–ø"] = low_discr_cards["card_type"]
            display_df["–î–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç—å"] = low_discr_cards["discrimination_avg"].apply(lambda x: f"{x:.3f}")
            display_df["–£—Å–ø–µ—à–Ω–æ—Å—Ç—å"] = low_discr_cards["success_rate"].apply(lambda x: f"{x:.1%}")
            display_df["–†–∏—Å–∫"] = low_discr_cards["risk"].apply(lambda x: f"{x:.2f}")
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –±–µ–∑ —Å—Ç–æ–ª–±—Ü–æ–≤ '–î–µ–π—Å—Ç–≤–∏—è' –∏ '–†–µ–¥–∞–∫—Ç–æ—Ä'
            st.dataframe(display_df, hide_index=True, use_container_width=True)
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –¥–µ—Ç–∞–ª—å–Ω–æ–º—É –∞–Ω–∞–ª–∏–∑—É –∫–∞—Ä—Ç–æ—á–µ–∫
            for _, row in low_discr_cards.iterrows():
                card_id = int(row['card_id'])
                if st.button(f"–ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞—Ä—Ç–æ—á–∫–µ {card_id}", key=f"gz_lowdiscr_nav_list_{card_id}"):
                    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –±–µ–∑ —Å–±—Ä–æ—Å–∞ —Å–µ—Å—Å–∏–∏
                    navigation_utils.navigate_to("cards", card_id=str(card_id))
                    st.rerun()
    
    # 5. –¢–∞–±–ª–∏—Ü–∞ —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ –∏ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
    st.subheader("üìã –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º")
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    cards_df = df_gz[["card_id", "card_type", "status", "success_rate", 
                      "first_try_success_rate", "complaint_rate", 
                      "discrimination_avg", "total_attempts", "risk", "trickiness_level"]]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –≤ —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
    cards_df = cards_df.sort_values("risk", ascending=False).reset_index(drop=True)
    cards_df["–ù–æ–º–µ—Ä"] = cards_df.index + 1
    
    # –ü–µ—Ä–µ–æ—Ä–≥–∞–Ω–∏–∑—É–µ–º –∫–æ–ª–æ–Ω–∫–∏, —á—Ç–æ–±—ã –Ω–æ–º–µ—Ä –±—ã–ª –≤ –Ω–∞—á–∞–ª–µ
    cards_df = cards_df[["–ù–æ–º–µ—Ä", "card_id", "card_type", "status", "success_rate", 
                         "first_try_success_rate", "complaint_rate", 
                         "discrimination_avg", "total_attempts", "risk", "trickiness_level"]]
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    display_df = pd.DataFrame()
    display_df["–ù–æ–º–µ—Ä"] = cards_df["–ù–æ–º–µ—Ä"]
    display_df["ID –∫–∞—Ä—Ç–æ—á–∫–∏"] = cards_df["card_id"]
    display_df["–¢–∏–ø"] = cards_df["card_type"]
    display_df["–°—Ç–∞—Ç—É—Å"] = cards_df["status"]
    display_df["–£—Å–ø–µ—à–Ω–æ—Å—Ç—å"] = cards_df["success_rate"].apply(lambda x: f"{x:.1%}")
    display_df["–£—Å–ø–µ—Ö —Å 1-–π"] = cards_df["first_try_success_rate"].apply(lambda x: f"{x:.1%}")
    display_df["–ñ–∞–ª–æ–±—ã"] = cards_df["complaint_rate"].apply(lambda x: f"{x:.1%}")
    display_df["–î–∏—Å–∫—Ä."] = cards_df["discrimination_avg"].apply(lambda x: f"{x:.2f}")
    # –ó–∞–º–µ–Ω—è–µ–º NaN –Ω–∞ 0 –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∫ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –≤ —Å—Ç—Ä–æ–∫—É
    display_df["–ü–æ–ø—ã—Ç–∫–∏"] = cards_df["total_attempts"].fillna(0).astype(int).astype(str)
    display_df["–†–∏—Å–∫"] = cards_df["risk"].apply(lambda x: f"{x:.2f}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ–¥–ª–æ—Å—Ç–∏
    trickiness_categories = {
        0: "–ù–µ—Ç",
        1: "–ù–∏–∑–∫–∏–π",
        2: "–°—Ä–µ–¥–Ω–∏–π",
        3: "–í—ã—Å–æ–∫–∏–π"
    }
    display_df["–ü–æ–¥–ª–æ—Å—Ç—å"] = cards_df["trickiness_level"].map(trickiness_categories)
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –±–µ–∑ —Å—Ç–æ–ª–±—Ü–æ–≤ '–î–µ–π—Å—Ç–≤–∏—è' –∏ '–†–µ–¥–∞–∫—Ç–æ—Ä'
    st.dataframe(display_df, hide_index=True, use_container_width=True)
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –¥–µ—Ç–∞–ª—å–Ω–æ–º—É –∞–Ω–∞–ª–∏–∑—É –∫–∞—Ä—Ç–æ—á–µ–∫
    for _, row in cards_df.iterrows():
        card_id = int(row['card_id'])
        if st.button(f"–ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞—Ä—Ç–æ—á–∫–µ {card_id}", key=f"gz_detail_nav_{card_id}"):
            # –ù–∞–≤–∏–≥–∞—Ü–∏—è –±–µ–∑ —Å–±—Ä–æ—Å–∞ —Å–µ—Å—Å–∏–∏
            navigation_utils.navigate_to("cards", card_id=str(card_id))
            st.rerun()
    
    # 6. –ö–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫–æ –≤—Å–µ–º –∫–∞—Ä—Ç–æ—á–∫–∞–º
    st.subheader("üîç –í—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –≥—Ä—É–ø–ø–µ –∑–∞–¥–∞–Ω–∏–π")
    for _, card in df_gz.sort_values("risk", ascending=False).iterrows():
        card_id = int(card["card_id"])
        risk = card["risk"]
        card_type = card["card_type"]
        color = "red" if risk > 0.75 else ("orange" if risk > 0.5 else ("gold" if risk > 0.25 else "green"))
        key = f"gz_card_nav_{card_id}"
        if st.button(f"ID: {card_id} - –†–∏—Å–∫: {risk:.2f} - {card_type}", key=key):
            navigation_utils.navigate_to("cards", card_id=str(card_id))
            st.rerun()
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ–ª–∞–≥–∏
        special_flags = []
        if card.get("trickiness_level", 0) > 0:
            level_text = trickiness_categories.get(int(card["trickiness_level"]), "")
            if level_text:
                special_flags.append(f"üìä –ü–æ–¥–ª–æ—Å—Ç—å: {level_text}")
        if card.get("discrimination_avg", 0) < 0.15:
            special_flags.append("üìâ –ù–∏–∑–∫–∞—è –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç—å")
        if card.get("complaint_rate", 0) > 0.05:
            special_flags.append("‚ö†Ô∏è –ñ–∞–ª–æ–±—ã")
        if special_flags:
            st.caption(" | ".join(special_flags))
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–∏–∫–∏-–∫–∞—Ä—Ç–æ—á–µ–∫
    tricky_cards = df_gz[df_gz["trickiness_level"] > 0].sort_values("trickiness_level", ascending=False)
    
    if not tricky_cards.empty:
        st.markdown("### –¢—Ä–∏–∫–∏-–∫–∞—Ä—Ç–æ—á–∫–∏")
        for _, card in tricky_cards.iterrows():
            card_id = int(card["card_id"])
            trickiness = card.get("trickiness_level", 0)
            color = "red" if trickiness == 3 else ("orange" if trickiness == 2 else "gold")
            key = f"gz_tricky_nav_list_{card_id}"
            if st.button(f"ID: {card_id} - –ü–æ–¥–ª–æ—Å—Ç—å: {trickiness} - {card['card_type']}", key=key):
                navigation_utils.navigate_to("cards", card_id=str(card_id))
                st.rerun()
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–∏ –±–æ–ª—å—à–æ–º —á–∏—Å–ª–µ
        if len(tricky_cards) > 12:
            st.info(f"–ò –µ—â–µ {len(tricky_cards) - 12} –∫–∞—Ä—Ç–æ—á–µ–∫...")
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å –Ω–∏–∑–∫–æ–π –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç—å—é
    low_discr_cards = df_gz[df_gz["discrimination_avg"] < 0.15].sort_values("discrimination_avg")
    
    if not low_discr_cards.empty:
        st.markdown("### –ö–∞—Ä—Ç–æ—á–∫–∏ —Å –Ω–∏–∑–∫–æ–π –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç—å—é")
        for _, card in low_discr_cards.iterrows():
            card_id = int(card["card_id"])
            discr = card["discrimination_avg"]
            color = "purple"
            key = f"gz_lowdiscr_nav_list_{card_id}"
            if st.button(f"ID: {card_id} - –î–∏—Å–∫—Ä.: {discr:.2f} - {card['card_type']}", key=key):
                navigation_utils.navigate_to("cards", card_id=str(card_id))
                st.rerun()
        if len(low_discr_cards) > 12:
            st.info(f"–ò –µ—â–µ {len(low_discr_cards) - 12} –∫–∞—Ä—Ç–æ—á–µ–∫...")

def _page_gz_inline(df: pd.DataFrame):
    """–í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≥—Ä—É–ø–ø –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —É—Ä–æ–∫–∞"""
    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ, –º–æ–¥—É–ª—é –∏ —É—Ä–æ–∫—É
    df_lesson = core.apply_filters(df, ["program", "module", "lesson"])
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    if df_lesson.empty:
        lesson_name = st.session_state.get('filter_lesson') or '‚Äî'
        st.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É—Ä–æ–∫–∞ '{lesson_name}'")
        return
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.subheader("üß© –ì—Ä—É–ø–ø—ã –∑–∞–¥–∞–Ω–∏–π –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–∫–∞")
    
    # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≥—Ä—É–ø–ø–∞–º –∑–∞–¥–∞–Ω–∏–π
    agg = df_lesson.groupby("gz").agg(
        risk=("risk", "mean"),
        success=("success_rate", "mean"),
        complaints=("complaint_rate", "mean"),
        cards=("card_id", "nunique")
    ).reset_index()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é –¥–ª—è –≥—Ä—É–ø–ø –∑–∞–¥–∞–Ω–∏–π
    agg = agg.sort_values("risk", ascending=False).reset_index(drop=True)
    agg["gz_num"] = agg.index + 1
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    fig = px.bar(
        agg,
        x="gz_num",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –Ω—É–º–µ—Ä–∞—Ü–∏—é
        y="risk",
        color="risk",
        color_continuous_scale="RdYlGn_r",
        labels={"gz_num": "–ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –∑–∞–¥–∞–Ω–∏–π", "risk": "–†–∏—Å–∫"},
        title="–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º –∑–∞–¥–∞–Ω–∏–π",
        hover_data=["gz", "success", "complaints", "cards"]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π ID –≤ –ø–æ–¥—Å–∫–∞–∑–∫–µ
    )
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏
    fig.update_traces(
        hovertemplate="<b>%{customdata[0]}</b><br>" +
                      "–ù–æ–º–µ—Ä: %{x}<br>" +
                      "–†–∏—Å–∫: %{y:.2f}<br>" +
                      "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: %{customdata[1]:.1%}<br>" +
                      "–ñ–∞–ª–æ–±—ã: %{customdata[2]:.1%}<br>" +
                      "–ö–∞—Ä—Ç–æ—á–µ–∫: %{customdata[3]}"
    )
    
    fig.update_layout(
        xaxis_tickangle=0  # –£–±–∏—Ä–∞–µ–º –Ω–∞–∫–ª–æ–Ω, —Ç.–∫. —á–∏—Å–ª–∞ –∫–æ–º–ø–∞–∫—Ç–Ω—ã
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    # –¢–∞–±–ª–∏—Ü–∞ —Å –≥—Ä—É–ø–ø–∞–º–∏ –∑–∞–¥–∞–Ω–∏–π, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å –≥—Ä–∞—Ñ–∏–∫–æ–º
    table_df = agg[["gz_num", "gz", "risk", "success", "complaints", "cards"]]
    table_df.columns = ["–ù–æ–º–µ—Ä", "–ì—Ä—É–ø–ø–∞ –∑–∞–¥–∞–Ω–∏–π", "–†–∏—Å–∫", "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å", "–ñ–∞–ª–æ–±—ã", "–ö–∞—Ä—Ç–æ—á–µ–∫"]
    
    st.dataframe(
        table_df.style.format({
            "–†–∏—Å–∫": "{:.2f}",
            "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å": "{:.1%}",
            "–ñ–∞–ª–æ–±—ã": "{:.1%}"
        }),
        use_container_width=True
    )
    
    # –°–ø–∏—Å–æ–∫ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø –∑–∞–¥–∞–Ω–∏–π
    display_clickable_items(df_lesson, "gz", "gz", metrics=["cards", "risk"])