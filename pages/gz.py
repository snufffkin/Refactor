# pages/gz.py —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
"""
–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≥—Ä—É–ø–ø—ã –∑–∞–¥–∞–Ω–∏–π (–û–±–∑–æ—Ä + –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º)
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import numpy as np

import core
from components.utils import create_hierarchical_header, display_clickable_items, add_gz_links
from components.metrics import display_metrics_row, display_status_chart, display_risk_distribution
from components.charts import display_risk_bar_chart, display_metrics_comparison, display_success_complaints_chart, display_completion_radar

def page_gz(df: pd.DataFrame):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≥—Ä—É–ø–ø—ã –∑–∞–¥–∞–Ω–∏–π —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º"""
    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ, –º–æ–¥—É–ª—é, —É—Ä–æ–∫—É –∏ –≥—Ä—É–ø–ø–µ –∑–∞–¥–∞–Ω–∏–π
    df_gz = core.apply_filters(df, ["program", "module", "lesson", "gz"])
    program_filter = st.session_state.get('filter_program')
    module_filter = st.session_state.get('filter_module')
    lesson_filter = st.session_state.get('filter_lesson')
    gz_filter = st.session_state.get('filter_gz')
    
    # –°–æ–∑–¥–∞–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    create_hierarchical_header(
        levels=["program", "module", "lesson", "gz"],
        values=[program_filter, module_filter, lesson_filter, gz_filter]
    )
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    if df_gz.empty:
        st.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä—É–ø–ø—ã –∑–∞–¥–∞–Ω–∏–π '{gz_filter}' –≤ —É—Ä–æ–∫–µ '{lesson_filter}'")
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ì–ó
    add_gz_links(df_gz, gz_filter)
    
    # 1. –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –≥—Ä—É–ø–ø—ã –∑–∞–¥–∞–Ω–∏–π
    st.subheader("üìà –ú–µ—Ç—Ä–∏–∫–∏ –≥—Ä—É–ø–ø—ã –∑–∞–¥–∞–Ω–∏–π")
    display_metrics_row(df_gz, compare_with=df)
    
    # 2. –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞ –∏ —Å—Ç–∞—Ç—É—Å—ã
    col1, col2 = st.columns(2)
    
    with col1:
        display_risk_distribution(df_gz)
    
    with col2:
        display_status_chart(df_gz)
    
    # 3. –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –≤–∏–¥–µ —Å—Ç–æ–ª–±—á–∞—Ç–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
    st.subheader("üìä –ö–∞—Ä—Ç–æ—á–∫–∏ –≤ –≥—Ä—É–ø–ø–µ –∑–∞–¥–∞–Ω–∏–π")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –Ω—É–º–µ—Ä–∞—Ü–∏—é –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
    df_cards = df_gz.copy().reset_index(drop=True)
    df_cards["card_num"] = df_cards.index + 1  # –ù—É–º–µ—Ä–∞—Ü–∏—è —Å 1
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∏—Å–∫—É –¥–ª—è –ª—É—á—à–µ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    df_cards = df_cards.sort_values("risk", ascending=False).reset_index(drop=True)
    df_cards["card_num"] = df_cards.index + 1  # –ü–µ—Ä–µ–Ω—É–º–µ—Ä—É–µ–º –ø–æ—Å–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç–æ–ª–±—á–∞—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É —Ä–∏—Å–∫–∞ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º
    fig = px.bar(
        df_cards,
        x="card_num",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –Ω—É–º–µ—Ä–∞—Ü–∏—é –≤–º–µ—Å—Ç–æ ID
        y="risk",
        color="risk",
        color_continuous_scale="RdYlGn_r",
        labels={"card_num": "–ù–æ–º–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏", "risk": "–†–∏—Å–∫"},
        title="–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º",
        hover_data=["card_id", "success_rate", "complaint_rate", "discrimination_avg", "card_type"]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π ID –≤ –ø–æ–¥—Å–∫–∞–∑–∫–µ
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –¥–ª—è –≥—Ä–∞–Ω–∏—Ü –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∏—Å–∫–∞
    fig.add_hline(y=0.3, line_dash="dash", line_color="green", 
                  annotation_text="–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫", annotation_position="left")
    fig.add_hline(y=0.5, line_dash="dash", line_color="gold", 
                  annotation_text="–°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫", annotation_position="left")
    fig.add_hline(y=0.7, line_dash="dash", line_color="red", 
                  annotation_text="–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫", annotation_position="left")
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏
    fig.update_traces(
        hovertemplate="<b>ID: %{customdata[0]}</b><br>" +
                      "–ù–æ–º–µ—Ä: %{x}<br>" +
                      "–†–∏—Å–∫: %{y:.2f}<br>" +
                      "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: %{customdata[1]:.1%}<br>" +
                      "–ñ–∞–ª–æ–±—ã: %{customdata[2]:.1%}<br>" +
                      "–î–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç—å: %{customdata[3]:.2f}<br>" +
                      "–¢–∏–ø: %{customdata[4]}"
    )
    
    fig.update_layout(
        xaxis_title="–ù–æ–º–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏",
        yaxis_title="–†–∏—Å–∫",
        xaxis_tickangle=0  # –£–±–∏—Ä–∞–µ–º –Ω–∞–∫–ª–æ–Ω, —Ç.–∫. —á–∏—Å–ª–∞ –∫–æ–º–ø–∞–∫—Ç–Ω—ã
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    # 4. –î–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫
    st.subheader("üìä –î–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫")
    
    # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π
    tabs = st.tabs(["–ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏", "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∏ –∂–∞–ª–æ–±—ã", "–¢–∏–ø—ã –∫–∞—Ä—Ç–æ—á–µ–∫"])
    
    with tabs[0]:
        # –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–µ—Ç—Ä–∏–∫ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
        fig = px.bar(
            df_cards,
            x="card_num",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –Ω—É–º–µ—Ä–∞—Ü–∏—é –≤–º–µ—Å—Ç–æ ID
            y=["success_rate", "first_try_success_rate", "complaint_rate"],
            barmode="group",
            hover_data=["card_id", "card_type"],  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π ID –≤ –ø–æ–¥—Å–∫–∞–∑–∫–µ
            color_discrete_sequence=["#4da6ff", "#ff9040", "#ff6666"],
            labels={
                "card_num": "–ù–æ–º–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏", 
                "value": "–ó–Ω–∞—á–µ–Ω–∏–µ", 
                "variable": "–ú–µ—Ç—Ä–∏–∫–∞"
            },
            title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º"
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Å–µ–π
        fig.update_layout(
            xaxis_tickangle=0,  # –£–±–∏—Ä–∞–µ–º –Ω–∞–∫–ª–æ–Ω, —Ç.–∫. —á–∏—Å–ª–∞ –∫–æ–º–ø–∞–∫—Ç–Ω—ã
            yaxis_tickformat=".0%",
            legend_title="–ú–µ—Ç—Ä–∏–∫–∞"
        )
        
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ª–µ–≥–µ–Ω–¥—ã
        fig.for_each_trace(lambda t: t.update(name = {
            "success_rate": "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å",
            "first_try_success_rate": "–£—Å–ø–µ—Ö —Å 1-–π –ø–æ–ø—ã—Ç–∫–∏",
            "complaint_rate": "–ñ–∞–ª–æ–±—ã"
        }.get(t.name, t.name)))
        
        st.plotly_chart(fig, use_container_width=True)
    
    with tabs[1]:
        # –ì—Ä–∞—Ñ–∏–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∏ –∂–∞–ª–æ–±
        fig = px.scatter(
            df_gz,
            x="success_rate",
            y="complaint_rate",
            color="risk",
            size="total_attempts",
            hover_name="card_id",
            color_continuous_scale="RdYlGn_r",
            labels={
                "success_rate": "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å", 
                "complaint_rate": "–ü—Ä–æ—Ü–µ–Ω—Ç –∂–∞–ª–æ–±",
                "risk": "–†–∏—Å–∫"
            },
            title="–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∏ –∂–∞–ª–æ–±",
            hover_data={
                "card_id": True,
                "success_rate": ":.1%",
                "complaint_rate": ":.1%",
                "risk": ":.2f",
                "discrimination_avg": ":.2f",
                "card_type": True,
                "total_attempts": True
            }
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Å–µ–π
        fig.update_layout(
            xaxis_tickformat=".0%",
            yaxis_tickformat=".1%"
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    with tabs[2]:
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∫–∞—Ä—Ç–æ—á–µ–∫, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        if "card_type" in df_gz.columns and len(df_gz["card_type"].unique()) > 1:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø—É –∫–∞—Ä—Ç–æ—á–∫–∏
            card_type_stats = df_gz.groupby("card_type").agg(
                count=("card_id", "count"),
                risk=("risk", "mean"),
                success=("success_rate", "mean"),
                complaints=("complaint_rate", "mean")
            ).reset_index()
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç–æ–ª–±—á–∞—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É –¥–ª—è —Ç–∏–ø–æ–≤ –∫–∞—Ä—Ç–æ—á–µ–∫
            fig = px.bar(
                card_type_stats,
                x="card_type",
                y="count",
                color="risk",
                color_continuous_scale="RdYlGn_r",
                labels={
                    "card_type": "–¢–∏–ø –∫–∞—Ä—Ç–æ—á–∫–∏", 
                    "count": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", 
                    "risk": "–†–∏—Å–∫"
                },
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ —Ç–∏–ø–∞–º",
                hover_data=["success", "complaints"]
            )
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏
            fig.update_traces(
                hovertemplate="<b>%{x}</b><br>" +
                              "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: %{y}<br>" +
                              "–°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫: %{marker.color:.2f}<br>" +
                              "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: %{customdata[0]:.1%}<br>" +
                              "–ñ–∞–ª–æ–±—ã: %{customdata[1]:.1%}"
            )
            
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.info("–í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –∑–∞–¥–∞–Ω–∏–π –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞.")
    
    # 5. –¢–∞–±–ª–∏—Ü–∞ —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏
    st.subheader("üìã –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º")
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    cards_df = df_gz[["card_id", "card_type", "status", "success_rate", 
                      "first_try_success_rate", "complaint_rate", 
                      "discrimination_avg", "total_attempts", "risk"]]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –≤ —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
    cards_df = cards_df.sort_values("risk", ascending=False).reset_index(drop=True)
    cards_df["–ù–æ–º–µ—Ä"] = cards_df.index + 1
    
    # –ü–µ—Ä–µ–æ—Ä–≥–∞–Ω–∏–∑—É–µ–º –∫–æ–ª–æ–Ω–∫–∏, —á—Ç–æ–±—ã –Ω–æ–º–µ—Ä –±—ã–ª –≤ –Ω–∞—á–∞–ª–µ
    cards_df = cards_df[["–ù–æ–º–µ—Ä", "card_id", "card_type", "status", "success_rate", 
                         "first_try_success_rate", "complaint_rate", 
                         "discrimination_avg", "total_attempts", "risk"]]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∏, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã URL
    if "card_url" in df_gz.columns:
        cards_df_display = cards_df.copy()
        cards_df_display["–ö–∞—Ä—Ç–æ—á–∫–∞"] = df_gz.apply(
            lambda row: f"[ID:{int(row['card_id'])}]({row['card_url']})" if pd.notna(row['card_url']) else f"ID:{int(row['card_id'])}", 
            axis=1
        )
        
        # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–æ–ª–æ–Ω–æ–∫
        formatted_df = pd.DataFrame({
            "–ù–æ–º–µ—Ä": cards_df_display["–ù–æ–º–µ—Ä"],
            "–ö–∞—Ä—Ç–æ—á–∫–∞": cards_df_display["–ö–∞—Ä—Ç–æ—á–∫–∞"],
            "–¢–∏–ø": cards_df_display["card_type"],
            "–°—Ç–∞—Ç—É—Å": cards_df_display["status"],
            "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å": cards_df_display["success_rate"].apply(lambda x: f"{x:.1%}"),
            "–£—Å–ø–µ—Ö 1-–π": cards_df_display["first_try_success_rate"].apply(lambda x: f"{x:.1%}"),
            "–ñ–∞–ª–æ–±—ã": cards_df_display["complaint_rate"].apply(lambda x: f"{x:.1%}"),
            "–î–∏—Å–∫—Ä.": cards_df_display["discrimination_avg"].apply(lambda x: f"{x:.2f}"),
            "–ü–æ–ø—ã—Ç–∫–∏": cards_df_display["total_attempts"].apply(lambda x: f"{int(x)}"),
            "–†–∏—Å–∫": cards_df_display["risk"].apply(lambda x: f"{x:.2f}")
        })
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
        st.dataframe(formatted_df, hide_index=True, use_container_width=True)
    else:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É
        formatted_cards = cards_df.style.format({
            "success_rate": "{:.1%}",
            "first_try_success_rate": "{:.1%}",
            "complaint_rate": "{:.1%}",
            "discrimination_avg": "{:.2f}",
            "risk": "{:.2f}"
        }).background_gradient(
            subset=["risk"],
            cmap="RdYlGn_r"
        )
        
        st.dataframe(formatted_cards, use_container_width=True)
    
    # 6. –°–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
    st.subheader("üóÇÔ∏è –ö–∞—Ä—Ç–æ—á–∫–∏ –≥—Ä—É–ø–ø—ã –∑–∞–¥–∞–Ω–∏–π")
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –ø—Ä—è–º—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã URL
    if "card_url" in df_gz.columns:
        st.subheader("–°—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∏")
        
        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
        card_links = []
        for _, card in df_gz.iterrows():
            if pd.notna(card['card_url']):
                card_links.append({
                    "id": int(card['card_id']),
                    "type": card['card_type'],
                    "risk": card['risk'],
                    "url": card['card_url']
                })
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–ª–æ–Ω–æ–∫
        if card_links:
            columns = st.columns(3)
            links_per_col = (len(card_links) + 2) // 3  # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ
            
            for i, column in enumerate(columns):
                with column:
                    start_idx = i * links_per_col
                    end_idx = min((i + 1) * links_per_col, len(card_links))
                    
                    for link in card_links[start_idx:end_idx]:
                        risk_color = "red" if link["risk"] > 0.7 else ("orange" if link["risk"] > 0.5 else ("yellow" if link["risk"] > 0.3 else "green"))
                        st.markdown(f"[ID: {link['id']} ({link['type']})]({link['url']}) <span style='color:{risk_color};'>‚ñ†</span>", unsafe_allow_html=True)
    
    # –ï—Å–ª–∏ –Ω–µ—Ç URL, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç–æ —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫
    else:
        display_clickable_items(df_gz, "card_id", "card_id", metrics=["risk"])

def _page_gz_inline(df: pd.DataFrame):
    """–í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≥—Ä—É–ø–ø –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —É—Ä–æ–∫–∞"""
    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ, –º–æ–¥—É–ª—é –∏ —É—Ä–æ–∫—É
    df_lesson = core.apply_filters(df, ["program", "module", "lesson"])
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    if df_lesson.empty:
        lesson_name = st.session_state.get('filter_lesson') or '‚Äî'
        st.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É—Ä–æ–∫–∞ '{lesson_name}'")
        return
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.subheader("üß© –ì—Ä—É–ø–ø—ã –∑–∞–¥–∞–Ω–∏–π –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–∫–∞")
    
    # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≥—Ä—É–ø–ø–∞–º –∑–∞–¥–∞–Ω–∏–π
    agg = df_lesson.groupby("gz").agg(
        risk=("risk", "mean"),
        success=("success_rate", "mean"),
        complaints=("complaint_rate", "mean"),
        cards=("card_id", "nunique")
    ).reset_index()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é –¥–ª—è –≥—Ä—É–ø–ø –∑–∞–¥–∞–Ω–∏–π
    agg = agg.sort_values("risk", ascending=False).reset_index(drop=True)
    agg["gz_num"] = agg.index + 1
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    fig = px.bar(
        agg,
        x="gz_num",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –Ω—É–º–µ—Ä–∞—Ü–∏—é
        y="risk",
        color="risk",
        color_continuous_scale="RdYlGn_r",
        labels={"gz_num": "–ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –∑–∞–¥–∞–Ω–∏–π", "risk": "–†–∏—Å–∫"},
        title="–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º –∑–∞–¥–∞–Ω–∏–π",
        hover_data=["gz", "success", "complaints", "cards"]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π ID –≤ –ø–æ–¥—Å–∫–∞–∑–∫–µ
    )
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏
    fig.update_traces(
        hovertemplate="<b>%{customdata[0]}</b><br>" +
                      "–ù–æ–º–µ—Ä: %{x}<br>" +
                      "–†–∏—Å–∫: %{y:.2f}<br>" +
                      "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: %{customdata[1]:.1%}<br>" +
                      "–ñ–∞–ª–æ–±—ã: %{customdata[2]:.1%}<br>" +
                      "–ö–∞—Ä—Ç–æ—á–µ–∫: %{customdata[3]}"
    )
    
    fig.update_layout(
        xaxis_tickangle=0  # –£–±–∏—Ä–∞–µ–º –Ω–∞–∫–ª–æ–Ω, —Ç.–∫. —á–∏—Å–ª–∞ –∫–æ–º–ø–∞–∫—Ç–Ω—ã
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    # –¢–∞–±–ª–∏—Ü–∞ —Å –≥—Ä—É–ø–ø–∞–º–∏ –∑–∞–¥–∞–Ω–∏–π, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å –≥—Ä–∞—Ñ–∏–∫–æ–º
    table_df = agg[["gz_num", "gz", "risk", "success", "complaints", "cards"]]
    table_df.columns = ["–ù–æ–º–µ—Ä", "–ì—Ä—É–ø–ø–∞ –∑–∞–¥–∞–Ω–∏–π", "–†–∏—Å–∫", "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å", "–ñ–∞–ª–æ–±—ã", "–ö–∞—Ä—Ç–æ—á–µ–∫"]
    
    st.dataframe(
        table_df.style.format({
            "–†–∏—Å–∫": "{:.2f}",
            "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å": "{:.1%}",
            "–ñ–∞–ª–æ–±—ã": "{:.1%}"
        }),
        use_container_width=True
    )
    
    # –°–ø–∏—Å–æ–∫ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø –∑–∞–¥–∞–Ω–∏–π
    display_clickable_items(df_lesson, "gz", "gz", metrics=["cards", "risk"])