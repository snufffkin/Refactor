import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import plotly.express as px
import plotly.graph_objects as go

def page_refactor_planning(df: pd.DataFrame):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print("üîç –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞...")
    print(f"–¢–µ–∫—É—â–∞—è —Ä–æ–ª—å: {st.session_state.role}")
    print(f"–¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {st.session_state.get('current_page')}")
    
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø —É—Ä–æ–≤–Ω—è admin
    if st.session_state.role != "admin":
        st.error("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ. –ù–µ–æ–±—Ö–æ–¥–∏–º—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    st.title("üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ –∫—É—Ä—Å–æ–≤")
    
    st.markdown("""
    –ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—ã –º–æ–∂–µ—Ç–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤,
    —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–µ—Ç–æ–¥–∏—Å—Ç–æ–≤.
    """)
    
    # –°–Ω–∞—á–∞–ª–∞ –≤—ã–≤–µ–¥–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    print("–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤ –¥–∞–Ω–Ω—ã—Ö:")
    all_programs = df["program"].unique()
    for idx, program in enumerate(all_programs, 1):
        print(f"{idx}. {program}")
    
    # –¢–æ—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º
    required_programs = [
        "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏ –¥–ª—è 5 –∫–ª–∞—Å—Å–∞ 2024-2025. –ü—Ä–æ–≥—Ä–∞–º–º–∞ 1 —á–∞—Å –≤ –Ω–µ–¥–µ–ª—é",
        "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏ –¥–ª—è 11 –∫–ª–∞—Å—Å–∞ 2024-2025. –ü—Ä–æ–≥—Ä–∞–º–º–∞ 1 —á–∞—Å –≤ –Ω–µ–¥–µ–ª—é",
        "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏ –¥–ª—è 9 –∫–ª–∞—Å—Å–∞ 2024-2025. –ü—Ä–æ–≥—Ä–∞–º–º–∞ ¬´–î–≤–∞ —á–∞—Å–∞ –≤ –Ω–µ–¥–µ–ª—é¬ª. –§–ì–û–°",
        "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏ –¥–ª—è 10 –∫–ª–∞—Å—Å–∞ 2024-2025. –ü—Ä–æ–≥—Ä–∞–º–º–∞ 1 —á–∞—Å –≤ –Ω–µ–¥–µ–ª—é",
        "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏ –¥–ª—è 8 –∫–ª–∞—Å—Å–∞ 2024-2025. –ü—Ä–æ–≥—Ä–∞–º–º–∞ ¬´–û–¥–∏–Ω —á–∞—Å –≤ –Ω–µ–¥–µ–ª—é¬ª. –§–ì–û–°",
        "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏ –¥–ª—è 9 –∫–ª–∞—Å—Å–∞ 2024-2025. –ü—Ä–æ–≥—Ä–∞–º–º–∞ ¬´–û–¥–∏–Ω —á–∞—Å –≤ –Ω–µ–¥–µ–ª—é¬ª. –§–ì–û–°",
        "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏ –¥–ª—è 6 –∫–ª–∞—Å—Å–∞ 2024-2025. –ü—Ä–æ–≥—Ä–∞–º–º–∞ 1 —á–∞—Å –≤ –Ω–µ–¥–µ–ª—é",
        "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏ –¥–ª—è 8 –∫–ª–∞—Å—Å–∞ 2024-2025. –ü—Ä–æ–≥—Ä–∞–º–º–∞ ¬´–î–≤–∞ —á–∞—Å–∞ –≤ –Ω–µ–¥–µ–ª—é¬ª. –§–ì–û–°",
        "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏ –¥–ª—è 7 –∫–ª–∞—Å—Å–∞ 2024-2025. –ü—Ä–æ–≥—Ä–∞–º–º–∞ ¬´–û–¥–∏–Ω —á–∞—Å –≤ –Ω–µ–¥–µ–ª—é¬ª. –§–ì–û–°",
        "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏ –¥–ª—è 7 –∫–ª–∞—Å—Å–∞ 2024-2025. –ü—Ä–æ–≥—Ä–∞–º–º–∞ ¬´–î–≤–∞ —á–∞—Å–∞ –≤ –Ω–µ–¥–µ–ª—é¬ª. –§–ì–û–°"
    ]
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã 5 –∫–ª–∞—Å—Å–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
    program_5_class = "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏ –¥–ª—è 5 –∫–ª–∞—Å—Å–∞ 2024-2025. –ü—Ä–æ–≥—Ä–∞–º–º–∞ 1 —á–∞—Å –≤ –Ω–µ–¥–µ–ª—é"
    
    # –¢–æ—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É 5 –∫–ª–∞—Å—Å–∞
    if program_5_class not in required_programs:
        required_programs.append(program_5_class)
        print(f"–ü—Ä–æ–≥—Ä–∞–º–º–∞ {program_5_class} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–±—É–µ–º—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞ 5 –∫–ª–∞—Å—Å–∞ –≤ –¥–∞–Ω–Ω—ã—Ö
    if program_5_class not in all_programs:
        print(f"–í–Ω–∏–º–∞–Ω–∏–µ: –ü—Ä–æ–≥—Ä–∞–º–º–∞ {program_5_class} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        print(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã 5 –∫–ª–∞—Å—Å–∞...")
        
        # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        for program in all_programs:
            if "5 –∫–ª–∞—Å—Å–∞" in program and ("1 —á–∞—Å" in program or "–û–¥–∏–Ω —á–∞—Å" in program):
                print(f"–ù–∞–π–¥–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: {program}")
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                st.session_state.program_display_names = st.session_state.get("program_display_names", {})
                st.session_state.program_display_names[program] = program_5_class
    
    # –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–∫-–¥–∞–Ω–Ω—ã—Ö –¥–ª—è 5 –∫–ª–∞—Å—Å–∞, –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –≤–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç—Ä–µ–±—É–µ–º—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–±—É–µ–º–æ–≥–æ —Å–ø–∏—Å–∫–∞
    selected_programs = []
    
    # –î–ª—è –∫–∞–∂–¥–æ–π —Ç—Ä–µ–±—É–µ–º–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã –Ω–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –¥–∞–Ω–Ω—ã—Ö
    for required_program in required_programs:
        if required_program in all_programs:
            # –ï—Å–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞–π–¥–µ–Ω–∞ —Ç–æ—á–Ω–æ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ
            selected_programs.append(required_program)
            print(f"–ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞–π–¥–µ–Ω–∞ —Ç–æ—á–Ω–æ: {required_program}")
        else:
            # –ò—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
            class_match = None
            for program in all_programs:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞ –∏–∑ —Ç—Ä–µ–±—É–µ–º–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
                required_class = None
                for i in range(5, 12):  # –∫–ª–∞—Å—Å—ã —Å 5 –ø–æ 11
                    if f"{i} –∫–ª–∞—Å—Å–∞" in required_program:
                        required_class = str(i)
                        break
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø –ø—Ä–æ–≥—Ä–∞–º–º—ã (1 —á–∞—Å –∏–ª–∏ 2 —á–∞—Å–∞)
                required_hours = None
                if "¬´–û–¥–∏–Ω —á–∞—Å" in required_program or "1 —á–∞—Å" in required_program:
                    required_hours = "1 —á–∞—Å"
                elif "¬´–î–≤–∞ —á–∞—Å–∞" in required_program or "2 —á–∞—Å–∞" in required_program:
                    required_hours = "2 —á–∞—Å–∞"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∫–ª–∞—Å—Å—É –∏ —Ç–∏–ø—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
                if required_class and required_class in program:
                    if required_hours == "1 —á–∞—Å" and ("1 —á–∞—Å" in program or "¬´–û–¥–∏–Ω —á–∞—Å" in program):
                        class_match = program
                        break
                    elif required_hours == "2 —á–∞—Å–∞" and ("2 —á–∞—Å–∞" in program or "¬´–î–≤–∞ —á–∞—Å–∞" in program):
                        class_match = program
                        break
            
            if class_match:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                selected_programs.append(class_match)
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Å —Ç—Ä–µ–±—É–µ–º—ã–º
                st.session_state.program_display_names = st.session_state.get("program_display_names", {})
                st.session_state.program_display_names[class_match] = required_program
                print(f"–ù–∞–π–¥–µ–Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ '{class_match}' –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã '{required_program}'")
            else:
                # –ï—Å–ª–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É
                # (–¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–µ–µ —É–∂–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω—ã –≤—ã—à–µ)
                selected_programs.append(required_program)
                print(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –±–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã: {required_program}")
    
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    selected_programs = list(dict.fromkeys(selected_programs))
    
    print(f"\n–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º ({len(selected_programs)}):")
    for idx, program in enumerate(selected_programs, 1):
        print(f"{idx}. {program}")
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø—Ä–æ–≥—Ä–∞–º–º–∞–º
    filtered_df = df[df["program"].isin(selected_programs)]
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º actual_programs –¥–æ –ª—é–±—ã—Ö —É—Å–ª–æ–≤–Ω—ã—Ö –±–ª–æ–∫–æ–≤
    actual_programs = filtered_df["program"].unique()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å program_selections
    program_selections = {}
    for program in actual_programs:
        program_selections[program] = True
    
    # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö
    programs_without_data = []
    for program in selected_programs:
        program_data = filtered_df[filtered_df["program"] == program]
        if program_data.empty:
            programs_without_data.append(program)
    
    if programs_without_data:
        print(f"–í–ù–ò–ú–ê–ù–ò–ï: –ü—Ä–æ–≥—Ä–∞–º–º—ã –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö: {programs_without_data}")
        
        # –ò—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –∫–∞–∂–¥–æ–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–π
        for missing_program in programs_without_data:
            found_alternative = False
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞
            class_number = None
            for i in range(5, 12):  # –∫–ª–∞—Å—Å—ã —Å 5 –ø–æ 11
                if f"{i} –∫–ª–∞—Å—Å–∞" in missing_program:
                    class_number = str(i)
                    break
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Å–∞—Ö
            hours_info = None
            if "¬´–û–¥–∏–Ω —á–∞—Å" in missing_program or "1 —á–∞—Å" in missing_program:
                hours_info = "1 —á–∞—Å"
            elif "¬´–î–≤–∞ —á–∞—Å–∞" in missing_program or "2 —á–∞—Å–∞" in missing_program:
                hours_info = "2 —á–∞—Å–∞"
            
            print(f"–ò—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã {missing_program} (–∫–ª–∞—Å—Å: {class_number}, —á–∞—Å—ã: {hours_info})")
            
            # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤ –¥–∞–Ω–Ω—ã—Ö
            for program in df["program"].unique():
                if class_number and class_number in program:
                    if hours_info == "1 —á–∞—Å" and ("1 —á–∞—Å" in program or "¬´–û–¥–∏–Ω —á–∞—Å" in program):
                        print(f"–ù–∞—à–ª–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É: {program}")
                        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º
                        if program not in selected_programs:
                            selected_programs.append(program)
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
                        st.session_state.program_display_names = st.session_state.get("program_display_names", {})
                        st.session_state.program_display_names[program] = missing_program
                        found_alternative = True
                        break
                    elif hours_info == "2 —á–∞—Å–∞" and ("2 —á–∞—Å–∞" in program or "¬´–î–≤–∞ —á–∞—Å–∞" in program):
                        print(f"–ù–∞—à–ª–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É: {program}")
                        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º
                        if program not in selected_programs:
                            selected_programs.append(program)
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
                        st.session_state.program_display_names = st.session_state.get("program_display_names", {})
                        st.session_state.program_display_names[program] = missing_program
                        found_alternative = True
                        break
            
            if not found_alternative:
                print(f"–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –¥–ª—è {missing_program} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π DataFrame —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –ø—Ä–æ–≥—Ä–∞–º–º
        filtered_df = df[df["program"].isin(selected_programs)]
        # –û–±–Ω–æ–≤–ª—è–µ–º actual_programs
        actual_programs = filtered_df["program"].unique()
        print(f"–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º: {actual_programs}")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º –¥–ª—è selections –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–∫-–¥–∞–Ω–Ω—ã—Ö
    for program in actual_programs:
        if program not in program_selections:
            program_selections[program] = True
            print(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≤ selections: {program}")
    
    # –í—ã–≤–æ–¥ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    print(f"–†–∞–∑–º–µ—Ä –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ DataFrame: {filtered_df.shape}")
    print(f"–ö–æ–ª–æ–Ω–∫–∏ –≤ DataFrame: {filtered_df.columns}")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥—Ä–∞–º–º: {filtered_df['program'].nunique()}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –∏–º–µ—é—â–∏–µ—Å—è –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤ –¥–∞–Ω–Ω—ã—Ö –∏ –∏—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Å–ø–∏—Å–∫—É
    print(f"–§–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã: {actual_programs}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞ 5 –∫–ª–∞—Å—Å–∞ –≤ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    program_5_class = "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏ –¥–ª—è 5 –∫–ª–∞—Å—Å–∞ 2024-2025. –ü—Ä–æ–≥—Ä–∞–º–º–∞ 1 —á–∞—Å –≤ –Ω–µ–¥–µ–ª—é"
    if program_5_class in df["program"].unique() and program_5_class not in actual_programs:
        print(f"–ü—Ä–æ–≥—Ä–∞–º–º–∞ 5 –∫–ª–∞—Å—Å–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –Ω–æ –Ω–µ –≤ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö")
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É 5 –∫–ª–∞—Å—Å–∞ –≤ —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º, –µ—Å–ª–∏ –µ—ë —Ç–∞–º –Ω–µ—Ç
        if program_5_class not in selected_programs:
            selected_programs.append(program_5_class)
            print(f"–ü—Ä–æ–≥—Ä–∞–º–º–∞ {program_5_class} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º")
        
        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π DataFrame
        filtered_df = df[df["program"].isin(selected_programs)]
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º
        actual_programs = filtered_df["program"].unique()
        print(f"–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è 5 –∫–ª–∞—Å—Å–∞: {actual_programs}")

    missing_programs = set(selected_programs) - set(actual_programs)
    if missing_programs:
        print(f"–ü—Ä–æ–≥—Ä–∞–º–º—ã –∏–∑ —Å–ø–∏—Å–∫–∞, –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –≤ –¥–∞–Ω–Ω—ã—Ö: {missing_programs}")
        st.warning(f"–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–∞–Ω–Ω—ã—Ö: {', '.join(missing_programs)}")
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        st.info("–ü–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—á–µ—Ç–∞
    st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—á–µ—Ç–∞:")
    col1, col2 = st.columns([1, 1])
    
    with col1:
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–∞—Å–æ–≤ –¥–ª—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ –æ–¥–Ω–æ–≥–æ —É—Ä–æ–∫–∞
        hours_per_lesson = st.number_input(
            "–ß–∞—Å–æ–≤ –Ω–∞ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ —É—Ä–æ–∫–∞:",
            min_value=1,
            max_value=40,
            value=6,  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å 8 –Ω–∞ 6
            step=1,
            help="–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ –æ–¥–Ω–æ–≥–æ —É—Ä–æ–∫–∞"
        )
    
    with col2:
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–µ—Ç–æ–¥–∏—Å—Ç–æ–≤ —Å –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π
        methodists_count = st.number_input(
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ç–æ–¥–∏—Å—Ç–æ–≤:",
            min_value=1,
            max_value=50,
            value=2,  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å 5 –Ω–∞ 2
            step=1,
            help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ç–æ–¥–∏—Å—Ç–æ–≤ —Å –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π (8 —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å)"
        )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º
    st.subheader("–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞:")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º –∏ —Å–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    # program_selections = {}
    # for program in actual_programs:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –¥–∞–Ω–Ω—ã—Ö
    #     program_selections[program] = True
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å–æ–±—ã–π —Å–ª—É—á–∞–π –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã 5 –∫–ª–∞—Å—Å–∞
    program_5_class = "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏ –¥–ª—è 5 –∫–ª–∞—Å—Å–∞ 2024-2025. –ü—Ä–æ–≥—Ä–∞–º–º–∞ 1 —á–∞—Å –≤ –Ω–µ–¥–µ–ª—é"
    if program_5_class in selected_programs and program_5_class not in program_selections:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ program_5_class –≤ filtered_df –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–∫-–¥–∞–Ω–Ω—ã—Ö
        if program_5_class in filtered_df["program"].unique():
            program_selections[program_5_class] = True
            print(f"–ü—Ä–æ–≥—Ä–∞–º–º–∞ {program_5_class} –Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ selections")
        else:
            # –ù–∞—Ö–æ–¥–∏–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É –≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã 5 –∫–ª–∞—Å—Å–∞
            for program in all_programs:
                if "5 –∫–ª–∞—Å—Å–∞ 2024-2025" in program and "1 —á–∞—Å –≤ –Ω–µ–¥–µ–ª—é" in program:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –∫–∞–∫ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö, –Ω–æ —Å —Ç—Ä–µ–±—É–µ–º—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
                    program_selections[program] = True
                    # –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º —Å —Ç—Ä–µ–±—É–µ–º—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    st.session_state.program_display_names = st.session_state.get("program_display_names", {})
                    st.session_state.program_display_names[program] = program_5_class
                    print(f"–ù–∞–π–¥–µ–Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ {program} –¥–ª—è {program_5_class}")
                    break
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π –∏ —É—Ä–æ–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –º–æ–¥—É–ª–µ–π –∏ —É—Ä–æ–∫–æ–≤
    if "module_selections" not in st.session_state:
        st.session_state.module_selections = {}
    if "lesson_selections" not in st.session_state:
        st.session_state.lesson_selections = {}
    
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º —Å –Ω—É–∂–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
    if "program_display_names" not in st.session_state:
        st.session_state.program_display_names = {}
    
    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö
    for program in actual_programs:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
        if program in st.session_state.program_display_names:
            display_name = st.session_state.program_display_names[program]
        else:
            # –û–±—ã—á–Ω–æ–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
            display_name = program
            if "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏ –¥–ª—è " in program:
                display_name = program.replace("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏ –¥–ª—è ", "").replace(". –ü—Ä–æ–≥—Ä–∞–º–º–∞ ", ": ")
        
        with st.expander(f"‚úÖ {display_name}", expanded=False):
            st.write(f"–ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {program}")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
            program_df = filtered_df[filtered_df["program"] == program]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥—É–ª–µ–π
            if program_df.empty:
                st.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã: {program}")
                continue
                
            try:
                # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏
                modules = program_df["module"].unique()
                
                if len(modules) == 0:
                    st.warning("–ù–µ—Ç –º–æ–¥—É–ª–µ–π –¥–ª—è —ç—Ç–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã")
                    continue
                    
                st.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥—É–ª–µ–π: {len(modules)}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥—É–ª–∏ —Å —á–µ–∫–±–æ–∫—Å–∞–º–∏
                st.markdown("#### –ú–æ–¥—É–ª–∏:")
                
                for module in modules:
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–¥—É–ª—è, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
                    module_key = f"{program}_{module}"
                    if module_key not in st.session_state.module_selections:
                        st.session_state.module_selections[module_key] = True
                    
                    # –°–æ–∑–¥–∞–µ–º —á–µ–∫–±–æ–∫—Å –¥–ª—è –º–æ–¥—É–ª—è
                    col1, col2 = st.columns([8, 1])
                    with col1:
                        module_selected = st.checkbox(
                            f"{module}", 
                            value=st.session_state.module_selections[module_key],
                            key=f"module_{module_key}"
                        )
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Å–µ—Å—Å–∏–∏
                    st.session_state.module_selections[module_key] = module_selected
                    
                    # –ï—Å–ª–∏ –º–æ–¥—É–ª—å –≤—ã–±—Ä–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Ä–æ–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
                    if module_selected:
                        # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–æ–¥—É–ª—è
                        module_df = program_df[program_df["module"] == module]
                        lessons = module_df["lesson"].unique()
                        
                        if len(lessons) == 0:
                            st.warning(f"–ù–µ—Ç —É—Ä–æ–∫–æ–≤ –¥–ª—è –º–æ–¥—É–ª—è: {module}")
                            continue
                            
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–∫–æ–≤
                        st.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–∫–æ–≤: {len(lessons)}")
                        
                        # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Ä–∞–∑–º–µ—Ç–∫–∏
                        col_left, col_right = st.columns([1, 8])
                        
                        with col_right:
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —É—Ä–æ–∫–æ–≤
                            st.markdown("##### –£—Ä–æ–∫–∏:")
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Ä–æ–∫–∏ —Å –æ—Ç—Å—Ç—É–ø–æ–º
                            for lesson in lessons:
                                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Ä–æ–∫–∞, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
                                lesson_key = f"{program}_{module}_{lesson}"
                                if lesson_key not in st.session_state.lesson_selections:
                                    st.session_state.lesson_selections[lesson_key] = True
                                
                                # –°–æ–∑–¥–∞–µ–º —á–µ–∫–±–æ–∫—Å –¥–ª—è —É—Ä–æ–∫–∞ —Å –æ—Ç—Å—Ç—É–ø–æ–º
                                lesson_selected = st.checkbox(
                                    f"üìù {lesson}", 
                                    value=st.session_state.lesson_selections[lesson_key],
                                    key=f"lesson_{lesson_key}"
                                )
                                
                                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Å–µ—Å—Å–∏–∏
                                st.session_state.lesson_selections[lesson_key] = lesson_selected
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–æ–¥—É–ª–µ–π –∏ —É—Ä–æ–∫–æ–≤: {str(e)}")
                import traceback
                st.code(traceback.format_exc())
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
    calculate_button = st.button("üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å", type="primary")
    
    # –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ 2025 –≥–æ–¥
    # –ö—Ä–∞—Å–Ω—ã–µ –¥–∞—Ç—ã (–≤—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏) –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    holidays_2025 = [
        # –Ø–Ω–≤–∞—Ä—å
        "2025-01-01", "2025-01-02", "2025-01-03", "2025-01-04", "2025-01-05",
        "2025-01-11", "2025-01-12", "2025-01-18", "2025-01-19", "2025-01-25", "2025-01-26",
        # –§–µ–≤—Ä–∞–ª—å
        "2025-02-01", "2025-02-02", "2025-02-08", "2025-02-09", "2025-02-15", "2025-02-16", 
        "2025-02-22", "2025-02-23",
        # –ú–∞—Ä—Ç
        "2025-03-01", "2025-03-02", "2025-03-08", "2025-03-09", "2025-03-15", "2025-03-16", 
        "2025-03-22", "2025-03-23", "2025-03-29", "2025-03-30",
        # –ê–ø—Ä–µ–ª—å
        "2025-04-05", "2025-04-06", "2025-04-12", "2025-04-13", "2025-04-19", "2025-04-20", 
        "2025-04-26", "2025-04-27",
        # –ú–∞–π
        "2025-05-01", "2025-05-02", "2025-05-03", "2025-05-04", "2025-05-09", "2025-05-10", 
        "2025-05-11", "2025-05-17", "2025-05-18", "2025-05-24", "2025-05-25", "2025-05-31",
        # –ò—é–Ω—å
        "2025-06-01", "2025-06-07", "2025-06-08", "2025-06-12", "2025-06-14", "2025-06-15", 
        "2025-06-21", "2025-06-22", "2025-06-28", "2025-06-29",
        # –ò—é–ª—å
        "2025-07-05", "2025-07-06", "2025-07-12", "2025-07-13", "2025-07-19", "2025-07-20", 
        "2025-07-26", "2025-07-27",
        # –ê–≤–≥—É—Å—Ç
        "2025-08-02", "2025-08-03", "2025-08-09", "2025-08-10", "2025-08-16", "2025-08-17", 
        "2025-08-23", "2025-08-24", "2025-08-30", "2025-08-31",
        # –°–µ–Ω—Ç—è–±—Ä—å
        "2025-09-06", "2025-09-07", "2025-09-13", "2025-09-14", "2025-09-20", "2025-09-21", 
        "2025-09-27", "2025-09-28",
        # –û–∫—Ç—è–±—Ä—å
        "2025-10-04", "2025-10-05", "2025-10-11", "2025-10-12", "2025-10-18", "2025-10-19", 
        "2025-10-25", "2025-10-26",
        # –ù–æ—è–±—Ä—å
        "2025-11-01", "2025-11-02", "2025-11-03", "2025-11-04", "2025-11-08", "2025-11-09", 
        "2025-11-15", "2025-11-16", "2025-11-22", "2025-11-23", "2025-11-29", "2025-11-30",
        # –î–µ–∫–∞–±—Ä—å
        "2025-12-06", "2025-12-07", "2025-12-13", "2025-12-14", "2025-12-20", "2025-12-21", 
        "2025-12-27", "2025-12-28", "2025-12-31"
    ]
    
    # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Ä–∞—Å—á–µ—Ç–∞
    if calculate_button:
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤
        selected_lessons_data = []
        
        # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –º–æ–¥—É–ª–∏ –∏ —É—Ä–æ–∫–∏
        for program in selected_programs:
            program_df = filtered_df[filtered_df["program"] == program]
            modules = program_df["module"].unique()
            
            for module in modules:
                module_key = f"{program}_{module}"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ –º–æ–¥—É–ª—å
                if module_key in st.session_state.module_selections and st.session_state.module_selections[module_key]:
                    module_df = program_df[program_df["module"] == module]
                    lessons = module_df["lesson"].unique()
                    
                    for lesson in lessons:
                        lesson_key = f"{program}_{module}_{lesson}"
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ —É—Ä–æ–∫
                        if lesson_key in st.session_state.lesson_selections and st.session_state.lesson_selections[lesson_key]:
                            # –î–æ–±–∞–≤–ª—è–µ–º —É—Ä–æ–∫ –≤ —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
                            selected_lessons_data.append({
                                'program': program,
                                'module': module,
                                'lesson': lesson
                            })
        
        # –°–æ–∑–¥–∞–µ–º DataFrame –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤
        if selected_lessons_data:
            selected_lessons_df = pd.DataFrame(selected_lessons_data)
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —É—Ä–æ–∫–æ–≤
            lessons_per_program = selected_lessons_df.groupby('program')['lesson'].nunique().reset_index()
            lessons_per_program.columns = ['–ü—Ä–æ–≥—Ä–∞–º–º–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–∫–æ–≤']
            total_lessons = lessons_per_program['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–∫–æ–≤'].sum()
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –≤ —á–∞—Å–∞—Ö
            total_hours = total_lessons * hours_per_lesson
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π —Å —É—á–µ—Ç–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–µ—Ç–æ–¥–∏—Å—Ç–æ–≤
            hours_per_day = 8 * methodists_count  # 8 —á–∞—Å–æ–≤ * –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ç–æ–¥–∏—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å
            total_workdays = (total_hours + hours_per_day - 1) // hours_per_day  # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–Ω–µ–π
            start_date = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
            current_date = start_date
            workdays_count = 0
            
            while workdays_count < total_workdays:
                current_date += timedelta(days=1)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å —Ä–∞–±–æ—á–∏–º
                if current_date.strftime('%Y-%m-%d') not in holidays_2025:
                    workdays_count += 1
            
            end_date = current_date
            days_difference = (end_date - start_date).days
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞
            st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞:")
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
            metric_col1, metric_col2, metric_col3 = st.columns(3)
            
            with metric_col1:
                st.metric("–í—Å–µ–≥–æ —É—Ä–æ–∫–æ–≤", f"{total_lessons}")
                
            with metric_col2:
                st.metric("–û–±—â–µ–µ –≤—Ä–µ–º—è", f"{total_hours} —á–∞—Å–æ–≤")
                
            with metric_col3:
                st.metric("–†–∞–±–æ—á–∏—Ö –¥–Ω–µ–π", f"{total_workdays}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –¥–∞—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            st.markdown(f"### –û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–∞—è –¥–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:")
            
            date_col1, date_col2 = st.columns(2)
            
            with date_col1:
                st.success(f"üìÖ **{end_date.strftime('%d.%m.%Y')}**")
                st.info(f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {days_difference} –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö –¥–Ω–µ–π")
                
            with date_col2:
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω—é—é –∑–∞–≥—Ä—É–∑–∫—É –º–µ—Ç–æ–¥–∏—Å—Ç–æ–≤ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
                avg_load_percent = min(100, round((total_hours / (workdays_count * 8 * methodists_count)) * 100))
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–µ—Ç–æ–¥–∏—Å—Ç–æ–≤
                st.progress(avg_load_percent / 100, text=f"–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç–æ–¥–∏—Å—Ç–æ–≤: {avg_load_percent}%")
                
                if avg_load_percent < 75:
                    st.success("‚úÖ –ú–æ–∂–Ω–æ –≤–∑—è—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏")
                elif avg_load_percent < 90:
                    st.info("‚ÑπÔ∏è –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞")
                else:
                    st.warning("‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞")
            
            # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º
            st.subheader("–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º:")
            
            for program, num_lessons in lessons_per_program.itertuples(index=False):
                program_hours = num_lessons * hours_per_lesson
                program_days = (program_hours + hours_per_day - 1) // hours_per_day
                
                st.markdown(f"**{program}**: {num_lessons} —É—Ä–æ–∫–æ–≤ ‚Üí {program_hours} —á–∞—Å–æ–≤ ‚Üí {program_days} –¥–Ω–µ–π")
            
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º
            fig = px.pie(
                lessons_per_program,
                values='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–∫–æ–≤',
                names='–ü—Ä–æ–≥—Ä–∞–º–º–∞',
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–∫–æ–≤ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º",
                color_discrete_sequence=px.colors.qualitative.Pastel
            )
            st.plotly_chart(fig, use_container_width=True)
            
            # –ì—Ä–∞—Ñ–∏–∫ –ì–∞–Ω—Ç–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞–±–æ—Ç
            gantt_data = []
            current_date = start_date
            
            for i, (program, num_lessons) in enumerate(lessons_per_program.itertuples(index=False)):
                program_hours = num_lessons * hours_per_lesson
                program_days = (program_hours + hours_per_day - 1) // hours_per_day
                
                program_start_date = current_date
                program_end_date = program_start_date
                workdays_count = 0
                
                while workdays_count < program_days:
                    program_end_date += timedelta(days=1)
                    if program_end_date.strftime('%Y-%m-%d') not in holidays_2025:
                        workdays_count += 1
                
                gantt_data.append({
                    '–ü—Ä–æ–≥—Ä–∞–º–º–∞': program,
                    '–ù–∞—á–∞–ª–æ': program_start_date,
                    '–û–∫–æ–Ω—á–∞–Ω–∏–µ': program_end_date,
                    '–£—Ä–æ–∫–æ–≤': num_lessons
                })
                
                current_date = program_end_date
            
            gantt_df = pd.DataFrame(gantt_data)
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –ì–∞–Ω—Ç–∞
            fig_gantt = px.timeline(
                gantt_df, 
                x_start='–ù–∞—á–∞–ª–æ', 
                x_end='–û–∫–æ–Ω—á–∞–Ω–∏–µ', 
                y='–ü—Ä–æ–≥—Ä–∞–º–º–∞',
                color='–ü—Ä–æ–≥—Ä–∞–º–º–∞',
                title="–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç –ø–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥—É",
                hover_data=['–£—Ä–æ–∫–æ–≤']
            )
            
            fig_gantt.update_yaxes(autorange="reversed")
            st.plotly_chart(fig_gantt, use_container_width=True)
            
            # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞—Å—á–µ—Ç–æ–≤
            st.info("""
            ‚ÑπÔ∏è **–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ**: –†–∞—Å—á–µ—Ç—ã —è–≤–ª—è—é—Ç—Å—è –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∏ –º–æ–≥—É—Ç –≤–∞—Ä—å–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç 
            —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —É—Ä–æ–∫–æ–≤, –æ–ø—ã—Ç–∞ –º–µ—Ç–æ–¥–∏—Å—Ç–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤.
            """)
        else:
            st.error("–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —É—Ä–æ–∫–∞ –¥–ª—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —É—Ä–æ–∫.") 