# pages/lessons.py —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
"""
–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Ä–æ–∫–∞ (–û–±–∑–æ—Ä + –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≥—Ä—É–ø–ø–∞–º –∑–∞–¥–∞–Ω–∏–π)
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import numpy as np

import core
from components.utils import create_hierarchical_header, display_clickable_items
from components.metrics import display_metrics_row, display_status_chart, display_risk_distribution
from components.charts import display_risk_bar_chart, display_metrics_comparison, display_success_complaints_chart, display_completion_radar
import navigation_utils

def page_lessons(df: pd.DataFrame):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Ä–æ–∫–∞ —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π –ø–æ –≥—Ä—É–ø–ø–∞–º –∑–∞–¥–∞–Ω–∏–π"""
    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ, –º–æ–¥—É–ª—é –∏ —É—Ä–æ–∫—É
    df_lesson = core.apply_filters(df, ["program", "module", "lesson"])
    program_filter = st.session_state.get('filter_program')
    module_filter = st.session_state.get('filter_module')
    lesson_filter = st.session_state.get('filter_lesson')
    
    # –°–æ–∑–¥–∞–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    create_hierarchical_header(
        levels=["program", "module", "lesson"],
        values=[program_filter, module_filter, lesson_filter]
    )
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    if df_lesson.empty:
        st.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É—Ä–æ–∫–∞ '{lesson_filter}' –≤ –º–æ–¥—É–ª–µ '{module_filter}'")
        return
    
    # 1. –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ —É—Ä–æ–∫–∞
    st.subheader("üìà –ú–µ—Ç—Ä–∏–∫–∏ —É—Ä–æ–∫–∞")
    display_metrics_row(df_lesson, compare_with=df)
    
    # 2. –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞ –∏ —Å—Ç–∞—Ç—É—Å—ã
    col1, col2 = st.columns(2)
    
    with col1:
        display_risk_distribution(df_lesson, "gz")
    
    with col2:
        display_status_chart(df_lesson, "gz")
    
    # 3. –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—ã –∑–∞–¥–∞–Ω–∏–π –≤ –≤–∏–¥–µ —Å—Ç–æ–ª–±—á–∞—Ç–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
    st.subheader("üìä –ì—Ä—É–ø–ø—ã –∑–∞–¥–∞–Ω–∏–π")
    
    # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≥—Ä—É–ø–ø–∞–º –∑–∞–¥–∞–Ω–∏–π
    agg = df_lesson.groupby("gz").agg(
        risk=("risk", "mean"),
        success=("success_rate", "mean"),
        complaints=("complaint_rate", "mean"),
        discrimination=("discrimination_avg", "mean"),
        cards=("card_id", "nunique")
    ).reset_index()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –Ω—É–º–µ—Ä–∞—Ü–∏—é –¥–ª—è –≥—Ä—É–ø–ø –∑–∞–¥–∞–Ω–∏–π
    agg = agg.sort_values("risk", ascending=False).reset_index(drop=True)
    agg["gz_num"] = agg.index + 1  # –ù—É–º–µ—Ä–∞—Ü–∏—è —Å 1
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç–æ–ª–±—á–∞—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É —Ä–∏—Å–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º –∑–∞–¥–∞–Ω–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–æ—Ä—è–¥–∫–æ–≤—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
    fig = px.bar(
        agg,
        x="gz_num",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –Ω—É–º–µ—Ä–∞—Ü–∏—é –≤–º–µ—Å—Ç–æ ID
        y="risk",
        color="risk",
        color_continuous_scale="RdYlGn_r",
        labels={"gz_num": "–ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –∑–∞–¥–∞–Ω–∏–π", "risk": "–†–∏—Å–∫"},
        title="–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º –∑–∞–¥–∞–Ω–∏–π",
        hover_data=["gz", "success", "complaints", "discrimination", "cards"]  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π ID –≤ –ø–æ–¥—Å–∫–∞–∑–∫—É
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –¥–ª—è –≥—Ä–∞–Ω–∏—Ü –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∏—Å–∫–∞
    fig.add_hline(y=0.3, line_dash="dash", line_color="green", 
                  annotation_text="–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫", annotation_position="left")
    fig.add_hline(y=0.5, line_dash="dash", line_color="gold", 
                  annotation_text="–°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫", annotation_position="left")
    fig.add_hline(y=0.7, line_dash="dash", line_color="red", 
                  annotation_text="–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫", annotation_position="left")
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏
    fig.update_traces(
        hovertemplate="<b>–ì–ó: %{customdata[0]}</b><br>" +
                      "–ù–æ–º–µ—Ä: %{x}<br>" +
                      "–†–∏—Å–∫: %{y:.2f}<br>" +
                      "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: %{customdata[1]:.1%}<br>" +
                      "–ñ–∞–ª–æ–±—ã: %{customdata[2]:.1%}<br>" +
                      "–î–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç—å: %{customdata[3]:.2f}<br>" +
                      "–ö–∞—Ä—Ç–æ—á–µ–∫: %{customdata[4]}"
    )
    
    fig.update_layout(
        xaxis_title="–ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –∑–∞–¥–∞–Ω–∏–π",
        yaxis_title="–†–∏—Å–∫",
        xaxis_tickangle=0  # –£–±–∏—Ä–∞–µ–º –Ω–∞–∫–ª–æ–Ω, —Ç.–∫. —á–∏—Å–ª–∞ –∫–æ–º–ø–∞–∫—Ç–Ω—ã
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    # 4. –î–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø –∑–∞–¥–∞–Ω–∏–π
    st.subheader("üìä –î–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø –∑–∞–¥–∞–Ω–∏–π")
    
    # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π
    tabs = st.tabs(["–ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏", "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∏ –∂–∞–ª–æ–±—ã", "–†–∞–¥–∞—Ä–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞"])
    
    with tabs[0]:
        # –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–µ—Ç—Ä–∏–∫ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é –≤–º–µ—Å—Ç–æ ID
        agg_metrics = df_lesson.groupby("gz").agg(
            success_rate=("success_rate", "mean"),
            complaint_rate=("complaint_rate", "mean"),
            discrimination_avg=("discrimination_avg", "mean"),
            risk=("risk", "mean")
        ).reset_index()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –Ω—É–º–µ—Ä–∞—Ü–∏—é –¥–ª—è –≥—Ä—É–ø–ø –∑–∞–¥–∞–Ω–∏–π
        agg_metrics = agg_metrics.sort_values("risk", ascending=False).reset_index(drop=True)
        agg_metrics["gz_num"] = agg_metrics.index + 1
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        agg_metrics = agg_metrics.head(15)
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Ñ–æ—Ä–º–∞—Ç "–¥–ª–∏–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö" –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        melted_df = pd.melt(
            agg_metrics, 
            id_vars=["gz", "gz_num"],
            value_vars=["success_rate", "complaint_rate", "discrimination_avg", "risk"],
            var_name="metric", 
            value_name="value"
        )
        
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        metric_names = {
            "success_rate": "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å",
            "complaint_rate": "–ñ–∞–ª–æ–±—ã",
            "discrimination_avg": "–î–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç—å",
            "risk": "–†–∏—Å–∫"
        }
        melted_df["metric_name"] = melted_df["metric"].map(metric_names)
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
        fig_metrics = px.bar(
            melted_df,
            x="gz_num",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—è–¥–∫–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞ –≤–º–µ—Å—Ç–æ ID
            y="value",
            color="metric_name",
            barmode="group",
            hover_data=["gz"],  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π ID –≤ –ø–æ–¥—Å–∫–∞–∑–∫–µ
            labels={
                "gz_num": "–ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –∑–∞–¥–∞–Ω–∏–π",
                "value": "–ó–Ω–∞—á–µ–Ω–∏–µ",
                "metric_name": "–ú–µ—Ç—Ä–∏–∫–∞"
            },
            title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ –ø–æ –≥—Ä—É–ø–ø–∞–º –∑–∞–¥–∞–Ω–∏–π"
        )
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –æ—Å–∏ Y –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–µ—Ç—Ä–∏–∫–∏
        fig_metrics.update_layout(
            yaxis_tickformat=".1%",
            xaxis_tickangle=0  # –£–±–∏—Ä–∞–µ–º –Ω–∞–∫–ª–æ–Ω, —Ç.–∫. —á–∏—Å–ª–∞ –∫–æ–º–ø–∞–∫—Ç–Ω—ã
        )
        
        st.plotly_chart(fig_metrics, use_container_width=True)
    
    with tabs[1]:
        # –ì—Ä–∞—Ñ–∏–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∏ –∂–∞–ª–æ–±
        display_success_complaints_chart(df_lesson, "gz", limit=20)
    
    with tabs[2]:
        # –†–∞–¥–∞—Ä–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –¥–ª—è —Ç–æ–ø-5 –≥—Ä—É–ø–ø –∑–∞–¥–∞–Ω–∏–π —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º
        display_completion_radar(df_lesson, "gz", limit=5)
    
    # 5. –¢–∞–±–ª–∏—Ü–∞ —Å –≥—Ä—É–ø–ø–∞–º–∏ –∑–∞–¥–∞–Ω–∏–π
    st.subheader("üìã –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –≥—Ä—É–ø–ø–∞–º –∑–∞–¥–∞–Ω–∏–π")
    
    # –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å –≥—Ä—É–ø–ø–∞–º–∏ –∑–∞–¥–∞–Ω–∏–π, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å –≥—Ä–∞—Ñ–∏–∫–æ–º
    detailed_df = agg[["gz_num", "gz", "risk", "success", "complaints", "discrimination", "cards"]]
    detailed_df.columns = ["–ù–æ–º–µ—Ä", "–ì—Ä—É–ø–ø–∞ –∑–∞–¥–∞–Ω–∏–π", "–†–∏—Å–∫", "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å", "–ñ–∞–ª–æ–±—ã", "–î–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç—å", "–ö–∞—Ä—Ç–æ—á–µ–∫"]
    
    st.dataframe(
        detailed_df.style.format({
            "–†–∏—Å–∫": "{:.2f}",
            "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å": "{:.1%}",
            "–ñ–∞–ª–æ–±—ã": "{:.1%}",
            "–î–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç—å": "{:.2f}"
        }).background_gradient(
            subset=["–†–∏—Å–∫"],
            cmap="RdYlGn_r"
        ),
        use_container_width=True
    )
    
    # 6. –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –∑–∞–¥–∞–Ω–∏–π —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
    st.subheader("üß© –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –∑–∞–¥–∞–Ω–∏–π")
    display_clickable_items(df_lesson, "gz", "gz", metrics=["cards", "risk", "success"])
    
    # 7. –ï—Å–ª–∏ —É—Ä–æ–∫ –≤—ã–±—Ä–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ì–ó
    if st.session_state.get("filter_lesson"):
        from .gz import _page_gz_inline
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        st.markdown("---")
        _page_gz_inline(df)
    # –£–ª—É—á—à–µ–Ω–Ω—ã–π –±–ª–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤ —É—á–∏—Ç–µ–ª–µ–π –≤ 4 –∫–æ–ª–æ–Ω–∫–∏
    st.subheader("üìù –û—Ç–∑—ã–≤—ã —É—á–∏—Ç–µ–ª–µ–π")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç–∑—ã–≤—ã –∏–∑ –ë–î
    engine = core.get_engine()
    query = f"SELECT * FROM teacher_reviews WHERE program = '{program_filter}' AND module = '{module_filter}' AND lesson = '{lesson_filter}'"
    df_reviews = pd.read_sql(query, engine)

    if df_reviews.empty:
        st.info("–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ —É—á–∏—Ç–µ–ª–µ–π –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞")
    else:
        row = df_reviews.iloc[0]
        
        # –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏ –≤ –≤–∏–¥–µ –Ω–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ Streamlit
        st.markdown("### –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ —Ç—Ä–∏ –∫–æ–ª–æ–Ω–∫–∏
        col1, col2, col3 = st.columns(3)
        
        with col1:
            # –ü—Ä–æ—Å—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –±–µ–∑ –¥–µ–ª—å—Ç—ã
            st.metric("–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞", f"{row['overall_stat']:.1f}")
        
        with col2:
            st.metric("–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ—Å—Ç—å", f"{row['interest_stat']:.1f}")
        
        with col3:
            # –î–ª—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (3.0)
            delta = 3.0 - row["complexity_stat"]
            # –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –∏–¥–µ–∞–ª—å–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π –¥–µ–ª—å—Ç–æ–π, –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω–æ,
            # –∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π, –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç–æ
            delta_text = f"{delta:.1f}"
            # –ï—Å–ª–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –±–ª–∏–∑–∫–∞ –∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π (2.5-3.5), –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–ª—å—Ç—É
            if 2.5 <= row["complexity_stat"] <= 3.5:
                st.metric("–°–ª–æ–∂–Ω–æ—Å—Ç—å", f"{row['complexity_stat']:.1f}")
            else:
                st.metric("–°–ª–æ–∂–Ω–æ—Å—Ç—å", f"{row['complexity_stat']:.1f}", delta_text, delta_color="inverse")
        
        # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ—Ç—Ä–∏–∫
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è", f"{row['presentation_rate']:.1f}")
        
        with col2:
            st.metric("–†–∞–±–æ—á–∞—è —Ç–µ—Ç—Ä–∞–¥—å", f"{row['workbook_rate']:.1f}")
        
        with col3:
            st.metric("–î–æ–ø. –º–∞—Ç–µ—Ä–∏–∞–ª—ã", f"{row['addmaterial_rate']:.1f}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–¥–∞—Ä–Ω—É—é –¥–∏–∞–≥—Ä–∞–º–º—É –¥–ª—è –æ–±—â–µ–≥–æ –æ–±–∑–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫
        st.markdown("### –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫")
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞–¥–∞—Ä–Ω—É—é –¥–∏–∞–≥—Ä–∞–º–º—É –¥–ª—è –º–µ—Ç—Ä–∏–∫
        radar_data = pd.DataFrame({
            '–ú–µ—Ç—Ä–∏–∫–∞': ['–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞', '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ—Å—Ç—å', '–†–∞–±–æ—á–∞—è —Ç–µ—Ç—Ä–∞–¥—å', '–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è', '–î–æ–ø. –º–∞—Ç–µ—Ä–∏–∞–ª—ã'],
            '–ó–Ω–∞—á–µ–Ω–∏–µ': [row["overall_stat"], row["interest_stat"], row["workbook_rate"], 
                        row["presentation_rate"], row["addmaterial_rate"]]
        })
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–∞–¥–∞—Ä–Ω—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
        fig = go.Figure()
        fig.add_trace(go.Scatterpolar(
            r=radar_data['–ó–Ω–∞—á–µ–Ω–∏–µ'],
            theta=radar_data['–ú–µ—Ç—Ä–∏–∫–∞'],
            fill='toself',
            name='–û—Ü–µ–Ω–∫–∏',
            line_color='rgb(77, 166, 255)'
        ))
        
        fig.update_layout(
            polar=dict(
                radialaxis=dict(
                    visible=True,
                    range=[0, 5]
                )
            ),
            title="–†–∞–¥–∞—Ä –æ—Ü–µ–Ω–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤",
            height=400
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –æ—Ç–∑—ã–≤–∞
        def create_review_card(text, is_positive=True):
            bg_color = "rgba(47, 120, 80, 0.1)" if is_positive else "rgba(180, 60, 60, 0.1)"
            border_color = "rgba(47, 120, 80, 0.5)" if is_positive else "rgba(180, 60, 60, 0.5)"
            
            return f"""
            <div style="
                background-color: {bg_color};
                border: 1px solid {border_color};
                border-radius: 4px;
                padding: 8px;
                margin-bottom: 8px;
                font-size: 0.9em;
            ">
                {text}
            </div>
            """
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤ –≤ 2 –∫–æ–ª–æ–Ω–∫–∏ –≤–Ω—É—Ç—Ä–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–ª–æ–Ω–∫–∏
        def display_reviews_in_subcols(reviews, is_positive=True):
            if pd.isna(reviews) or reviews == '':
                st.info("–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤")
                return
            
            # –†–∞–∑–¥–µ–ª—è–µ–º –æ—Ç–∑—ã–≤—ã –ø–æ –ø–µ—Ä–µ–Ω–æ—Å—É —Å—Ç—Ä–æ–∫–∏ –∏ —É–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            items = [item.strip() for item in reviews.split('\n') if item.strip()]
            if not items:
                st.info("–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤")
                return
            
            # –†–∞–∑–¥–µ–ª—è–µ–º –æ—Ç–∑—ã–≤—ã –Ω–∞ –¥–≤–µ –ø–æ–¥–∫–æ–ª–æ–Ω–∫–∏
            subcol1, subcol2 = st.columns(2)
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–∑—ã–≤—ã –ø–æ—Ä–æ–≤–Ω—É –º–µ–∂–¥—É –ø–æ–¥–∫–æ–ª–æ–Ω–∫–∞–º–∏
            half = len(items) // 2 + (1 if len(items) % 2 != 0 else 0)
            
            # –ü–µ—Ä–≤–∞—è –ø–æ–¥–∫–æ–ª–æ–Ω–∫–∞
            with subcol1:
                for i in range(half):
                    st.markdown(create_review_card(items[i], is_positive), unsafe_allow_html=True)
            
            # –í—Ç–æ—Ä–∞—è –ø–æ–¥–∫–æ–ª–æ–Ω–∫–∞
            with subcol2:
                for i in range(half, len(items)):
                    st.markdown(create_review_card(items[i], is_positive), unsafe_allow_html=True)
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã –≤ –≤–∏–¥–µ –≤–∫–ª–∞–¥–æ–∫
        st.markdown("### –î–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç–∑—ã–≤—ã —É—á–∏—Ç–µ–ª–µ–π")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∫–ª–∞–¥–æ–∫
        tabs = st.tabs(["–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è", "–†–∞–±–æ—á–∞—è —Ç–µ—Ç—Ä–∞–¥—å", "–î–æ–ø. –º–∞—Ç–µ—Ä–∏–∞–ª—ã", "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ—Å—Ç—å", "–°–ª–æ–∂–Ω–æ—Å—Ç—å"])
        
        # –û—Ç–∑—ã–≤—ã –æ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏
        with tabs[0]:
            col1, col2 = st.columns(2)
            with col1:
                st.subheader("–ß—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å")
                display_reviews_in_subcols(row["presentation_like"], is_positive=True)
            with col2:
                st.subheader("–ß—Ç–æ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å")
                display_reviews_in_subcols(row["presentation_dislike"], is_positive=False)

        # –û—Ç–∑—ã–≤—ã –æ —Ä–∞–±–æ—á–µ–π —Ç–µ—Ç—Ä–∞–¥–∏
        with tabs[1]:
            col1, col2 = st.columns(2)
            with col1:
                st.subheader("–ß—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å")
                display_reviews_in_subcols(row["workbook_like"], is_positive=True)
            with col2:
                st.subheader("–ß—Ç–æ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å")
                display_reviews_in_subcols(row["workbook_dislike"], is_positive=False)

        # –û—Ç–∑—ã–≤—ã –æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö
        with tabs[2]:
            col1, col2 = st.columns(2)
            with col1:
                st.subheader("–ß—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å")
                display_reviews_in_subcols(row["addmaterial_like"], is_positive=True)
            with col2:
                st.subheader("–ß—Ç–æ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å")
                display_reviews_in_subcols(row["addmaterial_dislike"], is_positive=False)

        # –û—Ç–∑—ã–≤—ã –æ–± –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ—Å—Ç–∏
        with tabs[3]:
            col1, col2 = st.columns(2)
            with col1:
                st.subheader("–ß—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å")
                display_reviews_in_subcols(row["interest_like"], is_positive=True)
            with col2:
                st.subheader("–ß—Ç–æ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å")
                display_reviews_in_subcols(row["interest_dislike"], is_positive=False)

        # –û—Ç–∑—ã–≤—ã –æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        with tabs[4]:
            col1, col2 = st.columns(2)
            with col1:
                st.subheader("–ö–∞–∫ —É–ø—Ä–æ—Å—Ç–∏—Ç—å")
                display_reviews_in_subcols(row["complexity_to_simplify"], is_positive=False)
            with col2:
                st.subheader("–ö–∞–∫ —É—Å–ª–æ–∂–Ω–∏—Ç—å")
                display_reviews_in_subcols(row["complexity_to_complicate"], is_positive=True)

# –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É—Ä–æ–∫–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
def _page_lessons_inline(df: pd.DataFrame):
    """–í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É—Ä–æ–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –º–æ–¥—É–ª—è"""
    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ –∏ –º–æ–¥—É–ª—é
    df_mod = core.apply_filters(df, ["program", "module"])
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    if df_mod.empty:
        mod_name = st.session_state.get('filter_module') or '‚Äî'
        st.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–¥—É–ª—è '{mod_name}'")
        return
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.subheader("üè´ –£—Ä–æ–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è")
    
    # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —É—Ä–æ–∫–∞–º
    agg = df_mod.groupby("lesson").agg(
        risk=("risk", "mean"),
        success=("success_rate", "mean"),
        complaints=("complaint_rate", "mean"),
        cards=("card_id", "nunique")
    ).reset_index()
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ä–æ–∫–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–∫–∞—è –∫–æ–ª–æ–Ω–∫–∞
    if "lesson_order" in df_mod.columns:
        lesson_order = df_mod.groupby("lesson")["lesson_order"].first().reset_index()
        agg = agg.merge(lesson_order, on="lesson", how="left")
        agg = agg.sort_values("lesson_order")
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ —Å –ø–æ—Ä—è–¥–∫–æ–º, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∏—Å–∫—É
        agg = agg.sort_values("risk", ascending=False)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –Ω—É–º–µ—Ä–∞—Ü–∏—é
    agg = agg.reset_index(drop=True)
    agg["lesson_num"] = agg.index + 1
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    fig = px.bar(
        agg,
        x="lesson_num",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –Ω—É–º–µ—Ä–∞—Ü–∏—é –≤–º–µ—Å—Ç–æ ID
        y="risk",
        color="risk",
        color_continuous_scale="RdYlGn_r",
        labels={"lesson_num": "–ù–æ–º–µ—Ä —É—Ä–æ–∫–∞", "risk": "–†–∏—Å–∫"},
        title="–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ –ø–æ —É—Ä–æ–∫–∞–º",
        hover_data=["lesson", "success", "complaints", "cards"]  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π ID –≤ –ø–æ–¥—Å–∫–∞–∑–∫—É
    )
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏
    fig.update_traces(
        hovertemplate="<b>%{customdata[0]}</b><br>" +
                      "–ù–æ–º–µ—Ä: %{x}<br>" +
                      "–†–∏—Å–∫: %{y:.2f}<br>" +
                      "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: %{customdata[1]:.1%}<br>" +
                      "–ñ–∞–ª–æ–±—ã: %{customdata[2]:.1%}<br>" +
                      "–ö–∞—Ä—Ç–æ—á–µ–∫: %{customdata[3]}"
    )
    
    fig.update_layout(
        xaxis_tickangle=0  # –£–±–∏—Ä–∞–µ–º –Ω–∞–∫–ª–æ–Ω, —Ç.–∫. —á–∏—Å–ª–∞ –∫–æ–º–ø–∞–∫—Ç–Ω—ã
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    # –¢–∞–±–ª–∏—Ü–∞ —Å —É—Ä–æ–∫–∞–º–∏
    table_df = agg[["lesson_num", "lesson", "risk", "success", "complaints", "cards"]]
    table_df.columns = ["–ù–æ–º–µ—Ä", "–£—Ä–æ–∫", "–†–∏—Å–∫", "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å", "–ñ–∞–ª–æ–±—ã", "–ö–∞—Ä—Ç–æ—á–µ–∫"]
    
    st.dataframe(
        table_df.style.format({
            "–†–∏—Å–∫": "{:.2f}",
            "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å": "{:.1%}",
            "–ñ–∞–ª–æ–±—ã": "{:.1%}"
        }),
        use_container_width=True
    )
    
    # –°–ø–∏—Å–æ–∫ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã—Ö —É—Ä–æ–∫–æ–≤
    display_clickable_items(df_mod, "lesson", "lesson", metrics=["cards", "risk"])