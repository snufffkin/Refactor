# pages/modules.py —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
"""
–°—Ç—Ä–∞–Ω–∏—Ü–∞ –º–æ–¥—É–ª—è (–û–±–∑–æ—Ä + –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —É—Ä–æ–∫–∞–º)
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import numpy as np

import core
from components.utils import create_hierarchical_header, display_clickable_items
from components.metrics import display_metrics_row, display_status_chart, display_risk_distribution
from components.charts import display_risk_bar_chart, display_metrics_comparison, display_success_complaints_chart, display_completion_radar
import navigation_utils

def page_modules(df: pd.DataFrame):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –º–æ–¥—É–ª—è —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π –ø–æ —É—Ä–æ–∫–∞–º"""
    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ –∏ –º–æ–¥—É–ª—é
    df_module = core.apply_filters(df, ["program", "module"])
    prog_name = st.session_state.get('filter_program')
    module_name = st.session_state.get('filter_module')
    
    # –°–æ–∑–¥–∞–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    create_hierarchical_header(
        levels=["program", "module"],
        values=[prog_name, module_name]
    )
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    if df_module.empty:
        st.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–¥—É–ª—è '{module_name}' –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ '{prog_name}'")
        return
    
    # 1. –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –º–æ–¥—É–ª—è
    st.subheader("üìà –ú–µ—Ç—Ä–∏–∫–∏ –º–æ–¥—É–ª—è")
    display_metrics_row(df_module, compare_with=df[df["program"] == prog_name])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫—É —Å—Ä–µ–¥–Ω–µ–≥–æ —Å—É–º–º–∞—Ä–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —É—Ä–æ–∫
    lessons_data = df_module.groupby("lesson").agg(
        total_time_median=("time_median", "sum")
    ).reset_index()
    
    avg_time_per_lesson = lessons_data["total_time_median"].mean() if not lessons_data.empty else 0
    avg_time_per_lesson = avg_time_per_lesson / 60
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–µ—Ç—Ä–∏–∫—É –≤—Ä–µ–º–µ–Ω–∏
    st.subheader("‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ —É—Ä–æ–∫")
    st.metric(
        label="–°—Ä–µ–¥–Ω–µ–µ —Å—É–º–º–∞—Ä–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ —É—Ä–æ–∫ (–º–∏–Ω)",
        value=f"{avg_time_per_lesson:.1f}"
    )
    
    # 2. –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞ –∏ —Å—Ç–∞—Ç—É—Å—ã
    col1, col2 = st.columns(2)
    
    with col1:
        display_risk_distribution(df_module, "lesson")
    
    with col2:
        display_status_chart(df_module, "lesson")
    
    # 3. –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ–º —É—Ä–æ–∫–∏ –≤ –≤–∏–¥–µ —Å—Ç–æ–ª–±—á–∞—Ç–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
    st.subheader("üìä –£—Ä–æ–∫–∏ –º–æ–¥—É–ª—è")
    
    # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —É—Ä–æ–∫–∞–º
    agg = df_module.groupby("lesson").agg(
        risk=("risk", "mean"),
        success=("success_rate", "mean"),
        complaints=("complaint_rate", "mean"),
        discrimination=("discrimination_avg", "mean"),
        cards=("card_id", "nunique")
    ).reset_index()
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ä–æ–∫–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–∫–∞—è –∫–æ–ª–æ–Ω–∫–∞
    if "lesson_order" in df_module.columns:
        lesson_order = df_module.groupby("lesson")["lesson_order"].first().reset_index()
        agg = agg.merge(lesson_order, on="lesson", how="left")
        agg = agg.sort_values("lesson_order")
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ —Å –ø–æ—Ä—è–¥–∫–æ–º, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∏—Å–∫—É
        agg = agg.sort_values("risk", ascending=False)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –Ω—É–º–µ—Ä–∞—Ü–∏—é
    agg = agg.reset_index(drop=True)
    agg["lesson_num"] = agg.index + 1
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç–æ–ª–±—á–∞—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É —Ä–∏—Å–∫–∞ –ø–æ —É—Ä–æ–∫–∞–º —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–æ—Ä—è–¥–∫–æ–≤—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
    fig = px.bar(
        agg,
        x="lesson_num",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –Ω—É–º–µ—Ä–∞—Ü–∏—é –≤–º–µ—Å—Ç–æ ID
        y="risk",
        color="risk",
        color_continuous_scale="RdYlGn_r",
        labels={"lesson_num": "–ù–æ–º–µ—Ä —É—Ä–æ–∫–∞", "risk": "–†–∏—Å–∫"},
        title="–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ –ø–æ —É—Ä–æ–∫–∞–º",
        hover_data=["lesson", "success", "complaints", "discrimination", "cards"]  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –ø–æ–¥—Å–∫–∞–∑–∫—É
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –¥–ª—è –≥—Ä–∞–Ω–∏—Ü –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∏—Å–∫–∞
    fig.add_hline(y=0.3, line_dash="dash", line_color="green", 
                  annotation_text="–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫", annotation_position="left")
    fig.add_hline(y=0.5, line_dash="dash", line_color="gold", 
                  annotation_text="–°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫", annotation_position="left")
    fig.add_hline(y=0.7, line_dash="dash", line_color="red", 
                  annotation_text="–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫", annotation_position="left")
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏
    fig.update_traces(
        hovertemplate="<b>–£—Ä–æ–∫: %{customdata[0]}</b><br>" +
                      "–ù–æ–º–µ—Ä: %{x}<br>" +
                      "–†–∏—Å–∫: %{y:.2f}<br>" +
                      "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: %{customdata[1]:.1%}<br>" +
                      "–ñ–∞–ª–æ–±—ã: %{customdata[2]:.1%}<br>" +
                      "–î–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç—å: %{customdata[3]:.2f}<br>" +
                      "–ö–∞—Ä—Ç–æ—á–µ–∫: %{customdata[4]}"
    )
    
    fig.update_layout(
        xaxis_title="–ù–æ–º–µ—Ä —É—Ä–æ–∫–∞",
        yaxis_title="–†–∏—Å–∫",
        xaxis_tickangle=0  # –£–±–∏—Ä–∞–µ–º –Ω–∞–∫–ª–æ–Ω, —Ç.–∫. —á–∏—Å–ª–∞ –∫–æ–º–ø–∞–∫—Ç–Ω—ã
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    # 4. –î–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —É—Ä–æ–∫–æ–≤
    st.subheader("üìä –î–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —É—Ä–æ–∫–æ–≤")
    
    # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π
    tabs = st.tabs(["–ú–µ—Ç—Ä–∏–∫–∏ —É—Ä–æ–∫–æ–≤", "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∏ –∂–∞–ª–æ–±—ã", "–†–∞–¥–∞—Ä–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞"])
    
    with tabs[0]:
        # –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–µ—Ç—Ä–∏–∫ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é –≤–º–µ—Å—Ç–æ ID
        agg_metrics = df_module.groupby("lesson").agg(
            success_rate=("success_rate", "mean"),
            complaint_rate=("complaint_rate", "mean"),
            discrimination_avg=("discrimination_avg", "mean"),
            risk=("risk", "mean")
        ).reset_index()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –Ω—É–º–µ—Ä–∞—Ü–∏—é –¥–ª—è –≥—Ä—É–ø–ø –∑–∞–¥–∞–Ω–∏–π
        if "lesson_order" in df_module.columns:
            lesson_order = df_module.groupby("lesson")["lesson_order"].first().reset_index()
            agg_metrics = agg_metrics.merge(lesson_order, on="lesson", how="left")
            agg_metrics = agg_metrics.sort_values("lesson_order")
        else:
            agg_metrics = agg_metrics.sort_values("risk", ascending=False)
        
        agg_metrics = agg_metrics.reset_index(drop=True)
        agg_metrics["lesson_num"] = agg_metrics.index + 1
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        agg_metrics = agg_metrics.head(15)
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Ñ–æ—Ä–º–∞—Ç "–¥–ª–∏–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö" –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        melted_df = pd.melt(
            agg_metrics,
            id_vars=["lesson", "lesson_num"],
            value_vars=["success_rate", "complaint_rate", "discrimination_avg", "risk"],
            var_name="metric",
            value_name="value"
        )
        
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        metric_names = {
            "success_rate": "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å",
            "complaint_rate": "–ñ–∞–ª–æ–±—ã",
            "discrimination_avg": "–î–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç—å",
            "risk": "–†–∏—Å–∫"
        }
        melted_df["metric_name"] = melted_df["metric"].map(metric_names)
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
        fig_metrics = px.bar(
            melted_df,
            x="lesson_num",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—è–¥–∫–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞ –≤–º–µ—Å—Ç–æ ID
            y="value",
            color="metric_name",
            barmode="group",
            hover_data=["lesson"],  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –ø–æ–¥—Å–∫–∞–∑–∫–µ
            labels={
                "lesson_num": "–ù–æ–º–µ—Ä —É—Ä–æ–∫–∞",
                "value": "–ó–Ω–∞—á–µ–Ω–∏–µ",
                "metric_name": "–ú–µ—Ç—Ä–∏–∫–∞"
            },
            title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ –ø–æ —É—Ä–æ–∫–∞–º"
        )
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –æ—Å–∏ Y –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–µ—Ç—Ä–∏–∫–∏
        fig_metrics.update_layout(
            yaxis_tickformat=".1%",
            xaxis_tickangle=0  # –£–±–∏—Ä–∞–µ–º –Ω–∞–∫–ª–æ–Ω, —Ç.–∫. —á–∏—Å–ª–∞ –∫–æ–º–ø–∞–∫—Ç–Ω—ã
        )
        
        st.plotly_chart(fig_metrics, use_container_width=True)
    
    with tabs[1]:
        # –ì—Ä–∞—Ñ–∏–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∏ –∂–∞–ª–æ–±
        display_success_complaints_chart(df_module, "lesson", limit=20)
    
    with tabs[2]:
        # –†–∞–¥–∞—Ä–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –¥–ª—è —Ç–æ–ø-5 —É—Ä–æ–∫–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º
        display_completion_radar(df_module, "lesson", limit=5)
    
    # 5. –¢–∞–±–ª–∏—Ü–∞ —Å —É—Ä–æ–∫–∞–º–∏
    st.subheader("üìã –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —É—Ä–æ–∫–∞–º")
    
    # –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å —É—Ä–æ–∫–∞–º–∏, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å –≥—Ä–∞—Ñ–∏–∫–æ–º
    detailed_df = agg[["lesson_num", "lesson", "risk", "success", "complaints", "discrimination", "cards"]]
    detailed_df.columns = ["–ù–æ–º–µ—Ä", "–£—Ä–æ–∫", "–†–∏—Å–∫", "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å", "–ñ–∞–ª–æ–±—ã", "–î–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç—å", "–ö–∞—Ä—Ç–æ—á–µ–∫"]
    
    st.dataframe(
        detailed_df.style.format({
            "–†–∏—Å–∫": "{:.2f}",
            "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å": "{:.1%}",
            "–ñ–∞–ª–æ–±—ã": "{:.1%}",
            "–î–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç—å": "{:.2f}"
        }).background_gradient(
            subset=["–†–∏—Å–∫"],
            cmap="RdYlGn_r"
        ),
        use_container_width=True
    )
    
    # 6. –°–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤ —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
    st.subheader("üìñ –°–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤")
    display_clickable_items(df_module, "lesson", "lesson", metrics=["cards", "risk", "success"])
    
    # 7. –ï—Å–ª–∏ —É—Ä–æ–∫ –≤—ã–±—Ä–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ì–ó
    if st.session_state.get("filter_lesson"):
        from .gz import _page_gz_inline
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        st.markdown("---")
        _page_gz_inline(df)