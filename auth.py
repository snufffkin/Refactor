# auth.py

import streamlit as st
import hashlib
from sqlalchemy import text
import pandas as pd
from datetime import datetime, timedelta

def init_auth():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    if "authenticated" not in st.session_state:
        st.session_state.authenticated = False
    if "username" not in st.session_state:
        st.session_state.username = None
    if "user_id" not in st.session_state:
        st.session_state.user_id = None
    if "role" not in st.session_state:
        st.session_state.role = None
    if "login_error" not in st.session_state:
        st.session_state.login_error = None
    if "last_activity" not in st.session_state:
        st.session_state.last_activity = datetime.now()

def authenticate(username, password, engine):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ü—Ä–æ—Å—Ç–æ–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
    password_hash = hashlib.sha256(password.encode()).hexdigest()
    
    # –ó–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    with engine.connect() as conn:
        result = conn.execute(text("""
            SELECT user_id, username, role, is_active 
            FROM users 
            WHERE username = :username AND password_hash = :password_hash
        """), {"username": username, "password_hash": password_hash}).fetchone()
    
    if result and result.is_active:
        # –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        st.session_state.authenticated = True
        st.session_state.username = result.username
        st.session_state.user_id = result.user_id
        st.session_state.role = result.role
        st.session_state.last_activity = datetime.now()
        st.session_state.login_error = None
        return True
    else:
        # –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        st.session_state.login_error = "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å"
        return False

def check_authentication():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –ª–æ–≥–∏–Ω–∞
    if not st.session_state.get("authenticated", False):
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (30 –º–∏–Ω—É—Ç)
    if datetime.now() - st.session_state.last_activity > timedelta(minutes=30):
        # –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞
        st.session_state.authenticated = False
        st.session_state.username = None
        st.session_state.user_id = None
        st.session_state.role = None
        return False
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    st.session_state.last_activity = datetime.now()
    return True

def logout():
    """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    st.session_state.authenticated = False
    st.session_state.username = None
    st.session_state.user_id = None
    st.session_state.role = None

def login_page(engine):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Ö–æ–¥–∞"""
    st.title("üîê –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
    
    with st.form("login_form"):
        username = st.text_input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
        submitted = st.form_submit_button("–í–æ–π—Ç–∏")
        
        if submitted:
            # –ü—ã—Ç–∞–µ–º—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∏ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            if authenticate(username, password, engine):
                st.rerun()
    
    if st.session_state.login_error:
        st.error(st.session_state.login_error)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
    with st.expander("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"):
        st.markdown("""
        ### –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:
        
        **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä**:
        - –õ–æ–≥–∏–Ω: admin
        - –ü–∞—Ä–æ–ª—å: admin123
        
        **–ú–µ—Ç–æ–¥–∏—Å—Ç**:
        - –õ–æ–≥–∏–Ω: methodist
        - –ü–∞—Ä–æ–ª—å: methodist123
        """)

def show_user_menu():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏"""
    st.sidebar.markdown("---")
    st.sidebar.markdown(f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {st.session_state.username}")
    st.sidebar.markdown(f"**–†–æ–ª—å:** {st.session_state.role}")
    
    if st.sidebar.button("–í—ã–π—Ç–∏"):
        logout()
        st.rerun()

def get_assigned_cards(engine, user_id=None):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫, –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    query = """
    SELECT ca.*, 
           cs.program, cs.module, cs.lesson, cs.gz, cs.card_type,
           u.username, u.full_name
    FROM card_assignments ca
    JOIN cards_structure cs ON ca.card_id = cs.card_id
    JOIN users u ON ca.user_id = u.user_id
    """
    
    params = {}
    
    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω user_id, —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ–≥–æ –∫–∞—Ä—Ç–æ—á–∫–∏
    if user_id:
        query += " WHERE ca.user_id = :user_id"
        params["user_id"] = user_id
    
    query += " ORDER BY ca.updated_at DESC"
    
    with engine.connect() as conn:
        result = pd.read_sql(text(query), conn, params=params)
    
    return result

def assign_card_to_user(engine, card_id, user_id, status="in_progress", notes=None):
    """–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    with engine.begin() as conn:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ª–∏ —É–∂–µ –∫–∞—Ä—Ç–æ—á–∫–∞ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        existing = conn.execute(text("""
            SELECT assignment_id FROM card_assignments
            WHERE card_id = :card_id AND user_id = :user_id
        """), {"card_id": card_id, "user_id": user_id}).fetchone()
        
        if existing:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
            conn.execute(text("""
                UPDATE card_assignments
                SET status = :status, updated_at = CURRENT_TIMESTAMP, notes = :notes
                WHERE assignment_id = :assignment_id
            """), {"status": status, "notes": notes, "assignment_id": existing[0]})
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π
            conn.execute(text("""
                INSERT INTO assignment_history (assignment_id, old_status, new_status, changed_by)
                VALUES (:assignment_id, (SELECT status FROM card_assignments WHERE assignment_id = :assignment_id), :new_status, :user_id)
            """), {"assignment_id": existing[0], "new_status": status, "user_id": user_id})
            
            return existing[0]
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
            result = conn.execute(text("""
                INSERT INTO card_assignments (card_id, user_id, status, notes)
                VALUES (:card_id, :user_id, :status, :notes)
                RETURNING assignment_id
            """), {"card_id": card_id, "user_id": user_id, "status": status, "notes": notes})
            
            assignment_id = result.fetchone()[0]
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π
            conn.execute(text("""
                INSERT INTO assignment_history (assignment_id, old_status, new_status, changed_by)
                VALUES (:assignment_id, NULL, :new_status, :user_id)
            """), {"assignment_id": assignment_id, "new_status": status, "user_id": user_id})
            
            return assignment_id

def update_card_status(engine, assignment_id, new_status, user_id, comment=None):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞—Ä—Ç–æ—á–∫–∏"""
    with engine.begin() as conn:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        old_status = conn.execute(text("""
            SELECT status FROM card_assignments WHERE assignment_id = :assignment_id
        """), {"assignment_id": assignment_id}).fetchone()[0]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        conn.execute(text("""
            UPDATE card_assignments
            SET status = :status, updated_at = CURRENT_TIMESTAMP
            WHERE assignment_id = :assignment_id
        """), {"status": new_status, "assignment_id": assignment_id})
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π
        conn.execute(text("""
            INSERT INTO assignment_history (assignment_id, old_status, new_status, changed_by, comment)
            VALUES (:assignment_id, :old_status, :new_status, :user_id, :comment)
        """), {
            "assignment_id": assignment_id, 
            "old_status": old_status, 
            "new_status": new_status, 
            "user_id": user_id,
            "comment": comment
        })