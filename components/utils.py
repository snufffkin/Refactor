# components/utils.py
"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
"""

import streamlit as st
import pandas as pd
import numpy as np

def create_hierarchical_header(levels, values, emoji_map=None):
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –≤–∏–¥–µ "–ª–µ—Å–µ–Ω–∫–∏" —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
    
    Args:
        levels: –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π —É—Ä–æ–≤–Ω–µ–π –∏–µ—Ä–∞—Ä—Ö–∏–∏
        values: –°–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è
        emoji_map: –°–ª–æ–≤–∞—Ä—å —Å —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è
    """
    import core
    
    if emoji_map is None:
        emoji_map = {
            "program": "üìö",
            "module": "üìò",
            "lesson": "üìù",
            "gz": "üß©",
            "card": "üóÇÔ∏è"
        }
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    current_level = levels[-1]
    current_value = values[-1] or '‚Äî'
    emoji = emoji_map.get(current_level, "üìä")
    
    st.header(f"{emoji} {current_level.capitalize()}: {current_value}")
    
    # –°–æ–∑–¥–∞–µ–º "–ª–µ—Å–µ–Ω–∫—É" –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º UI –∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
    nav_col1, nav_col2 = st.columns([1, 3])
    
    with nav_col1:
        for level in levels:
            st.markdown(f"**{level.capitalize()}:**")
    
    with nav_col2:
        for i, value in enumerate(values):
            if value and i < len(levels):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —É—Ä–æ–≤–µ–Ω—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É, –∏—Å–ø–æ–ª—å–∑—É—è —Ñ—É–Ω–∫—Ü–∏—é clickable
                level = levels[i]
                core.clickable(value, level)
            else:
                st.markdown(f"**{value or '‚Äî'}**")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    st.markdown("---")
    
def display_clickable_items(df, column, level, metrics=None):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
    
    Args:
        df: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏
        column: –ö–æ–ª–æ–Ω–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        level: –£—Ä–æ–≤–µ–Ω—å –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ
        metrics: –°–ø–∏—Å–æ–∫ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä—è–¥–æ–º —Å —ç–ª–µ–º–µ–Ω—Ç–æ–º
    """
    import core
    
    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –Ω–∏—Ö
    if metrics:
        agg_df = df.groupby(column).agg(
            success=("success_rate", "mean"),
            complaints=("complaint_rate", "mean"),
            risk=("risk", "mean"),
            cards=("card_id", "nunique")
        ).reset_index()
    else:
        agg_df = df.groupby(column).agg(
            cards=("card_id", "nunique")
        ).reset_index()
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–æ–Ω–∫–µ
    sorted_df = agg_df.sort_values(column)
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
    col1, col2 = st.columns(2)
    
    half = len(sorted_df) // 2 + len(sorted_df) % 2
    
    for i, (_, row) in enumerate(sorted_df.iterrows()):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤ –∫–∞–∫—É—é –∫–æ–ª–æ–Ω–∫—É –¥–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç
        current_col = col1 if i < half else col2
        
        with current_col:
            c1, c2 = st.columns([4, 3])
            with c1:
                core.clickable(row[column], level)
            with c2:
                if metrics:
                    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
                    metrics_str = []
                    if "cards" in metrics:
                        metrics_str.append(f"Cards: {row.cards}")
                    if "risk" in metrics:
                        metrics_str.append(f"Risk: {row.risk:.2f}")
                    if "success" in metrics:
                        metrics_str.append(f"Success: {row.success:.1%}")
                    if "complaints" in metrics:
                        metrics_str.append(f"Compl: {row.complaints:.1%}")
                    
                    st.markdown(f"{' | '.join(metrics_str)}")
                else:
                    st.markdown(f"Cards: {row.cards}")

def add_gz_links(df, gz_filter):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –ì–ó –≤ –Ω–∞—á–∞–ª–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ñ–∏–ª—å—Ç—Ä –ì–ó
    
    Args:
        df: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏
        gz_filter: –¢–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä –ì–ó
    """
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ –∑–∞–¥–∞–Ω–∏–π, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏
    if gz_filter and 'gz_id' in df.columns:
        # –ü–æ–ª—É—á–∞–µ–º ID –≥—Ä—É–ø–ø—ã –∑–∞–¥–∞–Ω–∏–π
        gz_id = df.loc[df.gz == gz_filter, 'gz_id'].iloc[0] if not df.empty else None
        
        if gz_id:
            st.markdown("### –°—Å—ã–ª–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã –∑–∞–¥–∞–Ω–∏–π")
            link_col1, link_col2 = st.columns(2)
            
            with link_col1:
                st.markdown(f"[üîó –°—Å—ã–ª–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è](https://education.yandex-team.ru/exercise/edit/{gz_id})")
            
            with link_col2:
                st.markdown(f"[üåê –ü—É–±–ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞](https://education.yandex.ru/classroom/public-lesson/{gz_id}/run/)")
            
            st.markdown("---")