# components/utils.py —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π URL-–Ω–∞–≤–∏–≥–∞—Ü–∏–∏
"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
"""

import streamlit as st
import pandas as pd
import numpy as np
import navigation_utils
import re

def create_hierarchical_header(levels, values, emoji_map=None):
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –≤–∏–¥–µ "–ª–µ—Å–µ–Ω–∫–∏" —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
    
    Args:
        levels: –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π —É—Ä–æ–≤–Ω–µ–π –∏–µ—Ä–∞—Ä—Ö–∏–∏
        values: –°–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è
        emoji_map: –°–ª–æ–≤–∞—Ä—å —Å —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è
    """
    import core
    import urllib.parse as ul
    
    if emoji_map is None:
        emoji_map = {
            "program": "üìö",
            "module": "üìò",
            "lesson": "üìù",
            "gz": "üß©",
            "card": "üóÇÔ∏è"
        }
    
    # –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    current_page = st.session_state.get("page", "–û–±–∑–æ—Ä").lower()
    if current_page == "‚öôÔ∏è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏":
        current_page = "admin"
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    current_level = levels[-1]
    current_value = values[-1] or '‚Äî'
    emoji = emoji_map.get(current_level, "üìä")
    
    st.header(f"{emoji} {current_level.capitalize()}: {current_value}")
    
    # –°–æ–∑–¥–∞–µ–º "–ª–µ—Å–µ–Ω–∫—É" –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º UI –∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
    nav_col1, nav_col2 = st.columns([1, 3])
    
    with nav_col1:
        for level in levels:
            st.markdown(f"**{level.capitalize()}:**")
    
    with nav_col2:
        for i, value in enumerate(values):
            if value and i < len(levels):
                level = levels[i]
                # –í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                target_page = level + "s"
                if level == "gz":
                    target_page = "gz"
                # –°–æ–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                params = {}
                for j, l in enumerate(levels[:i+1]):
                    if values[j]:
                        params[l] = values[j]
                # –ö–Ω–æ–ø–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                key = f"nav_header_{level}_{i}"
                if st.button(f"{value}", key=key):
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é navigate_to –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ query_params
                    navigation_utils.navigate_to(target_page, **params)
            else:
                st.markdown(f"**{value or '‚Äî'}**")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    st.markdown("---")

def group_programs_by_class(df, column="program"):
    """
    –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ –∫–ª–∞—Å—Å–∞–º –æ–±—É—á–µ–Ω–∏—è (5-11) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏ –ø–æ –≥—Ä—É–ø–ø–∞–º.
    
    Args:
        df: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏
        column: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º
        
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –≥—Ä—É–ø–ø–∞–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º –ø–æ –∫–ª–∞—Å—Å–∞–º {–∫–ª–∞—Å—Å: [—Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º]}
    """
    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º
    programs = df[column].unique()
    
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    result = {
        '5 –∫–ª–∞—Å—Å': [],
        '6 –∫–ª–∞—Å—Å': [],
        '7 –∫–ª–∞—Å—Å': [],
        '8 –∫–ª–∞—Å—Å': [],
        '9 –∫–ª–∞—Å—Å': [],
        '10 –∫–ª–∞—Å—Å': [],
        '11 –∫–ª–∞—Å—Å': [],
        '–î—Ä—É–≥–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã': []
    }
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã
    class_patterns = {
        '5 –∫–ª–∞—Å—Å': r'–¥–ª—è 5 –∫–ª–∞—Å—Å–∞',
        '6 –∫–ª–∞—Å—Å': r'–¥–ª—è 6 –∫–ª–∞—Å—Å–∞',
        '7 –∫–ª–∞—Å—Å': r'–¥–ª—è 7 –∫–ª–∞—Å—Å–∞',
        '8 –∫–ª–∞—Å—Å': r'–¥–ª—è 8 –∫–ª–∞—Å—Å–∞',
        '9 –∫–ª–∞—Å—Å': r'–¥–ª—è 9 –∫–ª–∞—Å—Å–∞',
        '10 –∫–ª–∞—Å—Å': r'–¥–ª—è 10 –∫–ª–∞—Å—Å–∞',
        '11 –∫–ª–∞—Å—Å': r'–¥–ª—è 11 –∫–ª–∞—Å—Å–∞'
    }
    
    # –§—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≥–æ–¥–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
    def extract_year(program_name):
        # –ò—â–µ–º –≥–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 2023-2024 –∏–ª–∏ 2022-2023
        match = re.search(r'(\d{4})-(\d{4})', program_name)
        if match:
            return int(match.group(1))  # –ü–µ—Ä–≤—ã–π –≥–æ–¥ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        return 0  # –ï—Å–ª–∏ –≥–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ –∫–ª–∞—Å—Å–∞–º
    for program in programs:
        classified = False
        for class_name, pattern in class_patterns.items():
            if re.search(pattern, program, re.IGNORECASE):
                result[class_name].append(program)
                classified = True
                break
        
        if not classified:
            result['–î—Ä—É–≥–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã'].append(program)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞ –ø–æ –≥–æ–¥—É (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
    for class_name in result:
        result[class_name] = sorted(result[class_name], key=extract_year, reverse=True)
    
    return result

def display_clickable_items(df, column, level, metrics=None):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
    
    Args:
        df: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏
        column: –ö–æ–ª–æ–Ω–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        level: –£—Ä–æ–≤–µ–Ω—å –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ
        metrics: –°–ø–∏—Å–æ–∫ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä—è–¥–æ–º —Å —ç–ª–µ–º–µ–Ω—Ç–æ–º
    """
    import urllib.parse as ul
    
    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –Ω–∏—Ö
    if metrics:
        agg_df = df.groupby(column).agg(
            success=("success_rate", "mean"),
            complaints=("complaint_rate", "mean"),
            risk=("risk", "mean"),
            cards=("card_id", "nunique")
        ).reset_index()
    else:
        agg_df = df.groupby(column).agg(
            cards=("card_id", "nunique")
        ).reset_index()
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–æ–Ω–∫–µ
    sorted_df = agg_df.sort_values(column)
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
    col1, col2 = st.columns(2)
    
    half = len(sorted_df) // 2 + len(sorted_df) % 2
    
    # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
    current_filters = {}
    for filter_col in ["program", "module", "lesson", "gz"]:
        if st.session_state.get(f"filter_{filter_col}"):
            current_filters[filter_col] = st.session_state[f"filter_{filter_col}"]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    target_page = level + "s"  # –ù–∞–ø—Ä–∏–º–µ—Ä, program -> programs
    if level == "gz":
        target_page = "gz"  # –û—Å–æ–±—ã–π —Å–ª—É—á–∞–π –¥–ª—è –ì–ó
    elif level == "card":
        target_page = "cards"
    
    for i, (_, row) in enumerate(sorted_df.iterrows()):
        current_col = col1 if i < half else col2
        with current_col:
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è navigation
            url_params = current_filters.copy()
            url_params[level] = row[column]
            # –°—É—Ñ—Ñ–∏–∫—Å –¥–ª—è –∫–ª—é—á–∞ –ø–æ metrics, —á—Ç–æ–±—ã –∫–ª—é—á–∏ –±—ã–ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã –ø—Ä–∏ —Ä–∞–∑–Ω—ã—Ö –≤—ã–∑–æ–≤–∞—Ö
            metrics_suffix = "-".join(metrics) if metrics else ""
            key = f"nav_item_{level}_{metrics_suffix}_{i}"
            if st.button(f"{row[column]}", key=key):
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é navigate_to –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ query_params
                navigation_utils.navigate_to(target_page, **url_params)
            # –ü–æ–∫–∞–∑ –º–µ—Ç—Ä–∏–∫ —Ä—è–¥–æ–º —Å –∫–Ω–æ–ø–∫–æ–π
            if metrics:
                metrics_str = []
                if "cards" in metrics:
                    metrics_str.append(f"Cards: {row.cards}")
                if "risk" in metrics:
                    metrics_str.append(f"Risk: {row.risk:.2f}")
                if "success" in metrics:
                    metrics_str.append(f"Success: {row.success:.1%}")
                if "complaints" in metrics:
                    metrics_str.append(f"Compl: {row.complaints:.1%}")
                st.markdown(" | ".join(metrics_str))

def display_programs_by_class(df, column="program", metrics=None):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –∫–ª–∞—Å—Å–∞–º –æ–±—É—á–µ–Ω–∏—è
    
    Args:
        df: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏
        column: –ö–æ–ª–æ–Ω–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        metrics: –°–ø–∏—Å–æ–∫ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä—è–¥–æ–º —Å —ç–ª–µ–º–µ–Ω—Ç–æ–º
    """
    import urllib.parse as ul
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ –∫–ª–∞—Å—Å–∞–º
    programs_by_class = group_programs_by_class(df, column)
    
    # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
    if metrics:
        agg_df = df.groupby(column).agg(
            success=("success_rate", "mean"),
            complaints=("complaint_rate", "mean"),
            risk=("risk", "mean"),
            cards=("card_id", "nunique")
        ).reset_index()
    else:
        agg_df = df.groupby(column).agg(
            cards=("card_id", "nunique")
        ).reset_index()
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    metrics_dict = {}
    for _, row in agg_df.iterrows():
        metrics_dict[row[column]] = row
    
    # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
    current_filters = {}
    for filter_col in ["program", "module", "lesson", "gz"]:
        if st.session_state.get(f"filter_{filter_col}"):
            current_filters[filter_col] = st.session_state[f"filter_{filter_col}"]
    
    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å—ã —Å 5 –ø–æ 11, –∑–∞—Ç–µ–º "–î—Ä—É–≥–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã"
    for class_name in list(programs_by_class.keys()):
        programs = programs_by_class[class_name]
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∫–ª–∞—Å—Å—ã
        if not programs:
            continue
        
        st.subheader(class_name)
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
        col1, col2 = st.columns(2)
        half = len(programs) // 2 + len(programs) % 2
        
        for i, program in enumerate(programs):
            current_col = col1 if i < half else col2
            with current_col:
                # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è navigation
                url_params = current_filters.copy()
                url_params["program"] = program
                
                # –°—É—Ñ—Ñ–∏–∫—Å –¥–ª—è –∫–ª—é—á–∞ –ø–æ metrics, —á—Ç–æ–±—ã –∫–ª—é—á–∏ –±—ã–ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã –ø—Ä–∏ —Ä–∞–∑–Ω—ã—Ö –≤—ã–∑–æ–≤–∞—Ö
                metrics_suffix = "-".join(metrics) if metrics else ""
                key = f"nav_item_program_{metrics_suffix}_{class_name}_{i}"
                
                if st.button(f"{program}", key=key):
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é navigate_to
                    navigation_utils.navigate_to("programs", **url_params)
                
                # –ü–æ–∫–∞–∑ –º–µ—Ç—Ä–∏–∫ —Ä—è–¥–æ–º —Å –∫–Ω–æ–ø–∫–æ–π
                if metrics and program in metrics_dict:
                    row = metrics_dict[program]
                    metrics_str = []
                    if "cards" in metrics:
                        metrics_str.append(f"Cards: {row.cards}")
                    if "risk" in metrics:
                        metrics_str.append(f"Risk: {row.risk:.2f}")
                    if "success" in metrics:
                        metrics_str.append(f"Success: {row.success:.1%}")
                    if "complaints" in metrics:
                        metrics_str.append(f"Compl: {row.complaints:.1%}")
                    st.markdown(" | ".join(metrics_str))
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –∫–ª–∞—Å—Å–∞–º–∏
        st.markdown("---")

def add_gz_links(df, gz_filter):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –ì–ó –≤ –Ω–∞—á–∞–ª–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ñ–∏–ª—å—Ç—Ä –ì–ó
    
    Args:
        df: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏
        gz_filter: –¢–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä –ì–ó
    """
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ –∑–∞–¥–∞–Ω–∏–π, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏
    if gz_filter and 'gz_id' in df.columns:
        # –ü–æ–ª—É—á–∞–µ–º ID –≥—Ä—É–ø–ø—ã –∑–∞–¥–∞–Ω–∏–π
        gz_id = df.loc[df.gz == gz_filter, 'gz_id'].iloc[0] if not df.empty else None
        
        if gz_id:
            st.markdown("### –°—Å—ã–ª–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã –∑–∞–¥–∞–Ω–∏–π")
            link_col1, link_col2 = st.columns(2)
            
            with link_col1:
                st.markdown(f"[üîó –°—Å—ã–ª–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è](https://education.yandex-team.ru/exercise/edit/{gz_id})")
            
            with link_col2:
                st.markdown(f"[üåê –ü—É–±–ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ì–ó](https://education.yandex.ru/classroom/public-lesson/{gz_id}/run/)")
            
            st.markdown("---")

def add_card_links(card_data):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É –≤ –Ω–∞—á–∞–ª–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    
    Args:
        card_data: Series —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if 'gz_id' in card_data and pd.notna(card_data['gz_id']):
        gz_id = card_data['gz_id']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º card_order (–∏—Å–ø–æ–ª—å–∑—É–µ–º card_id, –µ—Å–ª–∏ card_order –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)
        card_order = card_data.get('card_order', card_data['card_id'])
        
        st.markdown("### –°—Å—ã–ª–∫–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏")
        link_col1, link_col2, link_col3 = st.columns(3)
        
        with link_col1:
            st.markdown(f"[üîó –°—Å—ã–ª–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è](https://education.yandex-team.ru/exercise/edit/{gz_id})")
        
        with link_col2:
            st.markdown(f"[üîó –ü—É–±–ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞](https://education.yandex.ru/classroom/public-lesson/{gz_id}/run/{card_order}/)")
        
        with link_col3:
            st.markdown(f"[üåê –ü—É–±–ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ì–ó](https://education.yandex.ru/classroom/public-lesson/{gz_id}/run/)")
        
        st.markdown("---")