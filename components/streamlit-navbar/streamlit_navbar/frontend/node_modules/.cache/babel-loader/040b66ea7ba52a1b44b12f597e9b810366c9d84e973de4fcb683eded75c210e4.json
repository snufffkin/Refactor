{"ast":null,"code":"import{Streamlit}from\"streamlit-component-lib\";// Add text and a button to the DOM. (You could also add these directly\n// to index.html.)\nconst span=document.body.appendChild(document.createElement(\"span\"));const textNode=span.appendChild(document.createTextNode(\"\"));const button=span.appendChild(document.createElement(\"button\"));button.textContent=\"Click Me!\";// Add a click handler to our button. It will send data back to Streamlit.\nlet numClicks=0;let isFocused=false;button.onclick=function(){// Increment numClicks, and pass the new value back to\n// Streamlit via `Streamlit.setComponentValue`.\nnumClicks+=1;Streamlit.setComponentValue(numClicks);};button.onfocus=function(){isFocused=true;};button.onblur=function(){isFocused=false;};/**\n * The component's render function. This will be called immediately after\n * the component is initially loaded, and then again every time the\n * component gets new data from Python.\n */function onRender(event){// Get the RenderData from the event\nconst data=event.detail;// Maintain compatibility with older versions of Streamlit that don't send\n// a theme object.\nif(data.theme){// Use CSS vars to style our button border. Alternatively, the theme style\n// is defined in the data.theme object.\nconst borderStyling=`1px solid var(${isFocused?\"--primary-color\":\"gray\"})`;button.style.border=borderStyling;button.style.outline=borderStyling;}// Disable our button if necessary.\nbutton.disabled=data.disabled;// RenderData.args is the JSON dictionary of arguments sent from the\n// Python script.\nlet name=data.args[\"name\"];// Show \"Hello, name!\" with a non-breaking space afterwards.\ntextNode.textContent=`Hello, ${name}! `+String.fromCharCode(160);// We tell Streamlit to update our frameHeight after each render event, in\n// case it has changed. (This isn't strictly necessary for the example\n// because our height stays fixed, but this is a low-cost function, so\n// there's no harm in doing it redundantly.)\nStreamlit.setFrameHeight();}// Attach our `onRender` handler to Streamlit's render event.\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT,onRender);// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady();// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight();","map":{"version":3,"names":["Streamlit","span","document","body","appendChild","createElement","textNode","createTextNode","button","textContent","numClicks","isFocused","onclick","setComponentValue","onfocus","onblur","onRender","event","data","detail","theme","borderStyling","style","border","outline","disabled","name","args","String","fromCharCode","setFrameHeight","events","addEventListener","RENDER_EVENT","setComponentReady"],"sources":["/Users/romannikitin/Documents/Refactor/component-template/streamlit-navbar/streamlit_navbar/frontend/src/index.tsx"],"sourcesContent":["import { Streamlit, RenderData } from \"streamlit-component-lib\"\n\n// Add text and a button to the DOM. (You could also add these directly\n// to index.html.)\nconst span = document.body.appendChild(document.createElement(\"span\"))\nconst textNode = span.appendChild(document.createTextNode(\"\"))\nconst button = span.appendChild(document.createElement(\"button\"))\nbutton.textContent = \"Click Me!\"\n\n// Add a click handler to our button. It will send data back to Streamlit.\nlet numClicks = 0\nlet isFocused = false\nbutton.onclick = function(): void {\n  // Increment numClicks, and pass the new value back to\n  // Streamlit via `Streamlit.setComponentValue`.\n  numClicks += 1\n  Streamlit.setComponentValue(numClicks)\n}\n\nbutton.onfocus = function(): void {\n  isFocused = true\n}\n\nbutton.onblur = function(): void {\n  isFocused = false\n}\n\n/**\n * The component's render function. This will be called immediately after\n * the component is initially loaded, and then again every time the\n * component gets new data from Python.\n */\nfunction onRender(event: Event): void {\n  // Get the RenderData from the event\n  const data = (event as CustomEvent<RenderData>).detail\n\n  // Maintain compatibility with older versions of Streamlit that don't send\n  // a theme object.\n  if (data.theme) {\n    // Use CSS vars to style our button border. Alternatively, the theme style\n    // is defined in the data.theme object.\n    const borderStyling = `1px solid var(${\n      isFocused ? \"--primary-color\" : \"gray\"\n    })`\n    button.style.border = borderStyling\n    button.style.outline = borderStyling\n  }\n\n  // Disable our button if necessary.\n  button.disabled = data.disabled\n\n  // RenderData.args is the JSON dictionary of arguments sent from the\n  // Python script.\n  let name = data.args[\"name\"]\n\n  // Show \"Hello, name!\" with a non-breaking space afterwards.\n  textNode.textContent = `Hello, ${name}! ` + String.fromCharCode(160)\n\n  // We tell Streamlit to update our frameHeight after each render event, in\n  // case it has changed. (This isn't strictly necessary for the example\n  // because our height stays fixed, but this is a low-cost function, so\n  // there's no harm in doing it redundantly.)\n  Streamlit.setFrameHeight()\n}\n\n// Attach our `onRender` handler to Streamlit's render event.\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender)\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight()\n"],"mappings":"AAAA,OAASA,SAAS,KAAoB,yBAAyB,CAE/D;AACA;AACA,KAAM,CAAAC,IAAI,CAAGC,QAAQ,CAACC,IAAI,CAACC,WAAW,CAACF,QAAQ,CAACG,aAAa,CAAC,MAAM,CAAC,CAAC,CACtE,KAAM,CAAAC,QAAQ,CAAGL,IAAI,CAACG,WAAW,CAACF,QAAQ,CAACK,cAAc,CAAC,EAAE,CAAC,CAAC,CAC9D,KAAM,CAAAC,MAAM,CAAGP,IAAI,CAACG,WAAW,CAACF,QAAQ,CAACG,aAAa,CAAC,QAAQ,CAAC,CAAC,CACjEG,MAAM,CAACC,WAAW,CAAG,WAAW,CAEhC;AACA,GAAI,CAAAC,SAAS,CAAG,CAAC,CACjB,GAAI,CAAAC,SAAS,CAAG,KAAK,CACrBH,MAAM,CAACI,OAAO,CAAG,UAAiB,CAChC;AACA;AACAF,SAAS,EAAI,CAAC,CACdV,SAAS,CAACa,iBAAiB,CAACH,SAAS,CAAC,CACxC,CAAC,CAEDF,MAAM,CAACM,OAAO,CAAG,UAAiB,CAChCH,SAAS,CAAG,IAAI,CAClB,CAAC,CAEDH,MAAM,CAACO,MAAM,CAAG,UAAiB,CAC/BJ,SAAS,CAAG,KAAK,CACnB,CAAC,CAED;AACA;AACA;AACA;AACA,GACA,QAAS,CAAAK,QAAQA,CAACC,KAAY,CAAQ,CACpC;AACA,KAAM,CAAAC,IAAI,CAAID,KAAK,CAA6BE,MAAM,CAEtD;AACA;AACA,GAAID,IAAI,CAACE,KAAK,CAAE,CACd;AACA;AACA,KAAM,CAAAC,aAAa,CAAG,iBACpBV,SAAS,CAAG,iBAAiB,CAAG,MAAM,GACrC,CACHH,MAAM,CAACc,KAAK,CAACC,MAAM,CAAGF,aAAa,CACnCb,MAAM,CAACc,KAAK,CAACE,OAAO,CAAGH,aAAa,CACtC,CAEA;AACAb,MAAM,CAACiB,QAAQ,CAAGP,IAAI,CAACO,QAAQ,CAE/B;AACA;AACA,GAAI,CAAAC,IAAI,CAAGR,IAAI,CAACS,IAAI,CAAC,MAAM,CAAC,CAE5B;AACArB,QAAQ,CAACG,WAAW,CAAG,UAAUiB,IAAI,IAAI,CAAGE,MAAM,CAACC,YAAY,CAAC,GAAG,CAAC,CAEpE;AACA;AACA;AACA;AACA7B,SAAS,CAAC8B,cAAc,CAAC,CAAC,CAC5B,CAEA;AACA9B,SAAS,CAAC+B,MAAM,CAACC,gBAAgB,CAAChC,SAAS,CAACiC,YAAY,CAAEjB,QAAQ,CAAC,CAEnE;AACA;AACAhB,SAAS,CAACkC,iBAAiB,CAAC,CAAC,CAE7B;AACA;AACAlC,SAAS,CAAC8B,cAAc,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}