# navigation_data.py
"""
–ú–æ–¥—É–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è JSON-—Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
"""

import os
import json
import pandas as pd
import urllib.parse as ul

def create_link(page, **params):
    """
    –°–æ–∑–¥–∞–µ—Ç URL-—Å—Å—ã–ª–∫—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    
    Args:
        page: –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        **params: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è URL
    
    Returns:
        str: URL-—Å—Å—ã–ª–∫–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    """
    base_url = "?"
    all_params = {"page": page}
    all_params.update(params)
    
    param_strings = []
    for key, value in all_params.items():
        if value is not None:
            param_strings.append(f"{key}={ul.quote_plus(str(value))}")
    
    return base_url + "&".join(param_strings)

def prepare_navigation_json(df, output_path="components/navigation_data.json"):
    """
    –°–æ–∑–¥–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π JSON —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    
    Args:
        df: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∫—É—Ä—Å–∞—Ö
        output_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è JSON-—Ñ–∞–π–ª–∞
    
    Returns:
        dict: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è
    """
    # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    navigation = {
        "main_sections": [
            {"id": "overview", "name": "–û–±–∑–æ—Ä", "icon": "üìä", "url": create_link("overview")},
            {"id": "admin", "name": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "icon": "‚öôÔ∏è", "url": create_link("admin")}
        ],
        "programs": []
    }
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
    programs = sorted(df["program"].unique())
    
    # –î–ª—è –∫–∞–∂–¥–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
    for program_name in programs:
        program_df = df[df["program"] == program_name]
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
        program = {
            "id": program_name,
            "name": program_name,
            "url": create_link("programs", program=program_name),
            "modules": []
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–æ–¥—É–ª–∏ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
        modules = sorted(program_df["module"].unique())
        
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –º–æ–¥—É–ª—è
        for module_name in modules:
            module_df = program_df[program_df["module"] == module_name]
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –º–æ–¥—É–ª—è
            module = {
                "id": module_name,
                "name": module_name,
                "url": create_link("modules", program=program_name, module=module_name),
                "lessons": []
            }
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É—Ä–æ–∫–∏ –¥–ª—è –º–æ–¥—É–ª—è
            lessons = sorted(module_df["lesson"].unique())
            
            # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–∫–∞
            for lesson_name in lessons:
                lesson_df = module_df[module_df["lesson"] == lesson_name]
                
                # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —É—Ä–æ–∫–∞
                lesson = {
                    "id": lesson_name,
                    "name": lesson_name,
                    "url": create_link("lessons", program=program_name, module=module_name, lesson=lesson_name),
                    "groups": []
                }
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã –∑–∞–¥–∞–Ω–∏–π –¥–ª—è —É—Ä–æ–∫–∞
                groups = sorted(lesson_df["gz"].unique())
                
                # –î–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã –∑–∞–¥–∞–Ω–∏–π
                for group_name in groups:
                    group_df = lesson_df[lesson_df["gz"] == group_name]
                    
                    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≥—Ä—É–ø–ø—ã –∑–∞–¥–∞–Ω–∏–π
                    group = {
                        "id": group_name,
                        "name": group_name,
                        "url": create_link("gz", program=program_name, module=module_name, lesson=lesson_name, gz=group_name),
                        "cards": []
                    }
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã –∑–∞–¥–∞–Ω–∏–π
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∏—Å–∫—É, –±–µ—Ä–µ–º —Ç–æ–ø-10
                    cards_df = group_df.sort_values("risk", ascending=False).head(10)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –∫–∞—Ä—Ç–æ—á–∫–∏
                    has_more_cards = len(group_df) > 10
                    more_cards_count = len(group_df) - 10 if has_more_cards else 0
                    
                    # –î–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
                    for _, card in cards_df.iterrows():
                        card_id = int(card["card_id"])
                        raw_risk = card["risk"]
                        if pd.isna(raw_risk):
                            risk_json = None
                            risk_str = "N/A"
                        else:
                            risk_json = float(raw_risk)
                            risk_str = f"{risk_json:.2f}"
                        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞—Ä—Ç–æ—á–∫–∏
                        card_data = {
                            "id": str(card_id),
                            "name": f"ID: {card_id} - –†–∏—Å–∫: {risk_str}",
                            "risk": risk_json,
                            "url": create_link("cards", program=program_name, module=module_name, 
                                              lesson=lesson_name, gz=group_name, card_id=card_id)
                        }
                        
                        group["cards"].append(card_data)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∞—Ö
                    group["has_more_cards"] = has_more_cards
                    group["more_cards_count"] = more_cards_count
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –≤ —É—Ä–æ–∫
                    lesson["groups"].append(group)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —É—Ä–æ–∫ –≤ –º–æ–¥—É–ª—å
                module["lessons"].append(lesson)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥—É–ª—å –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É
            program["modules"].append(module)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        navigation["programs"].append(program)
    
    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs(os.path.dirname(output_path), exist_ok=True)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ JSON
    with open(output_path, 'w', encoding='utf-8') as f:
        json.dump(navigation, f, ensure_ascii=False, indent=2)
    
    return navigation

def get_navigation_data(df=None, force_update=False):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ - –ª–∏–±–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π JSON, 
    –ª–∏–±–æ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    
    Args:
        df: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å)
        force_update: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
        
    Returns:
        dict: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    """
    json_path = "components/navigation_data.json"
    
    # –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
    if force_update and df is not None:
        return prepare_navigation_json(df, json_path)
    
    # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
    if os.path.exists(json_path):
        try:
            with open(json_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            if df is not None:
                return prepare_navigation_json(df, json_path)
    else:
        # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç –∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        if df is not None:
            return prepare_navigation_json(df, json_path)
    
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    return {"main_sections": [], "programs": []}