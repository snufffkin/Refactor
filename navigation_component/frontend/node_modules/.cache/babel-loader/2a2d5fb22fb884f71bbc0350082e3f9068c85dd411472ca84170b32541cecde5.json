{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nexport default {\n  name: 'NavigationItem',\n  props: {\n    item: {\n      type: Object,\n      required: true\n    },\n    currentPage: {\n      type: String,\n      default: ''\n    },\n    currentParams: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data() {\n    return {\n      isExpanded: false\n    };\n  },\n  computed: {\n    hasChildren() {\n      return !!(this.item.children || this.item.modules || this.item.lessons || this.item.groups || this.item.cards && this.item.cards.length);\n    },\n    getChildren() {\n      return this.item.children || this.item.modules || this.item.lessons || this.item.groups || this.item.cards || [];\n    },\n    isActive() {\n      if (this.item.id === this.currentPage) {\n        return true;\n      }\n\n      // Проверка на соответствие программе, модулю, уроку и т.д.\n      if (this.currentParams) {\n        if (this.currentParams.program === this.item.id) return true;\n        if (this.currentParams.module === this.item.id) return true;\n        if (this.currentParams.lesson === this.item.id) return true;\n        if (this.currentParams.gz === this.item.id) return true;\n        if (this.currentParams.card_id === this.item.id) return true;\n      }\n      return false;\n    },\n    getCircleClass() {\n      // Определение класса круга на основе риска для карточки\n      if (this.item.risk) {\n        if (this.item.risk > 0.75) return 'red';\n        if (this.item.risk > 0.5) return 'orange';\n        if (this.item.risk > 0.25) return 'green';\n      }\n      return 'blue';\n    }\n  },\n  created() {\n    // Автоматически раскрываем элемент, если он активен\n    this.isExpanded = this.isActive || this.hasActiveChild();\n  },\n  methods: {\n    toggleExpanded() {\n      this.isExpanded = !this.isExpanded;\n    },\n    hasActiveChild() {\n      // Проверяем есть ли активные дочерние элементы\n      const children = this.getChildren;\n      if (!children.length) return false;\n      return children.some(child => {\n        // Проверяем соответствие параметрам URL\n        if (child.id === this.currentPage) return true;\n        if (this.currentParams.program === child.id) return true;\n        if (this.currentParams.module === child.id) return true;\n        if (this.currentParams.lesson === child.id) return true;\n        if (this.currentParams.gz === child.id) return true;\n        if (this.currentParams.card_id === child.id) return true;\n        return false;\n      });\n    },\n    formatName(name) {\n      if (!name) return '';\n\n      // Форматирование длинных названий с добавлением возможности переноса\n      if (name.length > 60) {\n        let result = '';\n        let charCount = 0;\n        for (let i = 0; i < name.length; i++) {\n          result += name[i];\n          charCount++;\n          if (charCount >= 60 && i < name.length - 1) {\n            if (!/[\\s.,]/.test(name[i + 1])) {\n              result += '<wbr>'; // Используем wbr для возможности переноса\n            }\n            charCount = 0;\n          }\n          if (/[\\s.,]/.test(name[i])) {\n            charCount = 0;\n          }\n        }\n        return result;\n      }\n      return name;\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}